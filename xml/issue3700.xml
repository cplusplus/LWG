<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3700" status="Resolved">
<title>The <tt>const begin</tt> of the <tt>join_view</tt> family does not require <tt><i>InnerRng</i></tt> to be a range</title>
<section><sref ref="[range.join.view]"/><sref ref="[range.join.with.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>17 May 2022</date>
<priority>3</priority>

<discussion>
<p>
This is a follow-up of LWG <iref ref="3599"/>.
</p>
<p>
Currently, the <tt>const</tt> version of <tt>join_view::begin</tt> has the following constraints
</p>
<blockquote>
<pre>
constexpr auto begin() const
  requires input_range&lt;const V&gt; &amp;&amp;
           is_reference_v&lt;range_reference_t&lt;const V&gt;&gt;
{ return <i>iterator</i>&lt;true&gt;{*this, ranges::begin(<i>base_</i>)}; }
</pre>
</blockquote>
<p>
which only requires <tt><i>InnerRng</i></tt> to be a reference type, but in some cases, <tt><i>InnerRng</i></tt>
may not be a <tt>range</tt>. <a href="https://godbolt.org/z/P8baTb5ee">Consider</a>
</p>
<blockquote>
<pre>
#include &lt;ranges&gt;

int main() {
  auto r = std::views::iota(0, 5)
         | std::views::split(1);
  auto s = std::views::single(r);
  auto j = s | std::views::join;
  auto f = j.front();
}
</pre>
</blockquote>
<p>
The reference type of <tt>single_view</tt> is <tt>const split_view&amp;</tt>, which only has the non-<tt>const</tt>
version of <tt>begin</tt>, which will cause <tt>view_interface</tt>'s <tt>const front</tt> to be incorrectly
instantiated, making <tt>r.front()</tt> unnecessarily ill-formed.
</p>
<p>
We should add this check for <tt>join_view</tt>'s <tt>const begin</tt>, as well as <tt>join_with_view</tt>.
</p>


<note>2022-06-21; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

<superseded>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[range.join.view]"/>, class template <tt>join_view</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {

  [&hellip;]

  template&lt;input_range V&gt;
    requires view&lt;V&gt; &amp;&amp; input_range&lt;range_reference_t&lt;V&gt;&gt;
  class join_view : public view_interface&lt;join_view&lt;V&gt;&gt; {
  private:
    [&hellip;]
  public:
    [&hellip;]

    constexpr auto begin() {
      [&hellip;]
    }

    constexpr auto begin() const
      requires input_range&lt;const V&gt; &amp;&amp;
                <ins>input_range&lt;range_reference_t&lt;const V&gt;&gt; &amp;&amp;</ins>
                is_reference_v&lt;range_reference_t&lt;const V&gt;&gt;
    { return <i>iterator</i>&lt;true&gt;{*this, ranges::begin(<i>base_</i>)}; }

    constexpr auto end() {
      [&hellip;]
    }

    constexpr auto end() const
      requires input_range&lt;const V&gt; &amp;&amp;
                <ins>input_range&lt;range_reference_t&lt;const V&gt;&gt; &amp;&amp;</ins>
                is_reference_v&lt;range_reference_t&lt;const V&gt;&gt; {
      if constexpr (forward_range&lt;const V&gt; &amp;&amp;
                    forward_range&lt;range_reference_t&lt;const V&gt;&gt; &amp;&amp;
                    common_range&lt;const V&gt; &amp;&amp;
                    common_range&lt;range_reference_t&lt;const V&gt;&gt;)
        return <i>iterator</i>&lt;true&gt;{*this, ranges::end(<i>base_</i>)};
      else
        return <i>sentinel</i>&lt;true&gt;{*this};
    }
  };

  [&hellip;]

}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.join.with.view]"/>, class template <tt>join_with_view</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {

  [&hellip;]

  template&lt;input_range V, forward_range Pattern&gt;
  requires view&lt;V&gt; &amp;&amp; input_range&lt;range_reference_t&lt;V&gt;&gt;
        &amp;&amp; view&lt;Pattern&gt;
        &amp;&amp; <i>compatible-joinable-ranges</i>&lt;range_reference_t&lt;V&gt;, Pattern&gt;
  class join_with_view : public view_interface&lt;join_with_view&lt;V, Pattern&gt;&gt; {
  private:
    [&hellip;]
  public:
    [&hellip;]

    constexpr auto begin() {
      [&hellip;]
    }
    constexpr auto begin() const
      requires input_range&lt;const V&gt; &amp;&amp;
                forward_range&lt;const Pattern&gt; &amp;&amp;
                <ins>input_range&lt;range_reference_t&lt;const V&gt;&gt; &amp;&amp;</ins>
                is_reference_v&lt;range_reference_t&lt;const V&gt;&gt; {
      return <i>iterator</i>&lt;true&gt;{*this, ranges::begin(<i>base_</i>)};
    }

    constexpr auto end() {
      [&hellip;]
    }
    constexpr auto end() const
      requires input_range&lt;const V&gt; &amp;&amp; forward_range&lt;const Pattern&gt; &amp;&amp;
                <ins>input_range&lt;range_reference_t&lt;const V&gt;&gt; &amp;&amp;</ins>
                is_reference_v&lt;range_reference_t&lt;const V&gt;&gt; {
      using InnerConstRng = range_reference_t&lt;const V&gt;;
      if constexpr (forward_range&lt;const V&gt; &amp;&amp; forward_range&lt;InnerConstRng&gt; &amp;&amp;
                    common_range&lt;const V&gt; &amp;&amp; common_range&lt;InnerConstRng&gt;)
        return <i>iterator</i>&lt;true&gt;{*this, ranges::end(<i>base_</i>)};
      else
        return <i>sentinel</i>&lt;true&gt;{*this};
    }
  };

  [&hellip;]

}
</pre>
</blockquote>
</li>
</ol>
</superseded>

<note>2023-03-22 Resolved by the adoption of <paper num="P2770R0"/> in Issaquah. Status changed: New &rarr; Resolved.</note>
</discussion>

<resolution>
</resolution>

</issue>
