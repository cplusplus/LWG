<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1297" status="Resolved">
<title><tt>unique_ptr</tt>'s relational operator functions should induce a total order</title>
<section><sref ref="[unique.ptr.special]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>23 Dec 2009</date>

<discussion>
<p>
The comparison functions of <tt>unique_ptr</tt> currently directly delegate to
the underlying comparison functions of <tt>unique_ptr&lt;T, D&gt;::pointer</tt>.
This is disadvantageous, because this would not guarantee to induce a total
ordering for native pointers and it is hard to define a total order for mixed
types anyway.
</p>
<p>
The currently suggested resolution for <tt>shared_ptr</tt> comparison as of
<iref ref="1262"/> uses a normalization strategy: They perform the comparison on
the <em>composite pointer type</em> (<sref ref="[expr.rel]"/>). This is not
exactly possible for <tt>unique_ptr</tt> in the presence of user-defined
pointer-like types but the existing definition of <tt>std::duration</tt>
comparison as of <sref ref="[time.duration.comparisons]"/> via
<tt>common_type</tt> of both argument types demonstrates a solution of this
problem. The approach can be seen as the general way to define a <em>composite
pointer type</em> and this is the approach which is used for here suggested
wording change.
</p>
<p>
For consistency reasons I would have preferred the same normalization strategy
for <tt>==</tt> and <tt>!=</tt>, but Howard convinced me not to do so (now).
</p>

<note>
2010-11-03 Daniel comments and adjustes the currently proposed wording changes:
</note>

<p>
Issue <iref ref="1401"/> is remotely related. <a href="#1401_extra_bullet">Bullet A</a> of its proposed resolution 
provides an alternative solution for issue discussed here and addresses NB comment GB-99.
Additionally I updated the below suggested wording in regard to the following:
It is an unncessary requirement that the below defined effective composite pointer-like
type <tt>CT</tt> satisfies the <tt>LessThanComparable</tt> requirements. All what is 
needed is, that the function object type <tt>less&lt;CT&gt;</tt> induces a strict
weak ordering on the pointer values.
</p>

<note>2011-03-24 Madrid meeting</note>

<p>Resolved by <iref ref="1401"/></p>

</discussion>

<resolution>

<p>
Change <sref ref="[unique.ptr.special]"/>/4-7 as indicated: <i>[The implicit
requirements and remarks imposed on the last three operators are the same as for
the first one due to the normative "equivalent to" usage within a Requires
element, see <sref ref="[structure.specifications]"/>/4. The effects of this
change are that all real pointers wrapped in a <tt>unique_ptr</tt> will order
like <tt>shared_ptr</tt> does.]</i>
</p>

<blockquote><pre>
template &lt;class T1, class D1, class T2, class D2&gt;
  bool operator&lt;(const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y);
</pre>

<blockquote>
<p>
<ins>? <i>Requires:</i> Let <tt>CT</tt> be <tt>common_type&lt;unique_ptr&lt;T1,
D1&gt;::pointer, unique_ptr&lt;T2, D2&gt;::pointer&gt;::type</tt>. Then
the specialization <tt>less&lt;CT&gt;</tt> shall be a function object type ([function.objects]) 
that induces a strict weak ordering ([alg.sorting]) on the pointer values.</ins>
</p>

<p>
4 <i>Returns:</i> <tt><ins>less&lt;CT&gt;()(x.get(), y.get())</ins><del>x.get()
&lt; y.get()</del></tt>.
</p>

<p>
<ins>? <i>Remarks:</i> If <tt>unique_ptr&lt;T1, D1&gt;::pointer</tt> is not
implicitly convertible to <tt>CT</tt> or <tt>unique_ptr&lt;T2,
D2&gt;::pointer</tt> is not implicitly convertible to <tt>CT</tt>, the program
is ill-formed.</ins>
</p>
</blockquote>

<pre>
template &lt;class T1, class D1, class T2, class D2&gt;
  bool operator&lt;=(const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y);
</pre>

<blockquote><p>
5 <ins><i>Effects:</i> Equivalent to <tt>return !(y &lt; x)</tt></ins>
<del><i>Returns:</i> <tt>x.get() &lt;= y.get()</tt></del>.
</p></blockquote>

<pre>
template &lt;class T1, class D1, class T2, class D2&gt;
  bool operator&gt;(const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y);
</pre>

<blockquote><p>
6 <ins><i>Effects:</i> Equivalent to <tt>return (y &lt; x)</tt></ins>
<del><i>Returns:</i> <tt>x.get() &gt; y.get()</tt></del>.
</p></blockquote>

<pre>
template &lt;class T1, class D1, class T2, class D2&gt;
  bool operator&gt;=(const unique_ptr&lt;T1, D1&gt;&amp; x, const unique_ptr&lt;T2, D2&gt;&amp; y);
</pre>

<blockquote><p>
7 <ins><i>Effects:</i> Equivalent to <tt>return !(x &lt; y)</tt></ins>
<del><i>Returns:</i> <tt>x.get() &gt;= y.get()</tt></del>.
</p></blockquote>
</blockquote>

</resolution>

</issue>
