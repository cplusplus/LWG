<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4299" status="Voting">
<title>Missing <i>Mandates:</i> part in <tt>optional&lt;T&amp;&gt;::transform</tt></title>
<section><sref ref="[optional.ref.monadic]"/></section>
<submitter>Giuseppe D'Angelo</submitter>
<date>15 Jul 2025</date>
<priority>99</priority>

<discussion>
<p>
In <sref ref="[optional.ref.monadic]"/> the specification of <tt>optional&lt;T&amp;&gt;::transform</tt>
is missing an additional part of the <i>Mandates:</i> element compared to the primary template's
`transform` (in <sref ref="[optional.monadic]"/> p8); that is, is missing to enforce that
the `U` type is a valid contained type for `optional`.
<p/>
The definition of "valid contained type" comes from <paper num="P2988R12"/>. The paper
amended the <i>Mandates:</i> element of the primary template's `transform` to
use this definition. The fact that the same wording has not been applied to 
<tt>optional&lt;T&amp;&gt;::transform</tt> as well looks like an oversight. I would
suggest to apply it.
</p>

<note>2025-10-16; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>
<p>
As
<code>optional&lt;remove_cv_t&lt;invoke_result_t&lt;F, T&amp;&gt;&gt;&gt;</code>
is part of the signature (return type), we never enter the body to trigger the
<i>Mandates</i>, so it's already implicitly ill-formed if the result of `f`
is not a valid contained type. It's worth clarifying that though."
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5014"/>.
</p>

<ol>

<li><p>Modify <sref ref="[optional.ref.monadic]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class F&gt;
  constexpr optional&lt;remove_cv_t&lt;invoke_result_t&lt;F, T&amp;&gt;&gt;&gt; transform(F&amp;&amp; f) const;
</pre>
<blockquote>
<p>
-4- Let `U` be <tt>remove_cv_t&lt;invoke_result_t&lt;F, T&amp;&gt;&gt;</tt>.
<p/>
-5- <i>Mandates</i>: <ins>`U` is a valid contained type for `optional`.</ins> The declaration
</p>
<blockquote><pre>
U u(invoke(std::forward&lt;F&gt;(f), *val ));
</pre></blockquote>
<p>
is well-formed for some invented variable `u`.
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
