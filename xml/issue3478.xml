<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3478" status="Resolved">
<title><tt>views::split</tt> drops trailing empty range</title>
<section><sref ref="[range.split]"/></section>
<submitter>Barry Revzin</submitter>
<date>20 Aug 2020</date>
<priority>2</priority>

<discussion>
<p>
From <a href="https://stackoverflow.com/q/63497978/2069064">StackOverflow</a>, the program:
</p>
<blockquote><pre>
#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;ranges&gt;

int main()
{
  std::string s = " text ";
  auto sv = std::ranges::views::split(s, ' ');
  std::cout &lt;&lt; std::ranges::distance(sv.begin(), sv.end());
}
</pre></blockquote>
<p>
prints 2 (as specified), but it really should print 3. If a range has <tt>N</tt> delimiters in it,
splitting should produce <tt>N+1</tt> pieces. If the <tt>N</tt><sup>th</sup> delimiter is the last
element in the input range, <tt>views::split</tt> produces only <tt>N</tt> pieces &mdash; it doesn't
emit a trailing empty range.
<p/>
Going through a bunch of languages gets a sense of what they all do here. There are basically two
groups (and Haskell goes in both because it has several different split functions)
</p>
<ol>
<li><p>Rust, Python, Javascript, Go, Kotlin, Haskell's <tt>"splitOn"</tt> all provide <tt>N+1</tt> parts
if there were <tt>N</tt> delimiters.</p></li>
<li><p>APL, D, Elixir, Haskell's <tt>"words"</tt>, Ruby, and Clojure all compress all empty words.
Splitting <tt>" x "</tt> on <tt>" "</tt> would give <tt>["x"]</tt> here, whereas the languages in the
above group would give <tt>["", "x", ""]</tt></p></li>
</ol>
<p>
Java is distinct from both groups in that it is mostly a first category language, except that by default
it removes all trailing empty strings (but it keeps all leading and intermediate empty strings, unlike
the second category languages) &mdash; although it has a parameter that lets you keep the trailing ones too.
<p/>
C++20's behavior is closest to Java's default, except that it only removes one trailing empty string
instead of every trailing empty string &mdash; and this behavior is not parameterizeable. But I think the
intent is to be squarely in the first category, so I think the current behavior is just a specification error.
<p/>
Many of these languages also provide an additional extra parameter to limit how many splits happen (e.g.
Java, Kotlin, Python, Rust, JavaScript), but that's a separate design question.
</p>

<note>2020-09-02; Reflector prioritization</note>
<p>
Set priority to 2 as result of reflector discussions.
</p>
<note>2021-06-13 Resolved by the adoption of <paper num="P2210R2"/> at the June 2021 plenary. Status changed: New &rarr; Resolved.</note>
</discussion>

<resolution>
</resolution>

</issue>
