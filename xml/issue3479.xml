<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3479" status="Resolved">
<title><tt><i>semiregular-box</i></tt> mishandles self-assignment</title>
<section><sref ref="[range.move.wrap]"/></section>
<submitter>Casey Carter</submitter>
<date>25 Aug 2020</date>
<priority>3</priority>

<discussion>
<p>
The exposition-only wrapper type <tt><i>semiregular-box</i></tt> &mdash; specified in <sref ref="[range.semi.wrap]"/>
&mdash; layers behaviors onto <tt>std::optional</tt> so <tt><i>semiregular-box</i>&lt;T&gt;</tt> is
semiregular even when <tt>T</tt> is only copy constructible. It provides copy and move assignment
operators when <tt>optional&lt;T&gt;</tt>'s are deleted:
</p>
<blockquote><p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; [&hellip;]</p></li>
<li><p>(1.2) &mdash; [&hellip;]</p></li>
<li><p>(1.3) &mdash; If <tt>assignable_from&lt;T&amp;, const T&amp;&gt;</tt>
is not modeled, the copy assignment operator is equivalent to:</p>
<pre>
<i>semiregular-box</i>&amp; operator=(const <i>semiregular-box</i>&amp; that)
  noexcept(is_nothrow_copy_constructible_v&lt;T&gt;)
{
  if (that) emplace(*that);
  else reset();
  return *this;
}
</pre>
</li>
<li><p>(1.4) &mdash; If <tt>assignable_from&lt;T&amp;, T&gt;</tt>
is not modeled, the move assignment operator is equivalent to:</p>
<pre>
<i>semiregular-box</i>&amp; operator=(<i>semiregular-box</i>&amp;&amp; that)
  noexcept(is_nothrow_move_constructible_v&lt;T&gt;)
{
  if (that) emplace(std::move(*that));
  else reset();
  return *this;
}
</pre>
</li>
</ol>
</p></blockquote>
<p>
How do these assignment operators handle self-assignment? When <tt>*this</tt> is empty, <tt>that</tt>
will test as <tt>false</tt> and <tt>reset()</tt> has no effect, so the result state of the object is
the same. No problems so far. When <tt>*this</tt> isn't empty, <tt>that</tt> will test as <tt>true</tt>,
and we evaluate <tt>optional::emplace(**this)</tt> (resp. <tt>optional::emplace(std::move(**this)))</tt>.
This outcome is not as pretty: <tt>emplace</tt> is specified in <sref ref="[optional.assign]"/>/30:
"<i>Effects:</i> Calls <tt>*this = nullopt</tt>. Then initializes the contained value as if
direct-non-list-initializing an object of type <tt>T</tt> with the arguments
<tt>std::forward&lt;Args&gt;(args)...</tt>." When the sole argument is an lvalue (resp. xvalue) of type
<tt>T</tt> that denotes the <tt>optional</tt>'s stored value, <tt>emplace</tt> will destroy that
stored value and then try to copy/move construct a new object at the same address from the dead object
that used to live there resulting in undefined behavior. Mandatory undefined behavior does <em>not</em>
meet the semantic requirements for the <tt>copyable</tt> or <tt>movable</tt> concepts, we should do better.
</p>

<note>2020-09-13; Reflector prioritization</note>
<p>
Set priority to 3 during reflector discussions.
</p>
<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[range.semi.wrap]"/> as indicated:</p>

<blockquote>
<p>
-1- Many types in this subclause are specified in terms of an exposition-only class template
<tt><i>semiregular-box</i></tt>. <tt><i>semiregular-box</i>&lt;T&gt;</tt> behaves exactly like
<tt>optional&lt;T&gt;</tt> with the following differences:
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; [&hellip;]</p></li>
<li><p>(1.2) &mdash; [&hellip;]</p></li>
<li><p>(1.3) &mdash; If <tt>assignable_from&lt;T&amp;, const T&amp;&gt;</tt>
is not modeled, the copy assignment operator is equivalent to:</p>
<pre>
<i>semiregular-box</i>&amp; operator=(const <i>semiregular-box</i>&amp; that)
  noexcept(is_nothrow_copy_constructible_v&lt;T&gt;)
{
  <ins>if (this != addressof(that)) {</ins>
    if (that) emplace(*that);
    else reset();
  <ins>}</ins>
  return *this;
}
</pre>
</li>
<li><p>(1.4) &mdash; If <tt>assignable_from&lt;T&amp;, T&gt;</tt>
is not modeled, the move assignment operator is equivalent to:</p>
<pre>
<i>semiregular-box</i>&amp; operator=(<i>semiregular-box</i>&amp;&amp; that)
  noexcept(is_nothrow_move_constructible_v&lt;T&gt;)
{
  <ins>reset();</ins>
  if (that) emplace(std::move(*that));
  <del>else reset();</del>
  return *this;
}
</pre>
</li>
</ol>
</blockquote>
</li>
</ol>
</blockquote>

<note>2021-06-13 Resolved by the adoption of <paper num="P2325R3"/> at the June 2021 plenary. Status changed: New &rarr; Resolved.</note>
</discussion>

<resolution>
</resolution>

</issue>
