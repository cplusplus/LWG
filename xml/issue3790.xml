<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3790" status="New">
<title>P1467 accidentally changed <tt>nexttoward</tt>'s signature</title>
<section><sref ref="[cmath.syn]"/></section>
<submitter>David Olsen</submitter>
<date>30 Sep 2022</date>
<priority>1</priority>

<discussion>
<p>
<paper num="P1467"/> (Extended floating-point types), which was adopted for C++23 at the July plenary, 
has a typo (which is entirely my fault) that no one noticed during wording review.  The changes to the 
<tt>&lt;cmath&gt;</tt> synopsis in the paper included changing this:
</p>
<blockquote><pre>
constexpr float nexttoward(float x, long double y);       // see [library.c]
constexpr double nexttoward(double x, long double y);
constexpr long double nexttoward(long double x, long double y);   // see [library.c]
</pre></blockquote>
<p>
to this:
</p>
<blockquote><pre>
constexpr <i>floating-point-type</i> nexttoward(<i>floating-point-type</i> x, <i>floating-point-type</i> y);
</pre></blockquote>
<p>
That changed the second parameter of <tt>nexttoward</tt> from always being <tt>long double</tt> to being 
<tt><i>floating-point-type</i></tt>, which matches the type of the first parameter.
<p/>
The change is obviously incorrect. The purpose of the changes to <tt>&lt;cmath&gt;</tt> was to add overloads 
of the functions for extended floating-point types, not to change any existing signatures.
</p>

<note>2022-10-10; Reflector poll</note>
<p>
Set priority to 1 after reflector poll. Discussion during prioritization
revolved around whether to delete <code>nexttoward</code> for new FP types
or just restore the C++20 signatures, which might accept the new types via
implicit conversions (and so return a different type, albeit with the same
representation and same set of values).
</p>
<p>
"When the first argument to <code>nexttoward</code> is an extended
floating-point type that doesn't have the same representation as a standard
floating-point type, such as <code>std::float16_t</code>,
<code>std::bfloat16_t</code>, or <code>std::float128_t</code> (on some systems),
the call to <code>nexttoward</code> is ambiguous and ill-formed,
so the unexpected return type is not an issue.
Going through the extra effort of specifying '= delete' for
<code>nexttoward</code> overloads that have extended floating-point arguments
is a solution for a problem that doesn't really exist."
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[cmath.syn]"/>, header <tt>&lt;cmath&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
constexpr <i>floating-point-type</i> nexttoward(<i>floating-point-type</i> x, <del><i>floating-point-type</i></del><ins>long double</ins> y);
constexpr float nexttowardf(float x, long double y);
constexpr long double nexttowardl(long double x, long double y);
[&hellip;]
</pre>
</blockquote>
</li>
</ol>
</blockquote>

<note>2022-10-04; David Olsen comments and provides improved wording</note>
<p>
C23 specifies variants of most of the functions in <tt>&lt;math.h&gt;</tt> for the <tt>_FloatN</tt> types 
(which are C23's equivalent of C++23's <tt>std::floatN_t</tt> types). But it does not specify those variants 
for <tt>nexttoward</tt>.
<p/>
Based on what C23 is doing, I think it would be reasonable to leave <tt>nexttoward</tt>'s signature unchanged 
from C++20. There would be no requirement to provide overloads for extended floating-point types, only for 
the standard floating-point types. Instead of explicitly deleting the overloads with extended floating-point 
types, we can just never declare them in the first place.
</p>

<superseded>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[cmath.syn]"/>, header <tt>&lt;cmath&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
[&hellip;]
<ins>constexpr float nexttoward(float x, long double y);</ins>
<ins>constexpr double nexttoward(double x, long double y);</ins>
<ins>constexpr long double nexttoward(long double x, long double y);</ins>
<del>constexpr <i>floating-point-type</i> nexttoward(<i>floating-point-type</i> x, <i>floating-point-type</i> y);</del>
constexpr float nexttowardf(float x, long double y);
constexpr long double nexttowardl(long double x, long double y);
[&hellip;]
</pre>
</blockquote>
</li>
</ol>
</superseded>

<note>2022-11-12; Tomasz comments and provides improved wording</note>
<p>
During 2022-10-26 LWG telecon we decided that we want to make the calls of the <code>nexttoward</code>
to be ill-formed (equivalent of Mandates) when the first argument is extended floating-point type.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
	
<li><p>Modify <sref ref="[cmath.syn]"/>, header <tt>&lt;cmath&gt;</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
[&hellip;]
constexpr <i>floating-point-type</i> nexttoward(<i>floating-point-type</i> x, <del><i>floating-point-type</i></del><ins>long double</ins> y);
constexpr float nexttowardf(float x, long double y);
constexpr long double nexttowardl(long double x, long double y);
[&hellip;]
</pre>
</blockquote>
</li>


<li><p>Add following paragraph at the end of <sref ref="[cmath.syn]"/>, header <tt>&lt;cmath&gt;</tt> synopsis:</p>

<blockquote>
<ins>-?- An invocation of the <code>nexttoward</code> is ill-formed if the argument corresponding to the <i>floating-point-type</i>
parameter has extended floating-point type.</ins>
</blockquote>
</li>
</ol>
</resolution>


</issue>
