<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4269" status="Voting">
<title>`unique_copy` passes arguments to its predicate backwards</title>
<section><sref ref="[alg.unique]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>29 May 2025</date>
<priority>99</priority>

<discussion>
<p>
For the `unique` algorithms, <sref ref="[alg.unique]"/> p1 says:
</p>
<blockquote>
1. Let `pred` be `equal_to{}` for the overloads with no parameter `pred`,
and let <i>E</i> be
<ol style="list-style-type: none">
<li> (1.1)
 &mdash; `bool(pred(*(i - 1), *i))` for the overloads in namespace `std`;
</li>
<li>(1.2)
 &mdash; `bool(invoke(comp, invoke(proj, *(i - 1)), invoke(proj, *i)))`
 for the overloads in namespace `ranges`.
</li>
</ol>
</blockquote>
<p>
However for the `unique_copy` algorithms, <sref ref="[alg.unique]"/> p6 says
that the arguments `*i` and `*(i-1)` should be reversed:
</p>
<blockquote>
6. Let `pred` be `equal_to{}` for the overloads with no parameter `pred`,
and let <i>E</i> be
<ol style="list-style-type: none">
<li> (6.1)
 &mdash; `bool(pred(*i, *(i - 1)))` for the overloads in namespace `std`;
</li>
<li>(6.2)
 &mdash; `bool(invoke(comp, invoke(proj, *i), invoke(proj, *(i - 1))))`
 for the overloads in namespace `ranges`.
</li>
</ol>
</blockquote>
<p>
This reversed order is consistent with the documentation for
<a href="https://stl.boost.org/unique_copy.html">SGI STL `unique_copy`</a>,
although the docs for 
<a href="https://stl.boost.org/unique_copy.html">SGI STL `unique`</a>
show reversed arguments too, and the C++ standard doesn't match that.
</p>
<p>
A survey of known implementations shows that all three of libstdc++, libc++,
and MSVC STL use the `pred(*(i - 1), *i)` order for all of `std::unique`,
`std::unique_copy`, `ranges::unique`, and `ranges::unique_copy`. The range-v3
library did the same, and even the SGI STL did too (despite what its docs said).
Only two implementations were found which match the spec and use a different
argument order for `unique` and `unique_copy`, Casey Carter's (cmcstl2) and
Fraser Gordon's.
</p>
<p>
In the absence of any known rationale for `unique` and `unique_copy` to differ,
it seems sensible to make `unique_copy` more consistent with `unique`
(and with the majority of implementations stretching back three decades).
</p>

<note>2025-10-17; Reflector poll.</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>
<p>
Fixed misplaced `)` in the (6.1) change as pointed out on reflector,
and rebased on <paper num="N5014"/>.
</p>
<p>
"I remain inconvinced that this actually matters given the equivalence relation requirement."
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5014"/>.
</p>

<ol>
<li><p>Modify <sref ref="[alg.unique]"/> as indicated:</p>
<blockquote>
6. Let `pred` be `equal_to{}` for the overloads with no parameter `pred`,
and let <i>E</i>(`i`) be
<ol style="list-style-type: none">
<li> (6.1)
 &mdash; <code>bool(pred(<del>*i,</del> *(i - 1)<ins>, *i</ins>))</code>
 for the overloads in namespace `std`;
</li>
<li>(6.2)
 &mdash; <code>bool(invoke(comp, <del>invoke(proj, *i),</del>
 invoke(proj, *(i - 1))<ins>, invoke(proj, *i)</ins>))</code>
 for the overloads in namespace `ranges`.
</li>
</ol>
</blockquote>
</li>
</ol>
</resolution>

</issue>
