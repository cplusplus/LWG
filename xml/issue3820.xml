<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3820" status="Voting">
<title><tt>cartesian_product_view::<i>iterator</i>::<i>prev</i></tt> is not quite right</title>
<section><sref ref="[range.cartesian.iterator]"/></section>
<submitter>Hewill Kang</submitter>
<date>8 Nov 2022</date>
<priority>99</priority>

<discussion>
<p>
Currently, <tt>cartesian_product_view::<i>iterator</i>::<i>prev</i></tt> has the following <i>Effects</i>:
</p>
<blockquote><pre>
auto&amp; it = std::get&lt;N&gt;(<i>current_</i>);
if (it == ranges::begin(std::get&lt;N&gt;(<i>parent_</i>-><i>bases_</i>))) {
  it = <i>cartesian-common-arg-end</i>(std::get&lt;N&gt;(<i>parent_</i>-&gt;<i>bases_</i>));
  if constexpr (N &gt; 0) {
    <i>prev</i>&lt;N - 1&gt;();
  }
}
--it;
</pre></blockquote>
<p>
which decrements the underlying iterator one by one using recursion. 
However, when <tt>N == 0</tt>, it still detects if the first iterator has reached the beginning and assigns it to 
the end, which is not only unnecessary, but also causes <tt><i>cartesian-common-arg-end</i></tt> to be applied to 
the first range, making it ill-formed in some cases, <a href="https://godbolt.org/z/Pd6bYnP1G">for example</a>:
</p>
<blockquote><pre>
#include &lt;ranges&gt;

int main() {
  auto r = std::views::cartesian_product(std::views::iota(0));
  r.begin() += 3; // <span style="color:red;font-weight:bolder">hard error</span>
}
</pre></blockquote>
<p>
This is because, for the first range, <tt>cartesian_product_view::<i>iterator</i>::operator+=</tt> only requires 
it to model <tt>random_access_range</tt>.
However, when <tt>x</tt> is negative, this function will call <tt><i>prev</i></tt> and indirectly calls 
<tt><i>cartesian-common-arg-end</i></tt>, since the latter constrains its argument to satisfy 
<tt><i>cartesian-product-common-arg</i></tt>, that is, <tt>common_range&lt;R&gt; || (sized_range&lt;R&gt; &amp;&amp; 
random_access_range&lt;R&gt;)</tt>, which is not the case for the unbounded <tt>iota_view</tt>, resulting in a 
hard error in <tt><i>prev</i></tt>'s function body.
<p/>
The proposed resolution changes the position of the <tt>if constexpr</tt> so that we just decrement the first 
iterator and nothing else.
</p>

<note>Kona 2022-11-08; Move to Ready</note>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[ranges.cartesian.iterator]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;size_t N = sizeof...(Vs)&gt;
  constexpr void <i>prev</i>();
</pre>
<blockquote>
<p>
-6- <i>Effects</i>: Equivalent to:
</p>
<pre>
auto&amp; it = std::get&lt;N&gt;(<i>current_</i>);
<ins>if constexpr (N > 0) {</ins>
  if (it == ranges::begin(std::get&lt;N&gt;(<i>parent_</i>-><i>bases_</i>))) {
    it = <i>cartesian-common-arg-end</i>(std::get&lt;N&gt;(<i>parent_</i>-&gt;<i>bases_</i>));
    <del>if constexpr (N &gt; 0) {</del>
      <i>prev</i>&lt;N - 1&gt;();
    <del>}</del>
  }
<ins>}</ins>
--it;
</pre>
</blockquote>
</blockquote>

</li>
</ol>
</resolution>

</issue>
