<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3639" status="Resolved">
<title>Handling of fill character width is underspecified in <tt>std::format</tt></title>
<section><sref ref="[format.string.std]"/></section>
<submitter>Victor Zverovich</submitter>
<date>13 Nov 2021</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[format.string.std]"/> doesn't specify if implementations should consider the estimated width
of the fill character when substituting it into the formatted results.
<p/>
For example:
</p>
<blockquote><pre>
auto s = std::format("{:&#x1F921;&gt;10}", 42);
</pre></blockquote>
<p>
<tt>"&#x1F921;"</tt> (U+1F921) is a single code point but its estimated display width is two.
<p/>
There are at least three possible resolutions:
</p>
<ol>
<li><p><tt>s == "&#x1F921;&#x1F921;&#x1F921;&#x1F921;42"</tt>: use the estimated display width,
correctly displayed on compatible terminals.</p></li>
<li><p><tt>s == "&#x1F921;&#x1F921;&#x1F921;&#x1F921;&#x1F921;&#x1F921;&#x1F921;&#x1F921;42"</tt>:
assume the display width of 1, incorrectly displayed.</p></li>
<li><p>Require the fill character to have the estimated width of 1.</p></li>
</ol>

<note>2021-11-14; Daniel comments</note>
<p>
Resolving this issue should be harmonized with resolving LWG <iref ref="3576"/>.
</p>

<note>2022-01-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll. Sent to SG16.
</p>

<note>2023-01-11; LWG telecon</note>
<p>
<paper num="P2572"/> would resolve this issue and LWG <iref ref="3576"/>.
</p>

<note>2023-03-22 Resolved by the adoption of <paper num="P2572R1"/> in Issaquah. Status changed: SG16 &rarr; Resolved.</note>
</discussion>

<resolution>
</resolution>

</issue>
