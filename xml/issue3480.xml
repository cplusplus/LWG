<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3480" status="New">
<title><tt>directory_iterator</tt> and <tt>recursive_directory_iterator</tt> are not C++20 ranges</title>
<section><sref ref="[fs.class.directory.iterator]"/><sref ref="[fs.class.rec.dir.itr]"/></section>
<submitter>Barry Revzin</submitter>
<date>27 Aug 2020</date>
<priority>3</priority>

<discussion>
<p>
<tt>std::filesystem::directory_iterator</tt> and <tt>std::filesystem::recursive_directory_iterator</tt> are
intended to be ranges, but both fail to satisfy the concept <tt>std::ranges::range</tt>.
<p/>
They both opt in to being a range the same way, via non-member functions:
</p>
<blockquote><pre>
directory_iterator begin(directory_iterator iter) noexcept;
directory_iterator end(const directory_iterator&amp;) noexcept;

recursive_directory_iterator begin(recursive_directory_iterator iter) noexcept;
recursive_directory_iterator end(const recursive_directory_iterator&amp;) noexcept;
</pre></blockquote>
<p>
This is good enough for a range-based for statement, but for the <tt>range</tt> concept, non-member
<tt>end</tt> is looked up in a context that includes (<sref ref="[range.access.end]"/>/2.6) the declarations:
</p>
<blockquote><pre>
void end(auto&amp;) = delete;
void end(const auto&amp;) = delete;
</pre></blockquote>
<p>
Which means that non-<tt>const</tt> <tt>directory_iterator</tt> and non-<tt>const</tt>
<tt>recursive_directory_iterator</tt>, the <tt>void end(auto&amp;)</tt> overload ends up being
a better match and thus the CPO <tt>ranges::end</tt> doesn't find a candidate. Which means that
<tt>{recursive_,}directory_iterator</tt> is not a range, even though <tt>const {recursive_,}directory_iterator</tt>
<em>is</em> a range.
<p/>
This could be fixed by having the non-member <tt>end</tt> for both of these types just take by value
(as libstdc++ currently does anyway) or by adding member functions <tt>begin() const</tt> and <tt>end() const</tt>.
<p/>
A broader direction would be to consider removing the poison pill overloads. Their motivation from
<a href="https://wg21.link/p0970">P0970</a> was to support what are now called borrowed ranges &mdash; but
that design now is based on specializing a variable template instead of providing a non-member <tt>begin</tt>
that takes an rvalue, so the initial motivation simply no longer exists. And, in this particular case,
causes harm.
</p>

<note>2020-09-06; Reflector prioritization</note>
<p>
Set priority to 3 during reflector discussions.
</p>

<note>2021-02-22, Barry Revzin comments</note>
<p>
When we do make whichever of the alternative adjustments necessary such that
<tt>range&lt;directory_iterator&gt;</tt> is <tt>true</tt>, we should also remember
to specialize <tt>enable_borrowed_range</tt> for both types to be <tt>true</tt> (since
the iterator is the range, this is kind of trivially true).
</p>

<note>2021-05-17, Tim provides wording</note>
<p>
Both MSVC and libstdc++'s <tt>end</tt> already take its argument by value, so
the wording below just does that. Any discussion about changing or removing the
poison pills is probably better suited for a paper.
</p>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4885">N4885</a>.</p>
<ol>
<li>
<p>Edit <sref ref="[fs.filesystem.syn]"/>, header <tt>&lt;filesystem&gt;</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
[&hellip;]
namespace std::filesystem {
  [&hellip;]

  // <sref ref="[fs.dir.itr.nonmembers]"/>, range access for directory iterators
  directory_iterator begin(directory_iterator iter) noexcept;
  directory_iterator end(<del>const</del> directory_iterator<del>&amp;</del>) noexcept;

  [&hellip;]

  // <sref ref="[fs.rec.dir.itr.nonmembers]"/>, range access for recursive directory iterators
  recursive_directory_iterator begin(recursive_directory_iterator iter) noexcept;
  recursive_directory_iterator end(<del>const</del> recursive_directory_iterator<del>&amp;</del>) noexcept;

  [&hellip;]
}

<ins>
namespace std::ranges {
  template&lt;&gt;
  inline constexpr bool enable_borrowed_range&lt;filesystem::directory_iterator&gt; = true;
  template&lt;&gt;
  inline constexpr bool enable_borrowed_range&lt;filesystem::recursive_directory_iterator&gt; = true;

  template&lt;&gt;
  inline constexpr bool enable_view&lt;filesystem::directory_iterator&gt; = true;
  template&lt;&gt;
  inline constexpr bool enable_view&lt;filesystem::recursive_directory_iterator&gt; = true;
}
</ins>
</pre>
</blockquote>
</li>
<li>
<p>Edit <sref ref="[fs.dir.itr.nonmembers]"/> as indicated:</p>
<blockquote>
<p>
-1- These functions enable range access for <tt>directory_iterator</tt>.
</p>
<pre>
directory_iterator begin(directory_iterator iter) noexcept;
</pre>
<blockquote>
<p>
-2- <i>Returns</i>: <tt>iter</tt>.
</p>
</blockquote>
<pre>
directory_iterator end(<del>const</del> directory_iterator<del>&amp;</del>) noexcept;
</pre>
<blockquote>
<p>
-3- <i>Returns</i>: <tt>directory_iterator()</tt>.
</p>
</blockquote>
</blockquote>
</li>
<li>
<p>Edit <sref ref="[fs.rec.dir.itr.nonmembers]"/> as indicated:</p>
<blockquote>
<p>
-1- These functions enable use of <tt>recursive_directory_iterator</tt> with range-based for statements.
</p>
<pre>
recursive_directory_iterator begin(recursive_directory_iterator iter) noexcept;
</pre>
<blockquote>
<p>
-2- <i>Returns</i>: <tt>iter</tt>.
</p>
</blockquote>
<pre>
recursive_directory_iterator end(<del>const</del> recursive_directory_iterator<del>&amp;</del>) noexcept;
</pre>
<blockquote>
<p>
-3- <i>Returns</i>: <tt>recursive_directory_iterator()</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
