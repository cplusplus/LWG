<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2158" status="New">
<title>Conditional copy&#47;move in <tt>std::vector</tt></title>
<section><sref ref="[vector.capacity]"/></section>
<submitter>Nikolay Ivchenkov</submitter>
<date>8 May 2012</date>
<priority>2</priority>

<discussion>

<p>
There are various operations on <tt>std::vector</tt> that can cause elements of the vector to be 
moved from one location to another. A move operation can use either rvalue or const lvalue as 
argument; the choice depends on the value of <tt>!is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp;
is_copy_constructible&lt;T&gt;::value</tt>, where <tt>T</tt> is the element type. Thus, some operations 
on <tt>std::vector</tt> (e.g. 'resize' with single parameter, 'reserve', 'emplace_back') should have 
conditional requirements. For example, let's consider the requirement for 'reserve' in N3376 &ndash; 
<sref ref="[vector.capacity]"/>&#47;2:
</p>
<blockquote><p>
<i>Requires</i>: <tt>T</tt> shall be <tt>MoveInsertable</tt> into <tt>*this</tt>.
</p></blockquote>
<p>
This requirement is not sufficient if an implementation is free to select copy constructor when 
<tt>!is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp; is_copy_constructible&lt;T&gt;::value</tt> 
evaluates to true. Unfortunately, <tt>is_copy_constructible</tt> cannot reliably determine whether 
<tt>T</tt> is really copy-constructible. A class may contain public non-deleted copy constructor whose 
definition does not exist or cannot be instantiated successfully (e.g., 
<tt>std::vector&lt;std::unique_ptr&lt;int&gt;&gt;</tt> has copy constructor, but this type is not 
copy-constructible). Thus, the actual requirements should be:
</p>
<ul>
<li><p>
if <tt>!is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp; is_copy_constructible&lt;T&gt;::value</tt> 
then <tt>T</tt> shall be <tt>CopyInsertable</tt> into <tt>*this</tt>;
</p></li>
<li><p>
otherwise <tt>T</tt> shall be <tt>MoveInsertable</tt> into <tt>*this</tt>.
</p></li>
</ul>
<p>
Maybe it would be useful to introduce a new name for such conditional requirement (in addition to 
"<tt>CopyInsertable</tt>" and "<tt>MoveInsertable</tt>").
</p>


<note>2016-08 Chicago</note>
<p>
The problem does not appear to be as severe as described.  The MoveInsertable requirements
are consistently correct, but an issue may arise on the exception-safety guarantees when we
check for <tt>is_copy_constructible_v&lt;T&gt;</tt>.  The problem, as described, is typically
for templates that appear to have a copy constructor, but one that fails to compile once
instantiated, and so gives a misleading result for the trait.
</p>
<p>
In general, users should not provide such types, and the standard would not serve users well
by trying to address support for such types.  However, the standard should not be providing
such types either, such as <tt>vector&lt;unique_ptr&lt;T&gt;&gt;.  A possible resolution
would be to tighten the constraints in Table 80 - Container Requirements, so that if the
Requirements for the copy constructor/assingment operator of a container are not satisfied,
that operation shall be deleted.
</p>
<p>
A futher problem highlighted by this approach is that there are no constraints on the
copy-assignment operator, so that <tt>vector&lt;unique_ptr&lt;T&gt;&gt; should be CopyAssignable!
However, we can lift the equivalent constraints from the Allocator-aware container requirements.
</p>

</discussion>

<resolution>

<sref ref="[container.requirements.general]"/> Table 80 - Container requirements


<tr>
  <td>Expression</td>
  <td>Return type</td>
  <td>Operational semantics</td>
  <td>Assertion/note/pre-/post-condition</td>
  <td>Complexity</td>
</tr>
<tr>
  <td>X(a)</td>
  <td></td>
  <td></td>
  <td>
    <i>Requires:</i> <tt>T</tt> is <tt>CopyInsertable</tt> into
    <tt>X</tt> (see below)<del>.</del><ins>, otherwise this constructor shall
    be deleted.</ins><br/>
    post: <tt>a == X(a)</tt>.
  </td>
  <td>linear</td>
</tr>
<tr>
  <td><tt>X u(a)</tt><br/><tt>X u = a;</tt></td>
  <td></td>
  <td></td>
  <td>
    <i>Requires:</i> <tt>T</tt> is <tt>CopyInsertable</tt> into
    <tt>X</tt> (see below)<del>.</del><ins>, otherwise this constructor shall
    be deleted.</ins><br/>
    post: <tt>u == a</tt>.
  </td>
  <td>linear</td>
</tr>
<tr>
  <td>...</td>
  <td>...</td>
  <td>...</td>
  <td>...</td>
  <td>...</td>
</tr>
<tr>
  <td><tt>r = a</tt></td>
  <td><tt>X&amp;</tt></td>
  <td></td>
  <td>
    <ins><i>Requires:</i> <tt>T</tt> is <tt>CopyInsertable</tt> into <tt>X</tt>
    and <tt>CopyAssignable</tt>, otherwise this operator shall be deleted.</ins><br/>
    post: <tt>r == a</tt>.</td>
  <td>linear</td>
</tr>




<tr>
  <td>Expression</td>
  <td>Return type</td>
  <td>Operational semantics</td>
  <td>Assertion/note/pre-/post-condition</td>
  <td>Complexity</td>
</tr>
<tr>
  <td><tt>a = t</tt></td>
  <td><tt>X&amp;</tt></td>
  <td></td>
  <td>
    <i>Requires:</i> <tt>T</tt> is <tt>CopyInsertable</tt> into <tt>X</tt> and
    <tt>CopyAssignable</tt><del>.</del><ins>, otherwise this operator shall be
    deleted.</ins><br/>
    post: <tt>r == a</tt>.</td>
  <td>linear</td>
</tr>


</resolution>

</issue>
