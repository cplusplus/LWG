<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2158" status="Open">
<title>Conditional copy&#47;move in <tt>std::vector</tt></title>
<section><sref ref="[vector.capacity]"/></section>
<submitter>Nikolay Ivchenkov</submitter>
<date>8 May 2012</date>
<priority>3</priority>

<discussion>

<p>
There are various operations on <tt>std::vector</tt> that can cause elements of the vector to be
moved from one location to another. A move operation can use either rvalue or const lvalue as
argument; the choice depends on the value of <tt>!is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp;
is_copy_constructible&lt;T&gt;::value</tt>, where <tt>T</tt> is the element type. Thus, some operations
on <tt>std::vector</tt> (e.g. 'resize' with single parameter, 'reserve', 'emplace_back') should have
conditional requirements. For example, let's consider the requirement for 'reserve' in N3376 &ndash;
<sref ref="[vector.capacity]"/>&#47;2:
</p>
<blockquote><p>
<i>Requires</i>: <tt>T</tt> shall be <tt>MoveInsertable</tt> into <tt>*this</tt>.
</p></blockquote>
<p>
This requirement is not sufficient if an implementation is free to select copy constructor when
<tt>!is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp; is_copy_constructible&lt;T&gt;::value</tt>
evaluates to true. Unfortunately, <tt>is_copy_constructible</tt> cannot reliably determine whether
<tt>T</tt> is really copy-constructible. A class may contain public non-deleted copy constructor whose
definition does not exist or cannot be instantiated successfully (e.g.,
<tt>std::vector&lt;std::unique_ptr&lt;int&gt;&gt;</tt> has copy constructor, but this type is not
copy-constructible). Thus, the actual requirements should be:
</p>
<ul>
<li><p>
if <tt>!is_nothrow_move_constructible&lt;T&gt;::value &amp;&amp; is_copy_constructible&lt;T&gt;::value</tt>
then <tt>T</tt> shall be <tt>CopyInsertable</tt> into <tt>*this</tt>;
</p></li>
<li><p>
otherwise <tt>T</tt> shall be <tt>MoveInsertable</tt> into <tt>*this</tt>.
</p></li>
</ul>
<p>
Maybe it would be useful to introduce a new name for such conditional requirement (in addition to
"<tt>CopyInsertable</tt>" and "<tt>MoveInsertable</tt>").
</p>

<note>2016-08 Chicago</note>
<p>
The problem does not appear to be as severe as described. The <tt>MoveInsertable</tt>
requirements are consistently correct, but an issue may arise on the
exception-safety guarantees when we check for
<tt>is_copy_constructible_v&lt;T&gt;</tt>.  The problem, as described, is
typically for templates that appear to have a copy constructor, but one that
fails to compile once instantiated, and so gives a misleading result for the
trait.
</p>
<p>
In general, users should not provide such types, and the standard would not
serve users well by trying to address support for such types.  However, the
standard should not be providing such types either, such as
<tt>vector&lt;unique_ptr&lt;T&gt;&gt;</tt>.  A possible resolution would be
to tighten the constraints in Table 80 &mdash; Container Requirements, so that if
the Requirements for the copy constructor/assingment operator of a container
are not satisfied, that operation shall be deleted.
</p>
<p>
A futher problem highlighted by this approach is that there are no constraints on
the copy-assignment operator, so that <tt>vector&lt;unique_ptr&lt;T&gt;&gt;</tt>
should be <tt>CopyAssignable</tt>! However, we can lift the equivalent constraints from
the Allocator-aware container requirements.
</p>

<note>08-2016, Chicago</note>
<p>Fri PM: Move to Open</p>

<note>2017-11 Albuquerque Saturday issues processing</note>
<p>There's a bunch of uses of "shall" here that are incorrect. Also, CopyInsertable contains some semantic requirements,
which can't be checked at compile time, so 'ill-formed' is not possible for detecting that.</p>

<note>2018-06 Rapperswil Wednesday issues processing</note>
<p>Daniel to provide updated wording.</p>

<note>2018-06-12, Daniel provides revised wording</note>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="http://wg21.link/n4606">N4606</a>.
</p>

<p>
<table border="1">
<caption> <sref ref="[container.requirements.general]"/> Table 80 &mdash; Container requirements </caption>
<tr>
  <td><b>Expression</b></td>
  <td><b>Return type</b></td>
  <td><b>Operational semantics</b></td>
  <td><b>Assertion/note/pre-/post-condition</b></td>
  <td><b>Complexity</b></td>
</tr>
<tr>
  <td><tt>X(a)</tt></td>
  <td></td>
  <td></td>
  <td>
    <i>Requires:</i> <tt>T</tt> is <tt>CopyInsertable</tt> into
    <tt>X</tt> (see below)<del>.</del><ins>, otherwise this expression shall be ill-formed.</ins><br/>
    post: <tt>a == X(a)</tt>.
  </td>
  <td>linear</td>
</tr>
<tr>
  <td><tt>X u(a)</tt><br/><tt>X u = a;</tt></td>
  <td></td>
  <td></td>
  <td>
    <i>Requires:</i> <tt>T</tt> is <tt>CopyInsertable</tt> into
    <tt>X</tt> (see below)<del>.</del><ins>, otherwise this expression shall be ill-formed.</ins><br/>
    post: <tt>u == a</tt>.
  </td>
  <td>linear</td>
</tr>
<tr>
  <td>...</td>
  <td>...</td>
  <td>...</td>
  <td>...</td>
  <td>...</td>
</tr>
<tr>
  <td><tt>r = a</tt></td>
  <td><tt>X&amp;</tt></td>
  <td></td>
  <td>
    <ins><i>Requires:</i> <tt>T</tt> is <tt>CopyInsertable</tt> into <tt>X</tt>
    and <tt>CopyAssignable</tt>, otherwise this expression shall be ill-formed.</ins><br/>
    post: <tt>r == a</tt>.</td>
  <td>linear</td>
</tr>
</table>
</p>

<p>
<table border="1">
<caption> <sref ref="[container.requirements.general]"/> Table 83 &mdash; Allocator-aware container requirements </caption>
<tr>
  <td><b>Expression</b></td>
  <td><b>Return type</b></td>
  <td><b>Operational semantics</b></td>
  <td><b>Assertion/note/pre-/post-condition</b></td>
  <td><b>Complexity</b></td>
</tr>
<tr>
  <td><tt>a = t</tt></td>
  <td><tt>X&amp;</tt></td>
  <td></td>
  <td>
    <i>Requires:</i> <tt>T</tt> is <tt>CopyInsertable</tt> into <tt>X</tt> and
    <tt>CopyAssignable</tt><del>.</del><ins>, otherwise this  expression shall
    be ill-formed</ins><br/>
    post: <tt>r == a</tt>.</td>
  <td>linear</td>
</tr>
</table>
</p>
</blockquote>

<note>2018-08-23 Batavia Issues processing. Priority to 3</note>
<p>Changed <tt>CopyInsertable</tt> -> <tt>Cpp17CopyInsertable</tt> in the resolution.</p>
<p>Tim says that the wording is not quite right - it imposes additional requirements.</p>

<note>20180906 Casey rebases the P/R onto N4762</note>
<p>Tim clarifies his concerns: <tt><i>Cpp17CopyMeowable</i></tt> requires all
mixes of constness and value categories to work, even though a typical
implementation only makes use of one combination for these operations. Adding a
"<i>Mandates:</i>" therefore goes beyond codifying existing practice and
requires implementations to actively check all combinations.</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="http://wg21.link/n4750">N4750</a>.
</p>

<blockquote class="note">
<p>
The revised wording below uses the new <i>Mandates:</i> element introduced by
adopting <a href="http://wg21.link/p0788r3">P0788R3</a> at the Rapperswil meeting 2018
and which will become a new term of art with Jonathan's omnibus paper throughout the
Standard Library.
</p>
</blockquote>

<p>
<table border="1">
<caption> <sref ref="[container.requirements.general]"/> Table 77 &mdash; Container requirements </caption>
<tr>
  <td><b>Expression</b></td>
  <td><b>Return type</b></td>
  <td><b>Operational semantics</b></td>
  <td><b>Assertion/note/pre-/post-condition</b></td>
  <td><b>Complexity</b></td>
</tr>
<tr>
  <td><tt>X(a)</tt></td>
  <td></td>
  <td></td>
  <td>
    <ins><i>Mandates:</i> Syntactic requirements of <tt>T</tt><br/>
    is <tt>Cpp17CopyInsertable</tt> into <tt>X</tt> (see below).</ins><br/>
    <i>Requires:</i> <tt>T</tt> is <tt>Cpp17CopyInsertable</tt> into
    <tt>X</tt> <del>(see below)</del>.<br/>
    post: <tt>a == X(a)</tt>.
  </td>
  <td>linear</td>
</tr>
<tr>
  <td><tt>X u(a)</tt><br/><tt>X u = a;</tt></td>
  <td></td>
  <td></td>
  <td>
    <ins><i>Mandates:</i> Syntactic requirements of <tt>T</tt><br/>
    is <tt>Cpp17CopyInsertable</tt> into <tt>X</tt> (see below).</ins><br/>
    <i>Requires:</i> <tt>T</tt> is <tt>Cpp17CopyInsertable</tt> into
    <tt>X</tt> <del>(see below)</del>.<br/>
    post: <tt>u == a</tt>.
  </td>
  <td>linear</td>
</tr>
<tr>
  <td>...</td>
  <td>...</td>
  <td>...</td>
  <td>...</td>
  <td>...</td>
</tr>
<tr>
  <td><tt>r = a</tt></td>
  <td><tt>X&amp;</tt></td>
  <td></td>
  <td>
    <ins><i>Mandates:</i> Syntactic requirements of <tt>T</tt><br/>
    is <tt>Cpp17CopyInsertable</tt> into <tt>X</tt> (see below) and
    <tt>CopyAssignable</tt>.<br/></ins>
    <ins><i>Requires:</i> <tt>T</tt> is <tt>Cpp17CopyInsertable</tt> into <tt>X</tt>
    and <tt>CopyAssignable</tt>.</ins><br/>
    post: <tt>r == a</tt>.</td>
  <td>linear</td>
</tr>
</table>
</p>

<p>
<table border="1">
<caption> <sref ref="[container.requirements.general]"/> Table 80 &mdash; Allocator-aware container requirements </caption>
<tr>
  <td><b>Expression</b></td>
  <td><b>Return type</b></td>
  <td><b>Operational semantics</b></td>
  <td><b>Assertion/note/pre-/post-condition</b></td>
  <td><b>Complexity</b></td>
</tr>
<tr>
  <td><tt>a = t</tt></td>
  <td><tt>X&amp;</tt></td>
  <td></td>
  <td>
    <ins><i>Mandates:</i> Syntactic requirements of <tt>T</tt> is<br/>
    <tt>Cpp17CopyInsertable</tt> into <tt>X</tt> and <tt>CopyAssignable</tt>.<br/></ins>
    <i>Requires:</i> <tt>T</tt> is <tt>Cpp17CopyInsertable</tt> into <tt>X</tt> and
    <tt>CopyAssignable</tt>.<br/>
    post: <tt>r == a</tt>.</td>
  <td>linear</td>
</tr>
</table>
</p>
</blockquote>

</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4762">N4762</a>.
</p>

<p>
<table border="1">
<caption><sref ref="[container.requirements.general]"/> Table 64 &mdash; Container requirements</caption>
<tr>
  <td><b>Expression</b></td>
  <td><b>Return type</b></td>
  <td><b>Operational semantics</b></td>
  <td><b>Assertion/note/pre-/post-condition</b></td>
  <td><b>Complexity</b></td>
</tr>
<tr>
  <td><tt>X(a)</tt></td>
  <td></td>
  <td></td>
  <td>
    <ins><i>Mandates:</i> Syntactic requirements of "<tt>T</tt><br/>
    is <tt><i>Cpp17CopyInsertable</i></tt> into <tt>X</tt>" (see below).</ins><br/>
    <i>Requires:</i> <tt>T</tt> is <tt><i>Cpp17CopyInsertable</i></tt> into
    <tt>X</tt> <del>(see below)</del>.<br/>
    <i>Ensures:</i> <tt>a == X(a)</tt>.
  </td>
  <td>linear</td>
</tr>
<tr>
  <td><tt>X u(a)</tt><br/><tt>X u = a;</tt></td>
  <td></td>
  <td></td>
  <td>
    <ins><i>Mandates:</i> Syntactic requirements of "<tt>T</tt><br/>
    is <tt><i>Cpp17CopyInsertable</i></tt> into <tt>X</tt>" (see below).</ins><br/>
    <i>Requires:</i> <tt>T</tt> is <tt><i>Cpp17CopyInsertable</i></tt> into
    <tt>X</tt> <del>(see below)</del>.<br/>
    <i>Ensures:</i> <tt>u == a</tt>.
  </td>
  <td>linear</td>
</tr>
<tr>
  <td>[&hellip;]</td>
  <td>[&hellip;]</td>
  <td>[&hellip;]</td>
  <td>[&hellip;]</td>
  <td>[&hellip;]</td>
</tr>
<tr>
  <td><tt>r = a</tt></td>
  <td><tt>X&amp;</tt></td>
  <td></td>
  <td>
    <ins><i>Mandates:</i> Syntactic requirements of "<tt>T</tt><br/>
    is <tt><i>Cpp17CopyInsertable</i></tt> into <tt>X</tt>" (see below) and
    <tt><i>Cpp17CopyAssignable</i></tt>.<br/></ins>
    <ins><i>Requires:</i> <tt>T</tt> is <tt><i>Cpp17CopyInsertable</i></tt> into <tt>X</tt>
    and <tt><i>Cpp17CopyAssignable</i></tt>.</ins><br/>
    <i>Ensures:</i> <tt>r == a</tt>.</td>
  <td>linear</td>
</tr>
</table>
</p>

<p>
<table border="1">
<caption><sref ref="[container.requirements.general]"/> Table 67 &mdash; Allocator-aware container requirements</caption>
<tr>
  <td><b>Expression</b></td>
  <td><b>Return type</b></td>
  <td><b>Operational semantics</b></td>
  <td><b>Assertion/note/pre-/post-condition</b></td>
  <td><b>Complexity</b></td>
</tr>
<tr>
  <td><tt>a = t</tt></td>
  <td><tt>X&amp;</tt></td>
  <td></td>
  <td>
    <ins><i>Mandates:</i> Syntactic requirements of "<tt>T</tt> is<br/>
    <tt><i>Cpp17CopyInsertable</i></tt> into <tt>X</tt>" and <tt><i>Cpp17CopyAssignable</i></tt>.<br/></ins>
    <i>Requires:</i> <tt>T</tt> is <tt><i>Cpp17CopyInsertable</i></tt> into <tt>X</tt> and
    <tt><i>Cpp17CopyAssignable</i></tt>.<br/>
    <i>Ensures:</i> <tt>a == t</tt>.</td>
  <td>linear</td>
</tr>
</table>
</p>

</resolution>

</issue>
