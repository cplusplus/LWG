<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2188" status="New">
<title>Reverse iterator does not fully support targets that overload <tt>operator&amp;</tt></title>
<section><sref ref="[reverse.iter.opref]"/></section>
<submitter>Alisdair Meredith</submitter>
<date>23 Sep 2012</date>

<discussion>
<p>
The specification for <tt>reverse_iterator::operator-></tt>
returns the address of the object yielded by dereferencing
with <tt>operatator*</tt>, but does not have the usual
wording about returning the true address of the object.  As
<tt>reverse_iterator</tt> requires the adapted iterator have
at least the bidirectional iterator category, we know that
the returned reference is a true reference, and not a proxy,
hence we can use <tt>std::addressof</tt> on the reference
to get the right answer.
</p>
<p>
This will most likely show itself as an issue with a <tt>list</tt>
or <tt>vector</tt> of a type with such an overloaded operator,
where algorithms are likely to work with a forward iteration, but
not with reverse iteration.
</p>
</discussion>

<resolution>
<p>
Revise <sref ref="[reverse.iter.opref]"/> p1, as indicated:
</p>
<p>
<i>Returns:</i> <ins>The true address of the object returned by </ins>
<tt><del>&amp;(</del>operator*()<del>)</del></tt>.
</p>
</resolution>

</issue>
