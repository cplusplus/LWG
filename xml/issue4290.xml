<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4290" status="New">
<title>Missing <i>Mandates</i> clauses on `is_sufficiently_aligned`</title>
<section>
<sref ref="[ptr.align]"/>
</section>
<submitter>Damien Lebrun-Grandie</submitter>
<date>03 Jul 2025</date>
<priority>2</priority>

<discussion>
<p>
`is_sufficiently_aligned` should mandate that the alignment template argument is a power of two 
and that it is greater equal to the byte alignment of its type template argument.
<p/>
In <sref ref="[ptr.align]"/> `is_sufficiently_aligned` has no <i>Mandates</i> element. It is an 
oversight that we realized when implementing <paper num="P2897R7"/> into libc++ 
(in <a href="https://github.com/llvm/llvm-project/pull/122603">https://github.com/llvm/llvm-project/pull/122603</a>). 
The function template was originally proposed as a static member function of the `aligned_accessor` 
class template which has these two <i>Mandates</i> clauses and therefore applied 
(see <sref ref="[mdspan.accessor.aligned.overview]"/> p1). It revision <paper num="P2897R4"/>, 
`is_sufficiently_aligned` was moved out the class template definition to become the free function
 memory helper that was voted into C++26 but the <i>Mandates</i> were lost in the process.
<p/>
We propose to correct that oversight and reintroduce the following <i>Mandates</i> clauses right above 
<sref ref="[ptr.align]"/> p10.
</p>

<note>2025-10-23; Reflector poll.</note>
<p>
Set priority to 2 after reflector poll.
</p>
<p>
The <i>Mandates</i> of <tt>Alignment &gt;= alignof(T)</tt> was put into
question, as being too restrictive for general purpose free function.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5008"/>.
</p>

<ol>

<li><p>Modify <sref ref="[ptr.align]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;size_t Alignment, class T&gt;
  bool is_sufficiently_aligned(T* ptr);
</pre>
<blockquote>
<p>
<ins>-?- <i>Mandates</i>:</ins>
</p>
<ol style="list-style-type: none">
<li><p><ins>(?.1) &mdash; `Alignment` is a power of two, and</ins></p></li>
<li><p><ins>(?.2) &mdash; <tt>Alignment &gt;= alignof(T)</tt> is `true`.</ins></p></li>
</ol>
<p>
-10- <i>Preconditions</i>: `p` points to an object `X` of a type similar 
(<sref ref="[conv.qual]"/>) to `T`.
<p/>
-11- <i>Returns</i>: `true` if `X` has alignment at least `Alignment`, otherwise `false`.
<p/>
-12- <i>Throws</i>: Nothing.
</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
