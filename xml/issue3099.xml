<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3099" status="Open">
<title><tt>is_assignable&lt;Incomplete&amp;, Incomplete&amp;&gt;</tt></title>
<section><sref ref="[meta.type.synop]"/></section>
<submitter>Casey Carter</submitter>
<date>10 Apr 2018</date>
<priority>2</priority>

<discussion>
<p>
LWG <iref ref="2939"/> suggests that the the preconditions of the type traits need reevaluation.
This issue focuses specifically on <tt>is_assignable</tt> and, by extension, its variants:
<ul>
<li><tt>is_copy_assignable&lt;T&gt;</tt>, equivalent to <tt>is_assignable&lt;T&amp;, const T&amp;&gt;</tt>,
</li>
<li><tt>is_move_assignable&lt;T&gt;</tt>, equivalent to <tt>is_assignable&lt;T&amp;, T&gt;</tt>,
</li>
<li><tt>is_trivially_assignable&lt;T, U&gt;</tt>, equivalent to <tt>is_assignable&lt;T, U&gt; &amp;&amp;
  /* magic */</tt>,
</li>
<li><tt>is_trivially_copy_assignable&lt;T&gt;</tt>, equivalent to <tt>is_assignable&lt;T&amp;, const T&amp;&gt; &amp;&amp;
  /* magic */</tt>,
</li>
<li><tt>is_trivially_move_assignable&lt;T&gt;</tt>, equivalent to <tt>is_assignable&lt;T&amp;, T&gt; &amp;&amp;
  /* magic */</tt>,
</li>
<li><tt>is_nothrow_assignable&lt;T, U&gt;</tt>, equivalent to <tt>is_assignable&lt;T, U&gt; &amp;&amp;
    noexcept(declval&lt;T&gt;() = declval&lt;U&gt;())</tt>,
</li>
<li><tt>is_nothrow_copy_assignable&lt;T&gt;</tt>, equivalent to <tt>is_assignable&lt;T&amp;, const T&amp;&gt; &amp;&amp;
    noexcept(declval&lt;T&amp;&gt;() = declval&lt;const T&amp;&gt;())</tt>,
</li>
<li><tt>is_nothrow_move_assignable&lt;T&gt;</tt>, equivalent to <tt>is_assignable&lt;T&amp;, T&gt; &amp;&amp;
    noexcept(declval&lt;T&amp;&gt;() = declval&lt;T&gt;())</tt>, and
</li>
</ul>
</p>
<p>
We note a discrepancy: <tt>is_copy_assignable&lt;T&gt;</tt> requires <tt>T</tt> to be a complete type, but the
equivalent form <tt>is_assignable&lt;T&amp;, const T&amp;&gt;</tt> <em>does not</em>. The requirement for
<tt>is_copy_assignable&lt;T&gt;</tt> seems sensible, since there's no way to determine whether or not the assignment
<tt>declval&lt;T&amp;&gt;() = declval&lt;const T&amp;&gt;()</tt> is well-formed when <tt>T</tt> is incomplete.
It seems that the same argument should apply to all of the above "assignable" traits, and that they must require that
the referent type is complete when given a reference type parameter to be implementable.
</p>

<note>2018-08 Batavia Monday issue discussion</note>
<p>Issues <iref ref="2797"/>, <iref ref="2939"/>, <iref ref="3022"/>, and <iref ref="3099"/> are all closely related. Walter to write a paper resolving them.</p>

<note>2020-02-14, Prague</note>
<p>
LWG discussions. Set priority to 2.
</p>

<note>2023-06-12; Varna</note>
<p> 
<paper num="P1285R0"/> is related to this issue.
</p>
<superseded>
<p>This wording is relative to <a href="https://wg21.link/n4741">N4741</a>.</p>
<blockquote>
<ol>
<li>In <sref ref="[meta.unary.prop]"/> Table 42, change the Precondition text for <tt>is_assignable</tt>,
<tt>is_trivially_assignable</tt>, and <tt>is_nothrow_assignable</tt> as follows:
<blockquote>
<ins><tt>remove_cvref_t&lt;</tt></ins><tt>T</tt><ins><tt>&gt;</tt></ins> and
<ins><tt>remove_cvref_t&lt;</tt></ins><tt>U</tt><ins><tt>&gt;</tt></ins> shall be complete types, <del><i>cv</i></del>
<tt>void</tt>, or arrays of unknown bound.
</blockquote>
</li>

<li>In <sref ref="[meta.unary.prop]"/> Table 42, change the Precondition text for <tt>is_copy_assignable</tt>,
<tt>is_move_assignable</tt>, <tt>is_trivially_copy_assignable</tt>, <tt>is_trivially_move_assignable</tt>,
<tt>is_nothrow_copy_assignable</tt>, and <tt>is_nothrow_move_assignable</tt> as follows:
<blockquote>
<ins><tt>remove_cvref_t&lt;</tt></ins><tt>T</tt><ins><tt>&gt;</tt></ins> shall be a complete type, <del><i>cv</i></del>
<tt>void</tt>, or an array of unknown bound.
</blockquote>
</li>
</ol>
</blockquote>
</superseded>

<note>2024-08-21; Jonathan provides improved wording</note>
<p>
During LWG telecon review Tomasz pointed out that we don't always require
a complete type for the right operand of an assignment.  Given
<code>T::operator=(U&amp;)</code>
we should be able to give a correct answer for
<code>is_assignable&lt;T&amp;, U&amp;&gt;</code>
whether of not `U` is complete.
This also affects e.g. <code>is_constructible&lt;T, U&amp;&gt;</code>
if <code>T::T(U&amp;)</code> exists.
</p>
<p>
So for the examples above,
<code>remove_cvref_t&lt;U&gt;</code>
is not needed to give a correct answer.
However, if <code>T::operator=(U&amp;)</code> does not exist,
then we do need `U` to be complete so we can tell if there is
an implicit conversion sequence to `T` or another type that can be
assigned to `T`.
We do not know how to solve this problem, and it's broader than just
`is_assignable`.
It was suggested to make an incremental improvement to `is_assignable`
and open a new issue for the broader issue.
</p>
<note>2025-10-24; Resolves <a href="https://github.com/cplusplus/nbballot/issues/726">RU-147</a></note>
</discussion>

<resolution>
<p>This wording is relative to <paper num="N4988"/>.</p>
<blockquote>
<ol>
<li>In <sref ref="[meta.unary.prop]"/> Table 51, change the Precondition text for <tt>is_assignable</tt>,
<tt>is_trivially_assignable</tt>, and <tt>is_nothrow_assignable</tt> as follows:
<blockquote>
<ins><tt>remove_cvref_t&lt;</tt></ins><tt>T</tt><ins><tt>&gt;</tt></ins> and
<tt>U</tt> shall be complete types, <i>cv</i> <tt>void</tt>, or arrays of unknown bound.
</blockquote>
</li>

<li>In <sref ref="[meta.unary.prop]"/> Table 51, change the Precondition text for <tt>is_copy_assignable</tt>,
<tt>is_move_assignable</tt>, <tt>is_trivially_copy_assignable</tt>, <tt>is_trivially_move_assignable</tt>,
<tt>is_nothrow_copy_assignable</tt>, and <tt>is_nothrow_move_assignable</tt> as follows:
<blockquote>
<ins><tt>remove_cvref_t&lt;</tt></ins><tt>T</tt><ins><tt>&gt;</tt></ins> shall be a complete type, <del><i>cv</i></del>
<tt>void</tt>, or an array of unknown bound.
</blockquote>
</li>
</ol>
</blockquote>
</resolution>

</issue>
