<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="804" status="CD1">
<title>Some problems with classes <tt>error_code</tt>/<tt>error_condition</tt></title>
<section><sref ref="[syserr]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>24 Feb 2008</date>

<discussion>
<ol style="list-style-type:upper-alpha">
<li>
<p>
<sref ref="[syserr.errcode.overview]"/>/1, class <tt>error_code</tt> and
<sref ref="[syserr.errcondition.overview]"/>/, class <tt>error_condition</tt> synopses
declare an expository data member <tt>cat_</tt>:
</p>
<blockquote><pre>
const error_category&amp; cat_; // exposition only
</pre></blockquote>
<p>
which is used to define the semantics of several members. The decision
to use a member of reference type lead to several problems:
</p>
<ol>
<li>
The classes are not <tt>(Copy)Assignable</tt>, which is probably not the intent.
</li>
<li>
The post conditions of all modifiers from
<sref ref="[syserr.errcode.modifiers]"/> and <sref ref="[syserr.errcondition.modifiers]"/>, resp.,
cannot be fulfilled.
</li>
</ol>
<p>
The simple fix would be to replace the reference by a pointer member.
</p>
</li>

<li>
I would like to give the editorial remark that in both classes the
constrained <tt>operator=</tt>
overload (template with <tt>ErrorCodeEnum</tt> argument) makes in invalid
usage of <tt>std::enable_if</tt>: By using the default value for the second <tt>enable_if</tt>
parameter the return type would be defined to be <tt>void&amp;</tt> even in otherwise
valid circumstances - this return type must be explicitly provided (In
<tt>error_condition</tt> the first declaration uses an explicit value, but of wrong
type).
</li>

<li>
The member function <tt>message</tt> throws clauses (
<sref ref="[syserr.errcat.virtuals]"/>/10, <sref ref="[syserr.errcode.observers]"/>/8, and
<sref ref="[syserr.errcondition.observers]"/>/6) guarantee "throws nothing",
although
they return a <tt>std::string</tt> by value, which might throw in out-of-memory
conditions (see related issue <iref ref="771"/>).
</li>
</ol>

<note>
Sophia Antipolis:
</note>

<blockquote>
<p>
Part A: NAD (editorial), cleared by the resolution of issue <iref ref="832"/>.
</p>
<p>
Part B: Technically correct, save for typo. Rendered moot by the concept proposal 
(<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2620.html">N2620</a>) NAD (editorial).
</p>
<p>
Part C: We agree; this is consistent with the resolution of issue <iref ref="721"/>.
</p>
<p>
Howard: please ping Beman, asking him to clear away parts A and B from
the wording in the proposed resolution, so it is clear to the editor
what needs to be applied to the working paper.
</p>
<p>
Beman provided updated wording. Since issue <iref ref="832"/> is not going
forward, the provided wording includes resolution of part A.
</p>
</blockquote>

</discussion>

<resolution>

<p>
Resolution of part A:
</p>
<blockquote>
<p>
Change <sref ref="[syserr.errcode.overview]"/> Class error_code overview synopsis as indicated:
</p>

<blockquote><pre>
private:
  int val_;                    // exposition only
  const error_category<del>&amp;</del><ins>*</ins> cat_; // exposition only
</pre></blockquote>

<p>
Change <sref ref="[syserr.errcode.constructors]"/> Class error_code constructors as indicated:
</p>

<blockquote>
<pre>
error_code();
</pre>
<blockquote>
<p>
<i>Effects:</i> Constructs an object of type <tt>error_code</tt>.
</p>
<p>
<i>Postconditions:</i> <tt>val_ == 0</tt> and <tt>cat_ == <ins>&amp;</ins>system_category</tt>.
</p>
<p>
<i>Throws:</i> Nothing.
</p>
</blockquote>
<pre>
error_code(int val, const error_category&amp; cat);
</pre>
<blockquote>
<p>
<i>Effects:</i> Constructs an object of type <tt>error_code</tt>.
</p>
<p>
<i>Postconditions:</i> <tt>val_ == val</tt> and <tt>cat_ == <ins>&amp;</ins>cat</tt>.
</p>
<p>
<i>Throws:</i> Nothing.
</p>
</blockquote>
</blockquote>

<p>
Change <sref ref="[syserr.errcode.modifiers]"/> Class error_code modifiers as indicated:
</p>

<blockquote>
<pre>
void assign(int val, const error_category&amp; cat);
</pre>
<blockquote>
<p>
<i>Postconditions:</i> <tt>val_ == val</tt> and <tt>cat_ == <ins>&amp;</ins>cat</tt>.
</p>
<p>
<i>Throws:</i> Nothing.
</p>
</blockquote>
</blockquote>

<p>
Change <sref ref="[syserr.errcode.observers]"/> Class error_code observers as indicated:
</p>

<blockquote><pre>
const error_category&amp; category() const;
</pre><blockquote>
<p>
<i>Returns:</i> <tt><ins>*</ins>cat_</tt>.
</p>
<p>
<i>Throws:</i> Nothing.
</p>
</blockquote>
</blockquote>

<p>
Change <sref ref="[syserr.errcondition.overview]"/> Class error_condition overview synopsis as indicated:
</p>

<blockquote><pre>
private:
  int val_;                    // exposition only
  const error_category<del>&amp;</del><ins>*</ins> cat_; // exposition only
</pre></blockquote>

<p>
Change <sref ref="[syserr.errcondition.constructors]"/> Class error_condition constructors as indicated:
</p>
<note>
(If the proposed resolution of issue <iref ref="805"/> has already been applied, the
name <tt>posix_category</tt> will have been changed to <tt>generic_category</tt>. That has
no effect on this resolution.)
</note>

<blockquote>
<pre>
error_condition();
</pre>
<blockquote>
<p>
<i>Effects:</i> Constructs an object of type <tt>error_condition</tt>.
</p>
<p>
<i>Postconditions:</i> <tt>val_ == 0</tt> and <tt>cat_ == <ins>&amp;</ins>posix_category</tt>.
</p>
<p>
<i>Throws:</i> Nothing.
</p>
</blockquote>
<pre>
error_condition(int val, const error_category&amp; cat);
</pre>
<blockquote>
<p>
<i>Effects:</i> Constructs an object of type <tt>error_condition</tt>.
</p>
<p>
<i>Postconditions:</i> <tt>val_ == val</tt> and <tt>cat_ == <ins>&amp;</ins>cat</tt>.
</p>
<p>
<i>Throws:</i> Nothing.
</p>
</blockquote>
</blockquote>

<p>
Change <sref ref="[syserr.errcondition.modifiers]"/> Class error_condition modifiers as indicated:
</p>

<blockquote><pre>
void assign(int val, const error_category&amp; cat);
</pre><blockquote>
<p>
<i>Postconditions:</i> <tt>val_ == val</tt> and <tt>cat_ == <ins>&amp;</ins>cat</tt>.
</p>
<p>
<i>Throws:</i> Nothing.
</p>
</blockquote>
</blockquote>

<p>
Change <sref ref="[syserr.errcondition.observers]"/> Class error_condition observers as indicated:
</p>

<blockquote><pre>
const error_category&amp; category() const;
</pre><blockquote>
<p>
<i>Returns:</i> <tt><ins>*</ins>cat_</tt>.
</p>
<p>
<i>Throws:</i> Nothing.
</p>
</blockquote>
</blockquote>
</blockquote>

<p>
Resolution of part C:
</p>

<blockquote>

<p>
In <sref ref="[syserr.errcat.virtuals]"/>, remove the throws clause p. 10.
</p>

<blockquote>
<pre>
virtual string message(int ev) const = 0;
</pre>

<blockquote>
<p>
<i>Returns:</i> A string that describes the error condition denoted by <tt>ev</tt>.
</p>
<p>
<del><i>Throws:</i> Nothing.</del>
</p>
</blockquote>
</blockquote>

<p>
In <sref ref="[syserr.errcode.observers]"/>, remove the throws clause p. 8.
</p>

<blockquote>
<pre>
string message() const;
</pre>
<blockquote>
<p>
<i>Returns:</i> <tt>category().message(value())</tt>.
</p>
<p>
<del><i>Throws:</i> Nothing.</del>
</p>
</blockquote>
</blockquote>

<p>
In <sref ref="[syserr.errcondition.observers]"/>, remove the throws clause p. 6.
</p>

<blockquote>
<pre>
string message() const;
</pre>
<blockquote>
<p>
<i>Returns:</i> <tt>category().message(value())</tt>.
</p>
<p>
<del><i>Throws:</i> Nothing.</del>
</p>
</blockquote>
</blockquote>

</blockquote>

</resolution>

</issue>
