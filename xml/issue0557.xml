<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="557" status="NAD Editorial">
<title>TR1: div(_Longlong, _Longlong) vs div(intmax_t, intmax_t)</title>
<section><sref ref="[cstdint.syn]"/><sref ref="[tr.c99.cstdint]"/></section>
<submitter>Paolo Carlini</submitter>
<date>6 Feb 2006</date>

<discussion>
<p>
I'm seeing a problem with such overloads: when, _Longlong == intmax_t ==
long long we end up, essentially, with the same arguments and different
return types (lldiv_t and imaxdiv_t, respectively). Similar issue with
abs(_Longlong) and abs(intmax_t), of course.
</p>
<p>
Comparing sections 8.25 and 8.11, I see an important difference,
however: 8.25.3 and 8.25.4 carefully describe div and abs for _Longlong
types (rightfully, because not moved over directly from C99), whereas
there is no equivalent in 8.11: the abs and div overloads for intmax_t
types appear only in the synopsis and are not described anywhere, in
particular no mention in 8.11.2 (at variance with 8.25.2).
</p>
<p>
I'm wondering whether we really, really, want div and abs for intmax_t...
</p>

</discussion>

<resolution>

</resolution>

<note>
Portland: no consensus.
</note>

<rationale>
<note>
Batavia, Bill: The <tt>&lt;cstdint&gt;</tt> synopsis in <sref ref="[tr.c99.cinttypes.syn]"/> contains:
</note>
<blockquote><pre>
intmax_t imaxabs(intmax_t i);
intmax_t abs(intmax_t i);

imaxdiv_t imaxdiv(intmax_t numer, intmax_t denom);
imaxdiv_t div(intmax_t numer, intmax_t denom);
</pre></blockquote>

<note>
and in <sref ref="[tr.c99.cinttypes.def]"/>:
</note>

<blockquote><p>
The header defines all functions, types, and macros the same as C99
subclause 7.8.
</p></blockquote>

<note>
This is as much definition as we give for most other C99 functions,
so nothing need change. We might, however, choose to add the footnote:
</note>

<blockquote><p>
[<i>Note:</i> These overloads for <tt>abs</tt> and <tt>div</tt> may well be equivalent to
those that take <tt>long long</tt> arguments. If so, the implementation is
responsible for avoiding conflicting declarations. -- <i>end note</i>]
</p></blockquote>

<note>
Bellevue: NAD Editorial. Pete must add a footnote, as described below.
</note>

<blockquote>
<note>
Looks like a real problem. Dietmar suggests div() return a template
type. Matt: looks like imaxdiv_t is loosly defined. Can it be a typedef
for lldiv_t when _Longlong == intmax_t? PJP seems to agree. We would
need a non-normative note declaring that the types lldiv_t and imaxdiv_t
may not be unique if intmax_t==_longlong.
</note>
</blockquote>

</rationale>

</issue>
