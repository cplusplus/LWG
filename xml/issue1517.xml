<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp "&#160;">
] >

<issue num="1517" status="C++11">
<title>default_delete's default constructor should be trivial</title>
<section><sref ref="[unique.ptr.dltr.dflt]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>12 Sep 2010</date>

<discussion>
<p>
The current working draft does specify the default c'tor of <tt>default_delete</tt> in a manner
to guarantee static initialization for default-constructed objects of static storage duration
as a consequence of the acceptance of the proposal <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2976.html">n2976</a>
but this paper overlooked the fact that the suggested declaration does not ensure that the type 
will be a trivial type. The type <tt>default_delete</tt> was always considered as a simple wrapper for 
calling <tt>delete</tt> or <tt>delete[]</tt>, respectivly and should be a trivial type.
</p>
<p>
In agreement with the new settled core language rules this easy to realize by just changing the declaration to
</p>
<blockquote><pre>
constexpr default_delete()<ins> = default</ins>;
</pre></blockquote>
<p>
This proposal also automatically solves the problem, that the semantics of the default constructor of the 
partial specialization <tt>default_delete&lt;T[]&gt;</tt> is not specified at all. By defaulting its default constructor 
as well, the semantics are well-defined.
</p>

<note>
Post-Rapperswil
</note>

<blockquote><p>
Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</p></blockquote>

<note>
Adopted at 2010-11 Batavia
</note>

</discussion>

<resolution>
<p><i>The following wording changes are against N3126.</i></p>

<ol>
<li>Change the synopsis of the primary template definition of <tt>default_delete</tt> in [unique.ptr.dltr.dflt] as indicated:
<blockquote><pre>
namespace std {
  template &lt;class T&gt; struct default_delete {
    constexpr default_delete()<ins> = default</ins>;
    template &lt;class U&gt; default_delete(const default_delete&lt;U&gt;&amp;);
    void operator()(T*) const;
  };
}
</pre></blockquote>
</li>
<li>
Remove the prototype specification of the <tt>default_delete</tt> default constructor in [unique.ptr.dltr.dflt]/1. This
brings it in harmony with the style used in the partial specialization <tt>default_delete&lt;T[]&gt;</tt>. Since there are
neither implied nor explicit members, there is no possibility to misinterpret what the constructor does:
<blockquote><pre>
<del>constexpr default_delete();</del>
</pre><blockquote><p>
<del>1 <em>Effects</em>: Default constructs a <tt>default_delete</tt> object.</del>
</p></blockquote></blockquote>
</li>
<li>Change the synopsis of the partial specialization of <tt>default_delete</tt> in [unique.ptr.dltr.dflt1] as indicated:
<blockquote><pre>
namespace std {
  template &lt;class T&gt; struct default_delete&lt;T[]&gt; {
    constexpr default_delete()<ins> = default</ins>;
    void operator()(T*) const;
    template &lt;class U&gt; void operator()(U*) const = delete;
  };
}</pre></blockquote>
</li>
</ol>
</resolution>

</issue>
