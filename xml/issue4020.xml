<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4020" status="Voting">
<title><tt>extents::<i>index-cast</i></tt> weirdness</title>
<section><sref ref="[mdspan.extents.expo]"/></section>
<submitter>Casey Carter</submitter>
<date>29 Nov 2023</date>
<priority>99</priority>

<discussion>
<p>
The exposition-only static member <tt><i>index-cast</i></tt> of <tt>extents</tt> is specified as 
(<sref ref="[mdspan.extents.expo]"/>/9):
</p>
<blockquote>
<pre>
template&lt;class OtherIndexType&gt;
static constexpr auto <i>index-cast</i>(OtherIndexType&amp;&amp; i) noexcept;
</pre>
<blockquote>
<p>
-9- <i>Effects</i>:
</p>
<ol style="list-style-type: none">
<li><p>(9.1) &mdash; If <tt>OtherIndexType</tt> is an integral type other than <tt>bool</tt>, then equivalent 
to <tt>return i;</tt>,</p></li>
<li><p>(9.2) &mdash; otherwise, equivalent to <tt>return static_cast&lt;index_type&gt;(i);</tt>.</p></li>
</ol>
<p>
[<i>Note 1</i>: This function will always return an integral type other than <tt>bool</tt>. Since this function's 
call sites are constrained on convertibility of <tt>OtherIndexType</tt> to <tt>index_type</tt>, integer-class types 
can use the <tt>static_cast</tt> branch without loss of precision. &mdash; <i>end note</i>]
</p>
</blockquote>
</blockquote>
<p>
This function returns <tt>T</tt> when passed an rvalue of <i>cv</i>-unqualified integral type <tt>T</tt>, 
but <tt>index_type</tt> when passed a <i>cv</i>-qualified and/or lvalue argument of any integral type. It 
would seem more consistent and easier to reason about if 9.1 was instead conditional on 
<tt>remove_cvref_t&lt;OtherIndexType&gt;</tt>.
</p>

<note>2025-10-17; Reflector poll.</note>
<p>
Set status to Tentatively Ready after eight votes in favour during reflector poll.
</p>
<p>
"Doesn't matter in this case, but logically `decay_t` seems like a better fit."
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4964"/>.
</p>

<ol>

<li><p>Modify <sref ref="[mdspan.extents.expo]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class OtherIndexType&gt;
  static constexpr auto <i>index-cast</i>(OtherIndexType&amp;&amp; i) noexcept;
</pre>
<blockquote>
<p>
-9- <i>Effects</i>:
</p>
<ol style="list-style-type: none">
<li><p>(9.1) &mdash; If <tt><ins>remove_cvref_t&lt;</ins>OtherIndexType<ins>&gt;</ins></tt> 
is an integral type other than <tt>bool</tt>, then equivalent to <tt>return i;</tt>,</p></li>
<li><p>(9.2) &mdash; otherwise, equivalent to <tt>return static_cast&lt;index_type&gt;(i);</tt>.</p></li>
</ol>
<p>
[<i>Note 1</i>: This function will always return an integral type other than <tt>bool</tt>. Since this function's 
call sites are constrained on convertibility of <tt>OtherIndexType</tt> to <tt>index_type</tt>, integer-class types 
can use the <tt>static_cast</tt> branch without loss of precision. &mdash; <i>end note</i>]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
