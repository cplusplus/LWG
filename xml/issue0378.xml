<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
  <!ENTITY nbsp " ">
]>

<issue num="378" status="Dup">
<title>locale immutability and locale::operator=()</title>
<section><sref ref="[locale]"/></section>
<submitter>Martin Sebor</submitter>
<date>6 Sep 2002</date>

<discussion>
<p>
I think there is a problem with 22.1.1, p6 which says that
</p>
<pre>
    -6- An instance of locale is immutable; once a facet reference
        is obtained from it, that reference remains usable as long
        as the locale value itself exists.
</pre>
<p>
and 22.1.1.2, p4:
</p>
<pre>
    const locale&amp; operator=(const locale&amp; other) throw();

    -4- Effects: Creates a copy of other, replacing the current value.
</pre>
<p>
How can a reference to a facet obtained from a locale object remain
valid after an assignment that clearly must replace all the facets
in the locale object? Imagine a program such as this
</p>
<pre>
    std::locale loc ("de_DE");
    const std::ctype&lt;char> &amp;r0 = std::use_facet&lt;std::ctype&lt;char> >(loc);
    loc = std::locale ("en_US");
    const std::ctype&lt;char> &amp;r1 = std::use_facet&lt;std::ctype&lt;char> >(loc);
</pre>
<p>
Is r0 really supposed to be preserved and destroyed only when loc goes
out of scope?
</p>
</discussion>

<resolution>
<note>Summer '04 mid-meeting mailing: Martin and Dietmar believe this
  is a duplicate of issue <iref ref="31"/> and recommend that it be
  closed.
</note>
<duplicate><iref ref="31"/></duplicate>
</resolution>
</issue>
