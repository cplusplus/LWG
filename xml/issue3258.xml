<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3258" status="Resolved">
<title>Range access and <tt>initializer_list</tt></title>
<section><sref ref="[range.access.begin]"/><sref ref="[range.access.end]"/>
<sref ref="[range.access.rbegin]"/><sref ref="[range.access.rend]"/></section>
<submitter>Casey Carter</submitter>
<date>15 Aug 2019</date>
<priority>3</priority>

<discussion>
<p>
The specification of <tt>ranges::begin</tt> in <sref ref="[range.access.begin]"/> includes a
"poison pill" overload:
<blockquote><pre>
template&lt;class T&gt; void begin(initializer_list&lt;T&gt;&amp;&amp;) = delete;
</pre></blockquote>
which exists to create an ambiguity with the non-member <tt>initializer_list</tt> overload of
<tt>begin</tt> in namespace <tt>std</tt> (<sref ref="[initializer.list.syn]"/>) when performing
unqualified lookup, since specializations of <tt>initializer_list</tt> should not satisfy
<tt><i>forwarding-range</i></tt> (<sref ref="[range.range]"/>). The design intent is that
<tt>const</tt> specializations of <tt>initializer_list</tt> should also not satisfy
<tt><i>forwarding-range</i></tt>, although they are rare enough beasts that they were overlooked
when this wording is written.
</p><p>
<tt>ranges::end</tt> (<sref ref="[range.access.end]"/>) has a similar poison pill for
<tt>initializer_list</tt>, which should be changed consistently.
</p><p>
Notably <tt>ranges::rbegin</tt> (<sref ref="[range.access.rbegin]"/>) and <tt>ranges::rend</tt>
(<sref ref="[range.access.rbegin]"/>) as currently specified <em>accept</em> rvalue
<tt>initializer_list</tt> arguments; they find the <tt>initializer_list</tt> overloads of
<tt>std::rbegin</tt> and <tt>std::rend</tt> (<sref ref="[iterator.range]"/>) via ADL. While I can't
put my finger on anything in particular that's broken by this behavior, it seems wise to make
<tt>rbegin</tt> and <tt>rend</tt> consistent with <tt>begin</tt> and <tt>end</tt> for
<tt>initializer_list</tt> until and unless we discover a reason to do otherwise.
</p>
<note>2019-10 Priority set to 3 after reflector discussion</note>
<note>2021-06-23 Resolved by adoption of <paper num="P2091R0"/> in Prague. Status changed: New &rarr; Resolved.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4830">N4830</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.access.begin]"/> as follows:</p>

<blockquote><p>
-1- The name <tt>ranges::begin</tt> denotes a customization point object (<sref
ref="[customization.point.object]"/>). The expression <tt>ranges::begin(E)</tt> for some
subexpression <tt>E</tt> is expression-equivalent to:
</p><p>
(1.1) &mdash; <tt>E + 0</tt> if <tt>E</tt> is an lvalue of array type (<sref ref="[basic.compound]"/>).
</p><p>
(1.2) &mdash; Otherwise, if <tt>E</tt> is an lvalue, <tt><i>decay-copy</i>(E.begin())</tt> if it
is a valid expression and its type <tt>I</tt> models <tt>input_or_output_iterator</tt>.
</p><p>
(1.3) &mdash; Otherwise, <tt><i>decay-copy</i>(begin(E))</tt> if it is a valid expression and its
type <tt>I</tt> models <tt>input_or_output_iterator</tt> with overload resolution performed in a
context that includes the declarations:
<blockquote><pre>
template&lt;class T&gt; void begin(T&amp;&amp;) = delete;
template&lt;class T&gt; void begin(initializer_list&lt;T&gt;<del>&amp;&amp;</del>) = delete;
</pre></blockquote>
and does not include a declaration of <tt>ranges::begin</tt>.
</p><p>
[&hellip;]
</p></blockquote>
</li>

<li><p>Modify <sref ref="[range.access.end]"/> as follows:</p>

<blockquote><p>
-1- The name <tt>ranges::end</tt> denotes a customization point object (<sref
ref="[customization.point.object]" />). The expression <tt>ranges::end(E)</tt> for some
subexpression <tt>E</tt> is expression-equivalent to:
</p><p>
(1.1) &mdash; <tt>E + extent_v&lt;T&gt;</tt> if <tt>E</tt> is an lvalue of array type (<sref
ref="[basic.compound]" />) <tt>T</tt>.
</p><p>
(1.2) &mdash; Otherwise, if <tt>E</tt> is an lvalue, <tt><i>decay-copy</i>(E.end())</tt> if it is a
valid expression and its type <tt>S</tt> models <tt>sentinel_for&lt;decltype(ranges::begin(E))&gt;</tt>
</p><p>
(1.3) &mdash; Otherwise, <tt><i>decay-copy</i>(end(E))</tt> if it is a valid expression and its type
<tt>S</tt> models <tt>sentinel_for&lt;decltype(ranges::begin(E))&gt;</tt> with overload resolution
performed in a context that includes the declarations:
<blockquote><pre>
template&lt;class T&gt; void end(T&amp;&amp;) = delete;
template&lt;class T&gt; void end(initializer_list&lt;T&gt;<del>&amp;&amp;</del>) = delete;
</pre></blockquote>
and does not include a declaration of <tt>ranges::end</tt>.
</p><p>
[&hellip;]
</p></blockquote>
</li>

<li><p>Modify <sref ref="[range.access.rbegin]"/> as follows:</p>

<blockquote><p>
-1- The name <tt>ranges::rbegin</tt> denotes a customization point object (<sref
ref="[customization.point.object]" />). The expression <tt>ranges::rbegin(E)</tt> for some
subexpression <tt>E</tt> is expression-equivalent to:
</p><p>
(1.1) &mdash; If <tt>E</tt> is an lvalue, <tt><i>decay-copy</i>(E.rbegin())</tt> if it is a valid
expression and its type <tt>I</tt> models <tt>input_or_output_iterator</tt>.
</p><p>
(1.2) &mdash; Otherwise, <tt><i>decay-copy</i>(rbegin(E))</tt> if it is a valid expression and its
type <tt>I</tt> models <tt>input_or_output_iterator</tt> with overload resolution performed in a
context that includes the declaration<ins>s</ins>:
<blockquote><pre>
template&lt;class T&gt; void rbegin(T&amp;&amp;) = delete;
<ins>template&lt;class T&gt; void rbegin(initializer_list&lt;T&gt;) = delete;</ins>
</pre></blockquote>
and does not include a declaration of <tt>ranges::rbegin</tt>.
</p><p>
[&hellip;]
</p></blockquote>
</li>

<li><p>Modify <sref ref="[range.access.rend]"/> as follows:</p>

<blockquote><p>
-1- The name <tt>ranges::rend</tt> denotes a customization point object (<sref
ref="[customization.point.object]" />). The expression <tt>ranges::rend(E)</tt> for some
subexpression <tt>E</tt> is expression-equivalent to:
</p><p>
(1.1) &mdash; If <tt>E</tt> is an lvalue, <tt><i>decay-copy</i>(E.rend())</tt> if it is a valid
expression and its type <tt>S</tt> models
<blockquote><pre>
sentinel_for&lt;decltype(ranges::rbegin(E))&gt;
</pre></blockquote>
</p><p>
(1.2) &mdash; Otherwise, <tt><i>decay-copy</i>(rend(E))</tt> if it is a valid expression and its
type <tt>S</tt> models
<blockquote><pre>
sentinel_for&lt;decltype(ranges::rbegin(E))&gt;
</pre></blockquote>
with overload resolution performed in a context that includes the declaration<ins>s</ins>:
<blockquote><pre>
template&lt;class T&gt; void rend(T&amp;&amp;) = delete;
<ins>template&lt;class T&gt; void rend(initializer_list&lt;T&gt;) = delete;</ins>
</pre></blockquote>
and does not include a declaration of <tt>ranges::rend</tt>.
</p><p>
[&hellip;]
</p></blockquote>
</li>
</ol>

</resolution>
</issue>
