<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3017" status="C++20">
<title><tt>list splice</tt> functions should use <tt>addressof</tt></title>
<section><sref ref="[forward.list.ops]"/><sref ref="[list.ops]"/></section>
<submitter>Jonathan Wakely</submitter>
<date>5 Sep 2017</date>
<priority>0</priority>

<discussion>
<p>
<sref ref="[forwardlist.ops]"/> p1 and <sref ref="[list.ops]"/> p3 say <tt>&amp;x != this</tt>, but should use
<tt>addressof</tt>. We really need front matter saying that when the library says <tt>&amp;x</tt> it means 
<tt>std::addressof(x)</tt>.
</p>

<note>
2017-11-03 Moved to Tentatively Ready after 9 positive votes for P0 on c++std-lib.
</note>
<note>2018-3-17 Adopted in Jacksonville</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4687">N4687</a>.</p>

<ol>
<li><p>Edit <sref ref="[forwardlist.ops]"/> p1 as indicated:</p>
<blockquote>
<pre>
void splice_after(const_iterator position, forward_list&amp; x);
void splice_after(const_iterator position, forward_list&amp;&amp; x);
</pre>
<blockquote>
<p>
-1- <i>Requires:</i> <tt>position</tt> is <tt>before_begin()</tt> or is a dereferenceable iterator in the range <tt>[begin(), 
end())</tt>. <tt>get_allocator() == x.get_allocator()</tt>. <tt><del>&amp;</del><ins>addressof(</ins>x<ins>)</ins> != this</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[list.ops]"/> p3 as indicated:</p>
<blockquote>
<pre>
void splice(const_iterator position, list&amp; x);
void splice(const_iterator position, list&amp;&amp; x);
</pre>
<blockquote>
<p>
-3- <i>Requires:</i> <tt><del>&amp;</del><ins>addressof(</ins>x<ins>)</ins> != this</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[list.ops]"/> p3 as indicated:</p>
<blockquote>
<pre>
template &lt;class Compare&gt; void merge(list&amp; x, Compare comp);
template &lt;class Compare&gt; void merge(list&amp;&amp; x, Compare comp);
</pre>
<blockquote>
<p>
-22- <i>Requires:</i> <tt>comp</tt> shall define a strict weak ordering (<sref ref="[alg.sorting]"/>), and both the list 
and the argument list shall be sorted according to this ordering.
<p/>
-23- <i>Effects:</i> If <tt>(<del>&amp;</del><ins>addressof(</ins>x<ins>)</ins> == this)</tt> does nothing; 
otherwise, merges the two sorted ranges <tt>[begin(), end())</tt> and <tt>[x.begin(), x.end())</tt>. The result 
is a range in which the elements will be sorted in non-decreasing order according to the ordering defined by 
<tt>comp</tt>; that is, for every iterator <tt>i</tt>, in the range other than the first, the condition 
<tt>comp(*i, *(i - 1))</tt> will be <tt>false</tt>. Pointers and references to the moved elements of <tt>x</tt> 
now refer to those same elements but as members of <tt>*this</tt>. Iterators referring to the moved elements 
will continue to refer to their elements, but they now behave as iterators into <tt>*this</tt>, not into <tt>x</tt>.
<p/>
-24- <i>Remarks:</i> Stable (<sref ref="[algorithm.stable]"/>). If 
<tt>(<del>&amp;</del><ins>addressof(</ins>x<ins>)</ins> != this)</tt> the range <tt>[x.begin(), x.end())</tt> is 
empty after the merge. No elements are copied by this operation. The behavior is undefined if <tt>get_allocator() !=
x.get_allocator()</tt>.
<p/>
-25- <i>Complexity:</i> At most <tt>size() + x.size() - 1</tt> applications of <tt>comp</tt> if 
<tt>(<del>&amp;</del><ins>addressof(</ins>x<ins>)</ins> != this)</tt>; otherwise, no applications of <tt>comp</tt> are 
performed. If an exception is thrown other than by a comparison there are no effects.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
