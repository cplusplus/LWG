<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
    <!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
        <!ENTITY nbsp " ">
     ]
>
<issue num="419" status="C++11">
    <title>istream extractors not setting <tt>failbit</tt> if <tt>eofbit</tt> is already set</title>
    <section><sref ref="[istream::sentry]"/></section>
    <submitter>Martin Sebor</submitter>
    <date>18 Sep 2003</date>
    <discussion>
        <p>

<sref ref="[istream::sentry]"/>, p2 says that <tt>istream::sentry</tt> ctor prepares for input if <tt>is.good()</tt>
is true. p4 then goes on to say that the ctor sets the <tt>sentry::ok_</tt> member to
true if the stream state is good after any preparation. <sref ref="[istream.formatted.reqmts]"/>, p1 then
says that a formatted input function endeavors to obtain the requested input
if the sentry's <tt>operator bool()</tt> returns true.

Given these requirements, no formatted extractor should ever set <tt>failbit</tt> if
the initial stream <tt>rdstate() == eofbit</tt>. That is contrary to the behavior of
all implementations I tested. The program below prints out
</p>
<blockquote><pre>
eof = 1, fail = 0
eof = 1, fail = 1
</pre></blockquote>
<p>
on all of them.
        </p>
<pre>

#include &lt;sstream>
#include &lt;cstdio>

int main()
{
    std::istringstream strm ("1");

    int i = 0;

    strm >> i;

    std::printf ("eof = %d, fail = %d\n",
                 !!strm.eof (), !!strm.fail ());

    strm >> i;

    std::printf ("eof = %d, fail = %d\n",
                 !!strm.eof (), !!strm.fail ());
}

</pre>
        <p>
<br/>

Comments from Jerry Schwarz (c++std-lib-11373):
<br/>

Jerry Schwarz wrote:
<br/>

I don't know where (if anywhere) it says it in the standard, but the
formatted extractors are supposed to set <tt>failbit</tt> if they don't extract
any characters. If they didn't then simple loops like
<br/>

while (cin >> x);
<br/>

would loop forever.
<br/>

Further comments from Martin Sebor:
<br/>

The question is which part of the extraction should prevent this from happening
by setting <tt>failbit</tt> when <tt>eofbit</tt> is already set. It could either be the sentry
object or the extractor. It seems that most implementations have chosen to
set <tt>failbit</tt> in the sentry [...] so that's the text that will need to be
corrected. 

        </p>
<p>
Pre Berlin:  This issue is related to <iref ref="342"/>.  If the sentry
sets <tt>failbit</tt> when it finds <tt>eofbit</tt> already set, then
you can never seek away from the end of stream.
</p>
<p>Kona: Possibly NAD.  If <tt>eofbit</tt> is set then <tt>good()</tt> will return false.  We
  then set <i>ok</i> to false.  We believe that the sentry's
  constructor should always set <tt>failbit</tt> when <i>ok</i> is false, and
  we also think the standard already says that.  Possibly it could be
  clearer.</p> 


<note>
2009-07 Frankfurt
</note>

<blockquote><p>
Moved to Ready.
</p></blockquote>

</discussion>

<resolution>
<p>
Change <sref ref="[istream::sentry]"/>, p2 to:
</p>

<blockquote>
<pre>explicit sentry(basic_istream&lt;charT,traits&gt;&amp; <i>is</i> , bool <i>noskipws</i> = false);</pre>
<p>
-2- <i>Effects:</i> If <tt>is.good()</tt> is <del><tt>true</tt></del>
<ins><tt>false</tt></ins>, <ins>calls <tt>is.setstate(failbit)</tt>. 
Otherwise</ins> prepares for formatted or unformatted input. ...
</p>
</blockquote>

</resolution>

</issue>
