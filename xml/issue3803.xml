<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3803" status="Immediate">
<title><tt>flat_<i>foo</i></tt> constructors taking <tt>KeyContainer</tt> lack <tt>KeyCompare</tt> parameter</title>
<section><sref ref="[flat.map]"/><sref ref="[flat.multimap]"/>
<sref ref="[flat.set]"/><sref ref="[flat.multiset]"/></section>
<submitter>Arthur O'Dwyer</submitter>
<date>25 Oct 2022</date>
<priority>1</priority>

<discussion>
<p>
<tt>flat_set</tt>'s current constructor overload set has these two overloads:
</p>
<blockquote><pre>
explicit flat_set(container_type cont);
template&lt;class Allocator&gt;
  flat_set(const container_type&amp; cont, const Allocator&amp; a);
</pre></blockquote>
<p>
I believe it should have these two in addition:
</p>
<blockquote><pre>
flat_set(const key_compare&amp; comp, container_type cont);
template&lt;class Allocator&gt;
  flat_set(const key_compare&amp; comp, const container_type&amp; cont, const Allocator&amp; a);
</pre></blockquote>
<p>
with corresponding deduction guides. Similar wording changes would have to be made to all the 
<tt>flat_<i>foo</i></tt> containers.
<p/>
Tony Table:
</p>
<blockquote><pre>
struct LessWhenDividedBy {
  int divisor_;
  bool operator()(int x, int y) const { return x/divisor_ &lt; y/divisor_; }
};
std::flat_set&lt;int, LessWhenDividedBy&gt; s(data.begin(), data.end(), LessWhenDividedBy(10));
// BEFORE AND AFTER: okay, but cumbersome
std::flat_set&lt;int, LessWhenDividedBy&gt; s(data);
// BEFORE AND AFTER: oops, this default-constructs the comparator

std::flat_set&lt;int, LessWhenDividedBy&gt; s(LessWhenDividedBy(10), data);
// BEFORE: fails to compile
// AFTER: compiles successfully
</pre></blockquote>

<note>2022-11-04; Reflector poll</note>
<p>
Set priority to 1 after reflector poll.
</p>

<note>2023-02-09 Tim adds wording</note>
<p>
For each construction that takes containers, this wording allow a comparator to be specified as well.
Differing from the suggestion in the issue, the comparator goes last (but before the allocator),
for consistency with every other constructor of <tt>flat_<i>meow</i></tt> taking a comparator.
(This is inconsistent with <tt>priority_queue</tt>, but consistency among the type's own
constructors seems more important.)
</p>

<note>Issaquah 2023-02-09; LWG</note>
<p>Move to Immediate for C++23</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="n4928"/>.
</p>

<ol>
<li><p>Add a new bullet to <sref ref="[container.adaptors.general]"/> p6 as indicated:</p>
<blockquote>
<p> -6- A deduction guide for a container adaptor shall not participate in overload 
resolution if any of the following are true:</p>
<ol style="list-style-type:none">
<li>
<p><ins>&mdash; (6.?) It has both <tt>KeyContainer</tt> and <tt>Compare</tt>
template parameters, and <tt>is_invocable_v&lt;const Compare&amp;, 
const typename KeyContainer::value_type&amp;, 
const typename KeyContainer::value_type&amp;&gt;</tt> is not a valid expression
or is <tt>false</tt>.</ins>
</p>
</li>
</ol>
</blockquote>
</li>
<li><p>Modify <sref ref="[flat.map.defn]"/> as indicated:</p>
<blockquote>
<pre>
namespace std {
  template&lt;class Key, class T, class Compare = less&lt;Key&gt;,
           class KeyContainer = vector&lt;Key&gt;, class MappedContainer = vector&lt;T&gt;&gt;
  class flat_map {
  public:
    [&hellip;]
    // <sref ref="[flat.map.cons]"/>, construct/copy/destroy
    flat_map() : flat_map(key_compare()) { }

    flat_map(key_container_type key_cont, mapped_container_type mapped_cont<ins>,
             const key_compare&amp; comp = key_compare()</ins>);
    template&lt;class Allocator&gt;
      flat_map(const key_container_type&amp; key_cont, const mapped_container_type&amp; mapped_cont,
               const Allocator&amp; a);
<ins>    template&lt;class Allocator&gt;
      flat_map(const key_container_type&amp; key_cont, const mapped_container_type&amp; mapped_cont,
               const key_compare&amp; comp, const Allocator&amp; a);</ins>

    flat_map(sorted_unique_t, key_container_type key_cont, mapped_container_type mapped_cont<ins>,
             const key_compare&amp; comp = key_compare()</ins>);
    template&lt;class Allocator&gt;
      flat_map(sorted_unique_t, const key_container_type&amp; key_cont,
               const mapped_container_type&amp; mapped_cont, const Allocator&amp; a);
<ins>    template&lt;class Allocator&gt;
      flat_map(sorted_unique_t, const key_container_type&amp; key_cont,
               const mapped_container_type&amp; mapped_cont, 
               const key_compare&amp; comp, const Allocator&amp; a);</ins>
    [&hellip;]
  };

  template&lt;class KeyContainer, class MappedContainer<ins>, class Compare = less&lt;typename KeyContainer::value_type&gt;</ins>&gt;
    flat_map(KeyContainer, MappedContainer<ins>, Compare = Compare()</ins>)
      -&gt; flat_map&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  <ins>Compare</ins><del>less&lt;typename KeyContainer::value_type&gt;</del>, KeyContainer, MappedContainer&gt;;

  template&lt;class KeyContainer, class MappedContainer, class Allocator&gt;
    flat_map(KeyContainer, MappedContainer, Allocator)
      -&gt; flat_map&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  less&lt;typename KeyContainer::value_type&gt;, KeyContainer, MappedContainer&gt;;
<ins>  template&lt;class KeyContainer, class MappedContainer, class Compare, class Allocator&gt;
    flat_map(KeyContainer, MappedContainer, Compare, Allocator)
      -&gt; flat_map&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  Compare, KeyContainer, MappedContainer&gt;;</ins>


  template&lt;class KeyContainer, class MappedContainer<ins>, class Compare = less&lt;typename KeyContainer::value_type&gt;</ins>&gt;
    flat_map(sorted_unique_t, KeyContainer, MappedContainer<ins>, Compare = Compare()</ins>)
      -&gt; flat_map&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  <ins>Compare</ins><del>less&lt;typename KeyContainer::value_type&gt;</del>, KeyContainer, MappedContainer&gt;;

  template&lt;class KeyContainer, class MappedContainer, class Allocator&gt;
    flat_map(sorted_unique_t, KeyContainer, MappedContainer, Allocator)
      -&gt; flat_map&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  less&lt;typename KeyContainer::value_type&gt;, KeyContainer, MappedContainer&gt;;
<ins>  template&lt;class KeyContainer, class MappedContainer, class Compare, class Allocator&gt;
    flat_map(sorted_unique_t, KeyContainer, MappedContainer, Compare, Allocator)
      -&gt; flat_map&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  Compare, KeyContainer, MappedContainer&gt;;</ins>
  [&hellip;]
}
</pre>
</blockquote>
</li>
<li><p>Modify <sref ref="[flat.map.cons]"/> as indicated:</p>
<blockquote>
<pre>
flat_map(key_container_type key_cont, mapped_container_type mapped_cont<ins>,
         const key_compare&amp; comp = key_compare()</ins>);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Initializes <tt>c.keys</tt> with <tt>std::move(key_cont)</tt><ins>,</ins>
<del>and</del> <tt>c.values</tt> with <tt>std::move(mapped_cont)</tt><ins>, and <tt>compare</tt> with <tt>comp</tt></ins>
<del>; value-initializes <tt>compare</tt></del>; sorts the range <tt>[begin(), end())</tt>
with respect to <tt>value_comp()</tt>; and finally erases the duplicate elements as if by:
</p>
<blockquote>
<pre>
auto zv = ranges::zip_view(c.keys, c.values);
auto it = ranges::unique(zv, key_equiv(compare)).begin();
auto dist = distance(zv.begin(), it);
c.keys.erase(c.keys.begin() + dist, c.keys.end());
c.values.erase(c.values.begin() + dist, c.values.end());
</pre>
</blockquote>
<p>
-2- <i>Complexity:</i> Linear in <i>N</i> if the container arguments are already 
sorted with respect to <tt>value_comp()</tt> and otherwise <i>N</i> log <i>N</i>,
where <i>N</i> is the value of <tt>key_cont.size()</tt> before this call.
</p>
</blockquote>
<pre>
template&lt;class Allocator&gt;
  flat_map(const key_container_type&amp; key_cont, const mapped_container_type&amp; mapped_cont,
           const Allocator&amp; a);
<ins>template&lt;class Allocator&gt;
  flat_map(const key_container_type&amp; key_cont, const mapped_container_type&amp; mapped_cont,
           const key_compare&amp; comp, const Allocator&amp; a);</ins>
</pre>
<blockquote>
<p>
-3- <i>Constraints:</i> <tt>uses_allocator_v&lt;key_container_type, Allocator&gt;</tt> is <tt>true</tt>
and <tt>uses_allocator_v&lt;mapped_container_type, Allocator&gt;</tt> is <tt>true</tt>.
<p/>
-4- <i>Effects:</i> Equivalent to <tt>flat_map(key_cont, mapped_cont)</tt>
<ins>and <tt>flat_map(key_cont, mapped_cont, comp)</tt>, respectively</ins>, 
except that <tt>c.keys</tt> and <tt>c.values</tt> are constructed with 
uses-allocator construction (<sref ref="[allocator.uses.construction]"/>).
<p/>
-5- <i>Complexity:</i> Same as <tt>flat_map(key_cont, mapped_cont)</tt>
<ins>and <tt>flat_map(key_cont, mapped_cont, comp)</tt>, respectively</ins>.
</p>
</blockquote>

<pre>
flat_map(sorted_unique_t, key_container_type key_cont, mapped_container_type mapped_cont<ins>,
         const key_compare&amp; comp = key_compare()</ins>);
</pre>
<blockquote>
<p>
-6- <i>Effects:</i> Initializes <tt>c.keys</tt> with <tt>std::move(key_cont)</tt><ins>,</ins>
<del>and</del> <tt>c.values</tt> with <tt>std::move(mapped_cont)</tt><ins>, and <tt>compare</tt> with <tt>comp</tt></ins>
<del>; value-initializes <tt>compare</tt></del>.
<p/>
-7- <i>Complexity:</i> Constant.
</p>
</blockquote>
<pre>
template&lt;class Allocator&gt;
  flat_map(sorted_unique_t s, const key_container_type&amp; key_cont,
           const mapped_container_type&amp; mapped_cont, const Allocator&amp; a);
<ins>template&lt;class Allocator&gt;
  flat_map(sorted_unique_t s, const key_container_type&amp; key_cont, 
           const mapped_container_type&amp; mapped_cont, const key_compare&amp; comp,
           const Allocator&amp; a);</ins>
</pre>
<blockquote>
<p>
-8- <i>Constraints:</i> <tt>uses_allocator_v&lt;key_container_type, Allocator&gt;</tt> is <tt>true</tt>
and <tt>uses_allocator_v&lt;mapped_container_type, Allocator&gt;</tt> is <tt>true</tt>.
<p/>
-9- <i>Effects:</i> Equivalent to <tt>flat_map(s, key_cont, mapped_cont)</tt>
<ins>and <tt>flat_map(s, key_cont, mapped_cont, comp)</tt>, respectively</ins>, 
except that <tt>c.keys</tt> and <tt>c.values</tt> are constructed with 
uses-allocator construction (<sref ref="[allocator.uses.construction]"/>).
<p/>
-10- <i>Complexity:</i> Linear.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[flat.multimap.defn]"/> as indicated:</p>
<blockquote>
<pre>
namespace std {
  template&lt;class Key, class T, class Compare = less&lt;Key&gt;,
           class KeyContainer = vector&lt;Key&gt;, class MappedContainer = vector&lt;T&gt;&gt;
  class flat_multimap {
  public:
    [&hellip;]
    // <sref ref="[flat.multimap.cons]"/>, construct/copy/destroy
    flat_multimap() : flat_multimap(key_compare()) { }

    flat_multimap(key_container_type key_cont, mapped_container_type mapped_cont<ins>,
                  const key_compare&amp; comp = key_compare()</ins>);
    template&lt;class Allocator&gt;
      flat_multimap(const key_container_type&amp; key_cont, const mapped_container_type&amp; mapped_cont,
                    const Allocator&amp; a);
<ins>    template&lt;class Allocator&gt;
      flat_multimap(const key_container_type&amp; key_cont, const mapped_container_type&amp; mapped_cont,
                    const key_compare&amp; comp, const Allocator&amp; a);</ins>

    flat_multimap(sorted_equivalent_t, 
                  key_container_type key_cont, mapped_container_type mapped_cont<ins>,
                  const key_compare&amp; comp = key_compare()</ins>);
    template&lt;class Allocator&gt;
      flat_multimap(sorted_equivalent_t, const key_container_type&amp; key_cont,
                    const mapped_container_type&amp; mapped_cont, const Allocator&amp; a);
<ins>    template&lt;class Allocator&gt;
      flat_multimap(sorted_equivalent_t, const key_container_type&amp; key_cont,
                    const mapped_container_type&amp; mapped_cont, 
                    const key_compare&amp; comp, const Allocator&amp; a);</ins>
    [&hellip;]
  };

  template&lt;class KeyContainer, class MappedContainer<ins>, class Compare = less&lt;typename KeyContainer::value_type&gt;</ins>&gt;
    flat_multimap(KeyContainer, MappedContainer<ins>, Compare = Compare()</ins>)
      -&gt; flat_multimap&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  <ins>Compare</ins><del>less&lt;typename KeyContainer::value_type&gt;</del>, KeyContainer, MappedContainer&gt;;

  template&lt;class KeyContainer, class MappedContainer, class Allocator&gt;
    flat_multimap(KeyContainer, MappedContainer, Allocator)
      -&gt; flat_multimap&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  less&lt;typename KeyContainer::value_type&gt;, KeyContainer, MappedContainer&gt;;
<ins>  template&lt;class KeyContainer, class MappedContainer, class Compare, class Allocator&gt;
    flat_multimap(KeyContainer, MappedContainer, Compare, Allocator)
      -&gt; flat_multimap&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  Compare, KeyContainer, MappedContainer&gt;;</ins>


  template&lt;class KeyContainer, class MappedContainer<ins>, class Compare = less&lt;typename KeyContainer::value_type&gt;</ins>&gt;
    flat_multimap(sorted_equivalent_t, KeyContainer, MappedContainer<ins>, Compare = Compare()</ins>)
      -&gt; flat_multimap&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  <ins>Compare</ins><del>less&lt;typename KeyContainer::value_type&gt;</del>, KeyContainer, MappedContainer&gt;;

  template&lt;class KeyContainer, class MappedContainer, class Allocator&gt;
    flat_multimap(sorted_equivalent_t, KeyContainer, MappedContainer, Allocator)
      -&gt; flat_multimap&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  less&lt;typename KeyContainer::value_type&gt;, KeyContainer, MappedContainer&gt;;
<ins>  template&lt;class KeyContainer, class MappedContainer, class Compare, class Allocator&gt;
    flat_multimap(sorted_equivalent_t, KeyContainer, MappedContainer, Compare, Allocator)
      -&gt; flat_multimap&lt;typename KeyContainer::value_type, typename MappedContainer::value_type,
                  Compare, KeyContainer, MappedContainer&gt;;</ins>
  [&hellip;]
}
</pre>
</blockquote>
</li>
<li><p>Modify <sref ref="[flat.multimap.cons]"/> as indicated:</p>
<blockquote>
<pre>
flat_multimap(key_container_type key_cont, mapped_container_type mapped_cont<ins>,
              const key_compare&amp; comp = key_compare()</ins>);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Initializes <tt>c.keys</tt> with <tt>std::move(key_cont)</tt><ins>,</ins>
<del>and</del> <tt>c.values</tt> with <tt>std::move(mapped_cont)</tt><ins>, and <tt>compare</tt> with <tt>comp</tt></ins>
<del>; value-initializes <tt>compare</tt></del>; and sorts the range <tt>[begin(), end())</tt>
with respect to <tt>value_comp()</tt>.
</p>
<p>
-2- <i>Complexity:</i> Linear in <i>N</i> if the container arguments are already 
sorted with respect to <tt>value_comp()</tt> and otherwise <i>N</i> log <i>N</i>,
where <i>N</i> is the value of <tt>key_cont.size()</tt> before this call.
</p>
</blockquote>
<pre>
template&lt;class Allocator&gt;
  flat_multimap(const key_container_type&amp; key_cont, const mapped_container_type&amp; mapped_cont,
                const Allocator&amp; a);
<ins>template&lt;class Allocator&gt;
  flat_multimap(const key_container_type&amp; key_cont, const mapped_container_type&amp; mapped_cont,
                const key_compare&amp; comp, const Allocator&amp; a);</ins>
</pre>
<blockquote>
<p>
-3- <i>Constraints:</i> <tt>uses_allocator_v&lt;key_container_type, Allocator&gt;</tt> is <tt>true</tt>
and <tt>uses_allocator_v&lt;mapped_container_type, Allocator&gt;</tt> is <tt>true</tt>.
<p/>
-4- <i>Effects:</i> Equivalent to <tt>flat_multimap(key_cont, mapped_cont)</tt>
<ins>and <tt>flat_multimap(key_cont, mapped_cont, comp)</tt>, respectively</ins>, 
except that <tt>c.keys</tt> and <tt>c.values</tt> are constructed with 
uses-allocator construction (<sref ref="[allocator.uses.construction]"/>).
<p/>
-5- <i>Complexity:</i> Same as <tt>flat_multimap(key_cont, mapped_cont)</tt>
<ins>and <tt>flat_multimap(key_cont, mapped_cont, comp)</tt>, respectively</ins>.
</p>
</blockquote>

<pre>
flat_multimap(sorted_equivalent_t, key_container_type key_cont, mapped_container_type mapped_cont<ins>,
              const key_compare&amp; comp = key_compare()</ins>);
</pre>
<blockquote>
<p>
-6- <i>Effects:</i> Initializes <tt>c.keys</tt> with <tt>std::move(key_cont)</tt><ins>,</ins>
<del>and</del> <tt>c.values</tt> with <tt>std::move(mapped_cont)</tt><ins>, and <tt>compare</tt> with <tt>comp</tt></ins>
<del>; value-initializes <tt>compare</tt></del>.
<p/>
-7- <i>Complexity:</i> Constant.
</p>
</blockquote>
<pre>
template&lt;class Allocator&gt;
  flat_multimap(sorted_equivalent_t s, const key_container_type&amp; key_cont,
               const mapped_container_type&amp; mapped_cont, const Allocator&amp; a);
<ins>template&lt;class Allocator&gt;
  flat_multimap(sorted_equivalent_t s, const key_container_type&amp; key_cont, 
                const mapped_container_type&amp; mapped_cont, const key_compare&amp; comp,
                const Allocator&amp; a);</ins>
</pre>
<blockquote>
<p>
-8- <i>Constraints:</i> <tt>uses_allocator_v&lt;key_container_type, Allocator&gt;</tt> is <tt>true</tt>
and <tt>uses_allocator_v&lt;mapped_container_type, Allocator&gt;</tt> is <tt>true</tt>.
<p/>
-9- <i>Effects:</i> Equivalent to <tt>flat_multimap(s, key_cont, mapped_cont)</tt>
<ins>and <tt>flat_multimap(s, key_cont, mapped_cont, comp)</tt>, respectively</ins>, 
except that <tt>c.keys</tt> and <tt>c.values</tt> are constructed with 
uses-allocator construction (<sref ref="[allocator.uses.construction]"/>).
<p/>
-10- <i>Complexity:</i> Linear.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Modify <sref ref="[flat.set.defn]"/> as indicated:</p>
<blockquote>
<pre>
namespace std {
  template&lt;class Key, class Compare = less&lt;Key&gt;, class KeyContainer = vector&lt;Key&gt;&gt;
  class flat_set {
  public:
    [&hellip;]

    // [flat.set.cons], constructors
    flat_set() : flat_set(key_compare()) { }

    explicit flat_set(container_type cont<ins>, const key_compare&amp; comp = key_compare()</ins>);
    template&lt;class Allocator&gt;
      flat_set(const container_type&amp; cont, const Allocator&amp; a);
<ins>    template&lt;class Allocator&gt;
      flat_set(const container_type&amp; cont, const key_compare&amp; comp, const Allocator&amp; a);</ins>

    flat_set(sorted_unique_t, container_type cont<ins>, const key_compare&amp; comp = key_compare()</ins>)
      : <i>c</i>(std::move(cont)), <i>compare</i>(<ins>comp</ins><del>key_compare()</del>) { }
    template&lt;class Allocator&gt;
      flat_set(sorted_unique_t, const container_type&amp; cont, const Allocator&amp; a);
<ins>    template&lt;class Allocator&gt;
      flat_set(sorted_unique_t, const container_type&amp; cont, 
               const key_compare&amp; comp, const Allocator&amp; a);</ins>

    [&hellip;]
  };

<ins>
  template&lt;class KeyContainer, class Compare = less&lt;typename KeyContainer::value_type&gt;&gt;
    flat_set(KeyContainer, Compare = Compare())
      -&gt; flat_set&lt;typename KeyContainer::value_type, Compare, KeyContainer&gt;;
  template&lt;class KeyContainer, class Allocator&gt;
    flat_set(KeyContainer, Allocator)
      -&gt; flat_set&lt;typename KeyContainer::value_type, less&lt;typename KeyContainer::value_type&gt;, KeyContainer&gt;;
  template&lt;class KeyContainer, class Compare, class Allocator&gt;
    flat_set(KeyContainer, Compare, Allocator)
      -&gt; flat_set&lt;typename KeyContainer::value_type, Compare, KeyContainer&gt;;

  template&lt;class KeyContainer, class Compare = less&lt;typename KeyContainer::value_type&gt;&gt;
    flat_set(sorted_unique_t, KeyContainer, Compare = Compare())
      -&gt; flat_set&lt;typename KeyContainer::value_type, Compare, KeyContainer&gt;;
  template&lt;class KeyContainer, class Allocator&gt;
    flat_set(sorted_unique_t, KeyContainer, Allocator)
      -&gt; flat_set&lt;typename KeyContainer::value_type, less&lt;typename KeyContainer::value_type&gt;, KeyContainer&gt;;
  template&lt;class KeyContainer, class Compare, class Allocator&gt;
    flat_set(sorted_unique_t, KeyContainer, Compare, Allocator)
      -&gt; flat_set&lt;typename KeyContainer::value_type, Compare, KeyContainer&gt;;
</ins>
  [&hellip;]
}
</pre>
</blockquote>
</li>
<li><p>Modify <sref ref="[flat.set.cons]"/> as indicated:</p>
<blockquote>
<pre>
flat_set(container_type cont<ins>, const key_compare&amp; comp = key_compare()</ins>);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Initializes <tt><i>c</i></tt> with <tt>std::move(cont)</tt>
<ins> and <tt><i>compare</i></tt> with <tt>comp</tt></ins>
<del>, value-initializes <tt><i>compare</i></tt></del>, sorts the range <tt>[begin(), end())</tt>
with respect to <tt><i>compare</i></tt>, and finally erases all but the first element from each group 
of consecutive equivalent elements.
</p>
<p>
-2- <i>Complexity:</i> Linear in <i>N</i> if <tt>cont</tt> is already 
sorted with respect to <tt><i>compare</i></tt> and otherwise <i>N</i> log <i>N</i>,
where <i>N</i> is the value of <tt>cont.size()</tt> before this call.
</p>
</blockquote>
<pre>
template&lt;class Allocator&gt;
  flat_set(const container_type&amp; cont, const Allocator&amp; a);
<ins>template&lt;class Allocator&gt;
  flat_set(const container_type&amp; cont, const key_compare&amp; comp, const Allocator&amp; a);</ins>
</pre>
<blockquote>
<p>
-3- <i>Constraints:</i> <tt>uses_allocator_v&lt;container_type, Allocator&gt;</tt> is <tt>true</tt>.
<p/>
-4- <i>Effects:</i> Equivalent to <tt>flat_set(cont)</tt>
<ins>and <tt>flat_set(cont, comp)</tt>, respectively</ins>, 
except that <tt><i>c</i></tt> is constructed with 
uses-allocator construction (<sref ref="[allocator.uses.construction]"/>).
<p/>
-5- <i>Complexity:</i> Same as <tt>flat_set(cont)</tt>
<ins>and <tt>flat_set(cont, comp)</tt>, respectively</ins>.
</p>
</blockquote>

<pre>
template&lt;class Allocator&gt;
  flat_set(sorted_unique_t s, const container_type&amp; cont, const Allocator&amp; a);
<ins>template&lt;class Allocator&gt;
  flat_set(sorted_unique_t s, const container_type&amp; cont, const key_compare&amp; comp, const Allocator&amp; a);</ins>
</pre>
<blockquote>
<p>
-6- <i>Constraints:</i> <tt>uses_allocator_v&lt;container_type, Allocator&gt;</tt> is <tt>true</tt>.
<p/>
-7- <i>Effects:</i> Equivalent to <tt>flat_set(s, cont)</tt>
<ins>and <tt>flat_set(s, cont, comp)</tt>, respectively</ins>, 
except that <tt><i>c</i></tt> is constructed with 
uses-allocator construction (<sref ref="[allocator.uses.construction]"/>).
<p/>
-8- <i>Complexity:</i> Linear.
</p>
</blockquote>
</blockquote>
</li>
<li><p>Modify <sref ref="[flat.multiset.defn]"/> as indicated:</p>
<blockquote>
<pre>
namespace std {
  template&lt;class Key, class Compare = less&lt;Key&gt;, class KeyContainer = vector&lt;Key&gt;&gt;
  class flat_multiset {
  public:
    [&hellip;]

    // [flat.multiset.cons], constructors
    flat_multiset() : flat_multiset(key_compare()) { }

    explicit flat_multiset(container_type cont<ins>, const key_compare&amp; comp = key_compare()</ins>);
    template&lt;class Allocator&gt;
      flat_multiset(const container_type&amp; cont, const Allocator&amp; a);
<ins>    template&lt;class Allocator&gt;
      flat_multiset(const container_type&amp; cont, const key_compare&amp; comp, const Allocator&amp; a);</ins>

    flat_multiset(sorted_equivalent_t, container_type cont<ins>, const key_compare&amp; comp = key_compare()</ins>)
      : <i>c</i>(std::move(cont)), <i>compare</i>(<ins>comp</ins><del>key_compare()</del>) { }
    template&lt;class Allocator&gt;
      flat_multiset(sorted_equivalent_t, const container_type&amp; cont, const Allocator&amp; a);
<ins>    template&lt;class Allocator&gt;
      flat_multiset(sorted_equivalent_t, const container_type&amp; cont, 
                    const key_compare&amp; comp, const Allocator&amp; a);</ins>

    [&hellip;]
  };

<ins>
  template&lt;class KeyContainer, class Compare = less&lt;typename KeyContainer::value_type&gt;&gt;
    flat_multiset(KeyContainer, Compare = Compare())
      -&gt; flat_multiset&lt;typename KeyContainer::value_type, Compare, KeyContainer&gt;;
  template&lt;class KeyContainer, class Allocator&gt;
    flat_multiset(KeyContainer, Allocator)
      -&gt; flat_multiset&lt;typename KeyContainer::value_type, less&lt;typename KeyContainer::value_type&gt;, KeyContainer&gt;;
  template&lt;class KeyContainer, class Compare, class Allocator&gt;
    flat_multiset(KeyContainer, Compare, Allocator)
      -&gt; flat_multiset&lt;typename KeyContainer::value_type, Compare, KeyContainer&gt;;

  template&lt;class KeyContainer, class Compare = less&lt;typename KeyContainer::value_type&gt;&gt;
    flat_multiset(sorted_equivalent_t, KeyContainer, Compare = Compare())
      -&gt; flat_multiset&lt;typename KeyContainer::value_type, Compare, KeyContainer&gt;;
  template&lt;class KeyContainer, class Allocator&gt;
    flat_multiset(sorted_equivalent_t, KeyContainer, Allocator)
      -&gt; flat_multiset&lt;typename KeyContainer::value_type, less&lt;typename KeyContainer::value_type&gt;, KeyContainer&gt;;
  template&lt;class KeyContainer, class Compare, class Allocator&gt;
    flat_multiset(sorted_equivalent_t, KeyContainer, Compare, Allocator)
      -&gt; flat_multiset&lt;typename KeyContainer::value_type, Compare, KeyContainer&gt;;
</ins>
  [&hellip;]
}
</pre>
</blockquote>
</li>
<li><p>Modify <sref ref="[flat.multiset.cons]"/> as indicated:</p>
<blockquote>
<pre>
flat_multiset(container_type cont<ins>, const key_compare&amp; comp = key_compare()</ins>);
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Initializes <tt><i>c</i></tt> with <tt>std::move(cont)</tt>
<ins> and <tt><i>compare</i></tt> with <tt>comp</tt></ins>
<del>, value-initializes <tt><i>compare</i></tt></del>, and sorts the range <tt>[begin(), end())</tt>
with respect to <tt><i>compare</i></tt>.
</p>
<p>
-2- <i>Complexity:</i> Linear in <i>N</i> if <tt>cont</tt> is already 
sorted with respect to <tt><i>compare</i></tt> and otherwise <i>N</i> log <i>N</i>,
where <i>N</i> is the value of <tt>cont.size()</tt> before this call.
</p>
</blockquote>
<pre>
template&lt;class Allocator&gt;
  flat_multiset(const container_type&amp; cont, const Allocator&amp; a);
<ins>template&lt;class Allocator&gt;
  flat_multiset(const container_type&amp; cont, const key_compare&amp; comp, const Allocator&amp; a);</ins>
</pre>
<blockquote>
<p>
-3- <i>Constraints:</i> <tt>uses_allocator_v&lt;container_type, Allocator&gt;</tt> is <tt>true</tt>.
<p/>
-4- <i>Effects:</i> Equivalent to <tt>flat_multiset(cont)</tt>
<ins>and <tt>flat_multiset(cont, comp)</tt>, respectively</ins>, 
except that <tt><i>c</i></tt> is constructed with 
uses-allocator construction (<sref ref="[allocator.uses.construction]"/>).
<p/>
-5- <i>Complexity:</i> Same as <tt>flat_multiset(cont)</tt>
<ins>and <tt>flat_multiset(cont, comp)</tt>, respectively</ins>.
</p>
</blockquote>

<pre>
template&lt;class Allocator&gt;
  flat_multiset(sorted_equivalent_t s, const container_type&amp; cont, const Allocator&amp; a);
<ins>template&lt;class Allocator&gt;
  flat_multiset(sorted_equivalent_t s, const container_type&amp; cont, const key_compare&amp; comp, const Allocator&amp; a);</ins>
</pre>
<blockquote>
<p>
-6- <i>Constraints:</i> <tt>uses_allocator_v&lt;container_type, Allocator&gt;</tt> is <tt>true</tt>.
<p/>
-7- <i>Effects:</i> Equivalent to <tt>flat_multiset(s, cont)</tt>
<ins>and <tt>flat_multiset(s, cont, comp)</tt>, respectively</ins>, 
except that <tt><i>c</i></tt> is constructed with 
uses-allocator construction (<sref ref="[allocator.uses.construction]"/>).
<p/>
-8- <i>Complexity:</i> Linear.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
