<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2058" status="WP">
<title><tt>valarray</tt> and <tt>begin&#47;end</tt></title>
<section><sref ref="[numarray]"/></section>
<submitter>Gabriel Dos Reis</submitter>
<date>17 May 2011</date>

<discussion>
<p>
It was just brought to my attention that the pair of functions
<tt>begin&#47;end</tt> were added to <tt>valarray</tt> component.
Those additions strike me as counter to the long standing agreement
that <tt>valarray&lt;T&gt;</tt> is not yet another container. Valarray values
are in general supposed to be treated as a whole, and as such
has a loose specification allowing expression template techniques.
<p/>
The addition of these functions sound to me as making it much harder
(or close to impossible) to effectively use expression templates
as implementation techniques, for no clear benefits.
<p/>
My recommendation would be to drop <tt>begin&#47;end</tt> - or at least for the
<tt>const valarray&lt;T&gt;&amp;</tt> version. I strongly believe those 
are defects.
</p>
<note>This issue was discussed on the library reflector starting from c++std-lib-30761.
Some of the key conclusions of this discussion were:</note>
<ol>
<li>The <tt>begin&#47;end</tt> members were added to allow <tt>valarray</tt> to participate
in the new range-based for-loop by <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2009/n2930.html">n2930</a>
and not to make them container-like.</li>
<li>It is currently underspecified when the iterator values returned from
<tt>begin&#47;end</tt> become invalidated. To fix this, these invalidation rules need at
least to reflect the invalidation rules of the references returned by the
<tt>operator[]</tt> overloads of <tt>valarray</tt> (<sref ref="[valarray.access]"/>).
</li>
<li>A further problem is that the requirements expressed in <sref ref="[valarray.syn]"/> p.3-5
enforce an implementation to provide further overloads of <tt>begin&#47;end</tt>, if the
replacement type technique is used (which was clearly part of the design of <tt>valarray</tt>).
Providing such additional overloads would also lead to life-time problems in examples like 
<tt>begin(x + y)</tt> where <tt>x</tt> and <tt>y</tt> are expressions involving <tt>valarray</tt> 
objects. To fix this, the <tt>begin&#47;end</tt> overloads could be explicitly excluded from the 
general statements of <sref ref="[valarray.syn]"/> p.3-5. This would make it unspecified
whether the expression <tt>begin(x + y)</tt> would be well-formed, portable code would
need to write this as <tt>begin(std::valarray&lt;T&gt;(x + y))</tt>.</li>
</ol>

<note>
2011 Bloomington
</note>

<p>
The intent of these overloads is entirely to support the new for syntax, and not to create
new containers.
</p>

<p>
Stefanus provides suggested wording.
</p>


<note>2012, Kona</note>
<p>
Moved to Tenatively Ready by post-meeting issues processing group, after confirmation
from Gaby.
</p>

<note>2012, Portland: applied to WP</note>

</discussion>

<resolution>
<p>
In <sref ref="[valarray.syn]"/>&#47;4, make the following <ins>insertion</ins>:
</p>

<p>
4 Implementations introducing such replacement types shall provide additional functions and operators as
follows:
</p>
<ul>
<li>for every function taking a <tt>const valarray&lt;T&gt;&amp;</tt> <ins>other than <tt>begin</tt> and <tt>end</tt>
(<sref ref="[valarray.range]"/>)</ins>, identical functions taking the replacement types shall be added;
</li>
<li>
for every function taking two <tt>const valarray&lt;T&gt;&amp;</tt> arguments, identical functions taking every combination
of <tt>const valarray&lt;T&gt;&amp;</tt> and replacement types shall be added.
</li>
</ul>

<p>
In <sref ref="[valarray.range]"/>, make the following <ins>insertion</ins>:
</p>
<p> 
1 In the <tt>begin</tt> and <tt>end</tt> function templates that follow, <i>unspecified</i>1 is a type that meets
the requirements of a mutable random access iterator (24.2.7) whose <tt>value_type</tt> is the template parameter
<tt>T</tt> and whose <tt>reference</tt> type is <tt>T&amp;</tt>. <i>unspecified</i>2 is a type that meets the
requirements of a constant random access iterator (24.2.7) whose <tt>value_type</tt> is the template parameter
<tt>T</tt> and whose <tt>reference</tt> type is <tt>const T&amp;</tt>.
</p>
<p><ins>
2 The iterators  returned by <tt>begin</tt> and <tt>end</tt> for an array are guaranteed to be valid until the
member function <tt>resize(size_t, T)</tt> (<sref ref="[valarray.members]"/>) is called for that array or until
the lifetime of that array ends, whichever happens first.
</ins></p>
</resolution>

</issue>
