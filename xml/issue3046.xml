<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3046" status="New">
<title><tt>atomic</tt> compound assignment operators can cause undefined behavior when corresponding <tt>fetch_<i>meow</i></tt> members don't</title>
<section><sref ref="[atomics.types.int]"/><sref ref="[atomics.types.pointer]"/><sref ref="[atomics.types.memop]"/></section>
<submitter>Tim Song</submitter>
<date>15 Dec 2017</date>
<priority>99</priority>

<discussion>
<p>
Given <tt>atomic&lt;int&gt; meow{INT_MAX};</tt>, <tt>meow.fetch_add(1)</tt> has well-defined behavior because <sref ref="[atomics.types.int]"/> p7 says that
<blockquote><p>
<i>Remarks:</i> For signed integer types, arithmetic is defined to use two's complement representation. There are no undefined results.
</p>
</blockquote>
but <tt>meow += 1</tt> and <tt>++meow</tt> have undefined behavior, because these operator functions are defined (by, respectively, <sref ref="[atomics.types.int]"/> p8 and
<sref ref="[atomics.types.memop]"/>) to be equivalent to <tt>return fetch_add(1) + 1;</tt>, and so the addition of 1 to the result of <tt>fetch_add</tt>&mdash;which causes an
integer overflow in this case&mdash;occurs outside the protection of <tt>fetch_add</tt> magic. Additionally, the return value might differ from what <tt>fetch_add</tt> actually
wrote since that addition isn't required to use two's complement. This seems like a trap for the unwary. Is it intended?
<p/>
A similar issue affects the <tt>atomic&lt;T*&gt;</tt> partial specialization for pointers.
</p>
</discussion>

<resolution>
</resolution>

</issue>
