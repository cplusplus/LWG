<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3878" status="New">
<title><tt>import std;</tt> should guarantee initialization of standard iostreams objects</title>
<section><sref ref="[iostream.objects.overview]"/></section>
<submitter>Tim Song</submitter>
<date>9 Feb 2023</date>
<priority>99</priority>
Edit /5 as indicated:
<discussion>
<p>
In the old world, <tt>#include &lt;iostream></tt>
behaves as if it defined a static-storage-duration <tt>ios_base::Init</tt> object, 
which causes the standard iostreams objects to be initialized (if necessary)
on startup and flushed on shutdown.
<p/>
But we don't include headers with <tt>import std;</tt>, so we need separate wording to
provide this guarantee. The proposed resolution below was adapted from a suggestion by 
Mathias Stearn on the reflector.
</p>
<note>2023-02-09 Tim updates wording following LWG discussion</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="n4928"/>.
</p>
<ol>
<li><p>Modify <sref ref="[iostream.objects.overview]"/>p5  as indicated:</p>
<p>
-5- The results of including <tt>&lt;iostream></tt> in a translation unit shall be 
as if <tt>&lt;iostream></tt> defined an instance of <tt>ios_base::Init</tt> with static
storage duration. <ins>Each C++ library module (<sref ref="[std.modules]"/>)
in a hosted implementation shall behave as if it contains an interface unit that defines
an unexported <tt>ios_base::Init</tt> variable with ordered initialization 
(<sref ref="[basic.start.dynamic]"/>). </ins>
<p/>
<ins>[<i>Note ?:</i> As a result, the definition of that variable is appearance-ordered
before any declaration following the point of importation of a C++ library module. 
Whether such a definition exists is unobservable by a program that does not reference
any of the standard iostream objects. &mdash; <i>end note</i>]</ins>
</p>
</li>
</ol>
</resolution>

</issue>
