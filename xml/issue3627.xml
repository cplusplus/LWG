<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3627" status="Voting">
<title>Inconsistent specifications for <tt>std::make_optional</tt> overloads</title>
<section><sref ref="[optional.specalg]"/></section>
<submitter>Jiang An</submitter>
<date>23 Oct 2021</date>
<priority>3</priority>

<discussion>
<p>
Three <tt>std::make_optional</tt> overloads are specified in <sref ref="[optional.specalg]"/>. 
The first one is specified by "<i>Returns:</i>" and the other two are specified by "<i>Effects:</i> Equivalent to:".
According to <sref ref="[structure.specifications]"/>/4, such uses of "<i>Effects:</i> Equivalent to:" 
propagate the <i>Constraints</i> specified for constructors. As the selected constructor for the first 
overload has "<i>Constraints:</i>" (<sref ref="[optional.ctor]"/>/22), it seems that inconsistency is introduced here.
<p/>
Existing implementations are inconsistent: libstdc++ constrains all three overloads, 
while libc++ and MSVC STL do not constrain any of them.
<p/>
IMO all three overloads should be constrained.
</p>

<note>2022-01-29; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
</p>

<note>2025-10-16; Status changed: New &rarr; Tentatively Ready.</note>
<p>Reflector poll in 2024-07 with eight supporting votes.</p>

</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4901">N4901</a>.
</p>

<ol>
<li><p>Modify <sref ref="[optional.specalg]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt; constexpr optional&lt;decay_t&lt;T&gt;&gt; make_optional(T&amp;&amp; v);
</pre>
<blockquote>
<p>
-3- <i><del>Returns</del><ins>Effects</ins>:</i> <ins>Equivalent to: </ins><tt><ins>return </ins>optional&lt;decay_t&lt;T&gt;&gt;(std::forward&lt;T&gt;(v))<ins>;</ins></tt><del>.</del>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
