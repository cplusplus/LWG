<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3477" status="WP">
<title>Simplify constraints for <tt><i>semiregular-box</i></tt></title>
<section><sref ref="[range.move.wrap]"/></section>
<submitter>Casey Carter</submitter>
<date>19 Aug 2020</date>
<priority>0</priority>

<discussion>
<p>
The exposition-only <tt><i>semiregular-box</i></tt> class template specified in <sref ref="[range.semi.wrap]"/> 
implements a default constructor, copy assignment operator, and move assignment operator atop the facilities 
provided by <tt>std::optional</tt> when the wrapped type is not default constructible, copy assignable, or 
move assignable (respectively). The constraints on the copy and move assignment operator implementations go 
out of their way to be unnecessarily minimal. The meaning of the constraint on the copy assignment operator 
&mdash; <tt>!assignable&lt;T, const T&amp;&gt;</tt> &mdash; has even changed since this wording was written 
as a result of LWG reformulating the implicit expression variations wording in <sref ref="[concepts.equality]"/>.
<p/>
It would be much simpler for implementors and users if we recall that minimality is not the primary goal of 
constraints and instead constrain these assignment operators more simply with 
<tt>!movable&lt;T&gt;</tt> and <tt>!copyable&lt;T&gt;</tt>.
</p>

<note>2020-09-03; Reflector prioritization</note>
<p>
Set priority to 0 and status to Tentatively Ready after six votes in favour during reflector discussions.
</p>
<note>2020-11-09 Approved In November virtual meeting. Status changed: Tentatively Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[range.semi.wrap]"/> as indicated:</p>

<blockquote>
<p>
-1- Many types in this subclause are specified in terms of an exposition-only class template 
<tt><i>semiregular-box</i></tt>. <tt><i>semiregular-box</i>&lt;T&gt;</tt> behaves exactly like 
<tt>optional&lt;T&gt;</tt> with the following differences:
</p>
<ol style="list-style-type: none">
<li><p>(1.1) &mdash; [&hellip;]</p></li>
<li><p>(1.2) &mdash; [&hellip;]</p></li>
<li><p>(1.3) &mdash; If <tt><del>assignable_from&lt;T&amp;, const T&amp;&gt;</del><ins>copyable&lt;T&gt;</ins></tt> 
is not modeled, the copy assignment operator is equivalent to:</p>
<pre>
<i>semiregular-box</i>&amp; operator=(const <i>semiregular-box</i>&amp; that)
  noexcept(is_nothrow_copy_constructible_v&lt;T&gt;)
{
  if (that) emplace(*that);
  else reset();
  return *this;
}
</pre>
</li>
<li><p>(1.4) &mdash; If <tt><del>assignable_from&lt;T&amp;, T&gt;</del><ins>movable&lt;T&gt;</ins></tt> 
is not modeled, the move assignment operator is equivalent to:</p>
<pre>
<i>semiregular-box</i>&amp; operator=(<i>semiregular-box</i>&amp;&amp; that)
  noexcept(is_nothrow_move_constructible_v&lt;T&gt;)
{
  if (that) emplace(std::move(*that));
  else reset();
  return *this;
}
</pre>
</li>
</ol>
</blockquote>
</li>

</ol>
</resolution>

</issue>
