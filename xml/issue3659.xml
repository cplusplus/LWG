<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3659" status="WP">
<title>Consider <tt>ATOMIC_FLAG_INIT</tt> undeprecation</title>
<section><sref ref="[atomics.flag]"/></section>
<submitter>Aaron Ballman</submitter>
<date>18 Jan 2022</date>
<priority>3</priority>

<discussion>
<p>
<paper num="P0883R2"/> deprecated <tt>ATOMTIC_VAR_INIT</tt> and
<tt>ATOMIC_FLAG_INIT</tt> largely based on rationale from WG14. However, WG14
only deprecated <tt>ATOMIC_VAR_INIT</tt> because we were told by implementers
that <tt>ATOMIC_FLAG_INIT</tt> is still necessary for some platforms (platforms
for which "clear" is actually not all zero bits, which I guess exist).
<p/>
I'd like to explore whether WG21 should undeprecate <tt>ATOMIC_FLAG_INIT</tt>
as there was no motivation that I could find in the paper on the topic
or in the discussion at 
<a href="https://wiki.edg.com/bin/view/Wg21jacksonville2018/P0883R0">P0883R0 [Jacksonville 2018]</a>.
<p/>
One possible approach would be to undeprecate it from <tt>&lt;stdatomic.h&gt;</tt> only (C++ 
can still use the constructors from <tt>&lt;atomic&gt;</tt> and shared code can use the macros 
from <tt>&lt;stdatomic.h&gt;</tt>).
</p>

<note>2022-01-30; Reflector poll</note>
<p>
Set priority to 3 after reflector poll. Send to SG1.
</p>

<note>2022-07-06; SG1 confirm the direction, Jonathan adds wording</note>
<p>
"In response to LWG 3659, add ATOMIC_FLAG_INIT to &lt;stdatomic.h&gt; as undeprecated."
</p>
<table>
<tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr>
<tr><td>3</td><td>0</td><td>0</td><td>0</td><td>0</td></tr>
</table>
<p>
"In response to LWG 3659, undeprecate ATOMIC_FLAG_INIT in &lt;atomic&gt;."
</p>
<table>
<tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr>
<tr><td>2</td><td>3</td><td>1</td><td>0</td><td>0</td></tr>
</table>


<note>2022-07-11; Reflector poll</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>

<note>2022-07-15; LWG telecon: move to Ready</note>

<note>2022-07-25 Approved at July 2022 virtual plenary. Status changed: Ready &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li>
<p>
Modify <sref ref="[atomics.syn]"/>, Header <tt>&lt;atomic&gt;</tt> synopsis,
as indicated:
</p>

<blockquote>
<pre>
void atomic_flag_notify_all(volatile atomic_flag*) noexcept;
void atomic_flag_notify_all(atomic_flag*) noexcept;
<ins>#define ATOMIC_FLAG_INIT <i>see below</i></ins>

// [atomics.fences], fences
extern "C" void atomic_thread_fence(memory_order) noexcept;
extern "C" void atomic_signal_fence(memory_order) noexcept;
</pre>
</blockquote>
</li>

<li>
<p>
Move the content of <sref ref="[depr.atomics.flag]"/> from Annex D to
the end of <sref ref="[atomics.flag]"/>.
</p>
<blockquote>
<pre>
#define ATOMIC_FLAG_INIT <i>see below</i>
</pre>
<blockquote>
<p>
<i>Remarks:</i> The macro <code>ATOMIC_FLAG_INIT</code> is defined in
such a way that it can be used to initialize an object of type
<code>atomic_flag</code> to the clear state. The macro can be used in the form:
</p>
<pre>
  atomic_flag guard = ATOMIC_FLAG_INIT;
</pre>
<p>
It is unspecified whether the macro can be used in other initialization
contexts.
For a complete static-duration object, that initialization shall be static.
</p>
</blockquote>
</blockquote>
</li>

<li>
<p>
Modify <sref ref="[stdatomic.h.syn]"/> C compatibility, as indicated:
</p>

<blockquote>
<pre>
using std::atomic_flag_clear;            <i>// see below</i>
using std::atomic_flag_clear_explicit;   <i>// see below</i>
<ins>#define ATOMIC_FLAG_INIT <i>see below</i></ins>

using std::atomic_thread_fence;          <i>// see below</i>
using std::atomic_signal_fence;          <i>// see below</i>
</pre>
</blockquote>
</li>

<li>
<p>
Modify <sref ref="[depr.atomics.general]"/> in Annex D as indicated:
</p>

<blockquote>
<pre>
#define ATOMIC_VAR_INIT(value) <i>see below</i>

<del>#define ATOMIC_FLAG_INIT <i>see below</i></del>
}
</pre>
</blockquote>
</li>

</ol>

</resolution>

</issue>
