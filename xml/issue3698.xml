<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3698" status="Resolved">
<title><tt>regex_iterator</tt> and <tt>join_view</tt> don't work together very well</title>
<section><sref ref="[re.iter]"/><sref ref="[range.join]"/></section>
<submitter>Barry Revzin</submitter>
<date>12 May 2022</date>
<priority>2</priority>

<discussion>
<p>
Consider this example (from <a href="https://stackoverflow.com/q/72201979/2069064">StackOverflow</a>):
</p>
<blockquote><pre>
#include &lt;ranges&gt;
#include &lt;regex&gt;
#include &lt;iostream&gt;

int main() {
  char const text[] = "Hello";
  std::regex regex{"[a-z]"};

  auto lower = std::ranges::subrange(
        std::cregex_iterator(
            std::ranges::begin(text),
            std::ranges::end(text),
            regex),
        std::cregex_iterator{}
    )
    | std::views::join
    | std::views::transform([](auto const&amp; sm) {
        return std::string_view(sm.first, sm.second);
    });

  for (auto const&amp; sv : lower) {
    std::cout &lt;&lt; sv &lt;&lt; '\n';
  }
}
</pre></blockquote>
<p>
This example seems sound, having <tt>lower</tt> be a range of <tt>string_view</tt> that should refer
back into <tt>text</tt>, which is in scope for all this time. The <tt>std::regex</tt> object is also
in scope for all this time.
<p/>
Yet, if run this through address sanitizer, this blows up in the first call to the dereference operator
of the underlying <tt>transform_view</tt>'s iterator with heap-use-after-free.
<p/>
The problem here is ultimately that <tt>regex_iterator</tt> is a stashing iterator (it has a member
<tt>match_results</tt>) yet advertises itself as a <tt>forward_iterator</tt> (despite violating
<sref ref="[forward.iterators]"/> p6 and <sref ref="[iterator.concept.forward]"/> p3.
<p/>
Then, <tt>join_view</tt>'s iterator stores an outer iterator (the <tt>regex_iterator</tt>) and an
<tt>inner_iterator</tt> (an iterator into the container that the <tt>regex_iterator</tt> stashes).
Copying that iterator effectively invalidates it &mdash; since the new iterator's inner iterator will
refer to the old iterator's outer iterator's container. These aren't (and can't be) independent copies.
In this particular example, <tt>join_view</tt>'s <tt>begin</tt> iterator is copied into the
<tt>transform_view</tt>'s iterator, and then the original is destroyed (which owns the container that
the new inner iterator still points to), which causes us to have a dangling iterator.
<p/>
Note that the example is well-formed in libc++ because libc++ moves instead of copying an iterator,
which happens to work. But I can produce other non-transform-view related examples that fail.
<p/>
This is actually two different problems:
</p>
<ol>
<li><p><tt>regex_iterator</tt> is really an input iterator, not a forward iterator. It does not meet either
the C++17 or the C++20 forward iterator requirements.</p></li>
<li><p><tt>join_view</tt> can't handle stashing iterators, and would need to additionally store the outer
iterator in a non-propagating-cache for input ranges (similar to how it already potentially stores the
inner iterator in a non-propagating-cache).</p></li>
</ol>
<p>
(So potentially this could be two different LWG issues, but it seems nicer to think of them together.)
</p>

<note>2022-05-17; Reflector poll</note>
<p>
Set priority to 2 after reflector poll.
</p>

<note>Kona 2022-11-08; Move to Open</note>
<p>Tim to write a paper</p>

<note>2023-01-16; Tim comments</note>
<p>
The paper <paper num="P2770R0"/> is provided with proposed wording.
</p>

<note>2023-03-22 Resolved by the adoption of <paper num="P2770R0"/> in Issaquah. Status changed: Open &rarr; Resolved.</note>
</discussion>

<resolution>
</resolution>

</issue>
