<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2567" status="New">
<title>Specification of logical operator traits uses <tt>BaseCharacteristic</tt>, which is defined only for <tt>UnaryTypeTraits</tt> 
and <tt>BinaryTypeTraits</tt></title>
<section><sref ref="[meta.logical]"/></section>
<submitter>Tim Song</submitter>
<date>10 Dec 2015</date>
<priority>2</priority>

<discussion>
<p>
The specification of <tt>conjunction</tt> and <tt>disjunction</tt> uses the term <tt>BaseCharacteristic</tt>, which 
is problematic in several ways:
</p>
<ul>
<li><p>That term is defined in <sref ref="[meta.rqmts]"/>, but only for <tt>UnaryTypeTraits</tt> and <tt>BinaryTypeTraits</tt>. 
<tt>conjunction</tt> and <tt>disjunction</tt> seem to be neither.</p></li>
<li><p><sref ref="[meta.rqmts]"/> also requires the <tt>BaseCharacteristic</tt> for both <tt>UnaryTypeTraits</tt> and 
<tt>BinaryTypeTraits</tt> to be a specialization of <tt>integral_constant</tt>, which is inconsistent with the current design of 
<tt>conjunction</tt> and <tt>disjunction</tt>.</p></li>
<li><p>The requirement in <sref ref="[meta.rqmts]"/> that "member names of the <tt>BaseCharacteristic</tt> shall not be hidden 
and shall be unambiguously available" seems impossible to meet in every case, since the arbitrary base class from which a 
specialization of <tt>conjunction</tt> or <tt>disjunction</tt> derives may contain members called <tt>conjunction</tt> or 
<tt>disjunction</tt> that will necessarily be hidden.</p></li>
</ul>
<note>08-2016 - Chicago</note>
<p>Ville provided wording for both <iref ref="2567"/> and <iref ref="2568"/></p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>In [meta.logical]/3, edit as follows:</p>

<p>The <del>BaseCharacteristic of a</del> specialization <tt>conjunction&lt;B1, ..., BN&gt;</tt>
<ins>has a public and unambiguous base that</ins>
is the first type <tt>Bi</tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>Bi::value == false</tt>, or if every <tt>Bi::value != false</tt>, the
<ins>aforementioned base</ins><del>BaseCharacteristic</del> is
the last type in the list.
[ Note: This means a specialization of conjunction does
not necessarily <del>have a BaseCharacteristic
of</del> <ins>derive from</ins> either true_type or
false_type. — end note ]</p>

<p>In [meta.logical]/6, edit as follows:</p>

<p>The <del>BaseCharacteristic of a</del> specialization <tt>disjunction&lt;B1, ..., BN&gt;</tt>
<ins>has a public and unambiguous base that</ins>
is the first type <tt>Bi</tt> in the list <tt>false_type, B1, ..., BN</tt> for
which <tt>Bi::value != false</tt>, or if every <tt>Bi::value == false</tt>, the
<ins>aforementioned base</ins><del>BaseCharacteristic</del> is
the last type in the list.
[ Note: This means a specialization of disjunction does
not necessarily <del>have a BaseCharacteristic
of</del> <ins>derive from</ins> either true_type or
false_type. — end note ]</p>
</blockquote>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>In [meta.logical]/3, edit as follows:</p>

<p>The <del>BaseCharacteristic of a</del> specialization <tt>conjunction&lt;B1, ..., BN&gt;</tt>
<ins>has a public and unambiguous base that is either<br/>
* the first type <tt>Bi</tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>Bi::value == false</tt>, or<br/>
* if there is no such <tt>Bi</tt>, the last type in the list.</ins><br/>
<del>is the first type <tt>Bi</tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>Bi::value == false</tt>, or if every <tt>Bi::value != false</tt>, the
BaseCharacteristic is the last type in the list.</del><br/>
[ Note: This means a specialization of <tt>conjunction</tt> does
not necessarily <del>have a BaseCharacteristic
of</del> <ins>derive from</ins> either true_type or
false_type. — end note ]</p>

<p>In [meta.logical]/6, edit as follows:</p>
<p>The <del>BaseCharacteristic of a</del> specialization <tt>disjunction&lt;B1, ..., BN&gt;</tt>
<ins>has a public and unambiguous base that is either<br/>
* the first type <tt>Bi</tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>Bi::value != false</tt>, or<br/>
* if there is no such <tt>Bi</tt>, the last type in the list.</ins><br/>
<del>is the first type <tt>Bi</tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>Bi::value != false</tt>, or if every <tt>Bi::value == false</tt>, the
BaseCharacteristic is the last type in the list.</del><br/>
[ Note: This means a specialization of <tt>disjunction</tt> does
not necessarily <del>have a BaseCharacteristic
of</del> <ins>derive from</ins> either true_type or
false_type. — end note ]</p></blockquote>
</discussion>

<resolution>
<p>In [meta.logical]/3, edit as follows:</p>

<p>The <del>BaseCharacteristic of a</del> specialization <tt>conjunction&lt;B1, ..., BN&gt;</tt>
<ins>has a public and unambiguous base that is either<br/>
* the first type <tt>Bi</tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>Bi::value == false</tt>, or<br/>
* if there is no such <tt>Bi</tt>, the last type in the list.</ins><br/>
<del>is the first type <tt>Bi</tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>Bi::value == false</tt>, or if every <tt>Bi::value != false</tt>, the
BaseCharacteristic is the last type in the list.</del><br/>
<ins>The member names of the base class, other than <tt>conjunction</tt> and <tt>operator=</tt>,
shall not be hidden and shall be unambiguously available in <tt>conjunction</tt>.</ins><br/>
[ Note: This means a specialization of <tt>conjunction</tt> does
not necessarily <del>have a BaseCharacteristic
of</del> <ins>inherit from</ins> either true_type or
false_type. — end note ]</p>

<p>In [meta.logical]/6, edit as follows:</p>
<p>The <del>BaseCharacteristic of a</del> specialization <tt>disjunction&lt;B1, ..., BN&gt;</tt>
<ins>has a public and unambiguous base that is either<br/>
* the first type <tt>Bi</tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>Bi::value != false</tt>, or<br/>
* if there is no such <tt>Bi</tt>, the last type in the list.</ins><br/>
<del>is the first type <tt>Bi</tt> in the list <tt>true_type, B1, ..., BN</tt> for
which <tt>Bi::value != false</tt>, or if every <tt>Bi::value == false</tt>, the
BaseCharacteristic is the last type in the list.</del><br/>
<ins>The member names of the base class, other than <tt>disjunction</tt> and <tt>operator=</tt>,
shall not be hidden and shall be unambiguously available in <tt>disjunction</tt>.</ins><br/>
[ Note: This means a specialization of <tt>disjunction</tt> does
not necessarily <del>have a BaseCharacteristic
of</del> <ins>inherit from</ins> either true_type or
false_type. — end note ]</p>

</resolution>
</issue>
