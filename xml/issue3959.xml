<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3959" status="New">
<title>Should the comparator of <tt>std::flat_map</tt>/<tt>std::flat_multimap</tt> be copied twice in some operations?</title>
<section><sref ref="[flat.map]"/><sref ref="[flat.multimap]"/></section>
<submitter>Jiang An</submitter>
<date>23 Jul 2023</date>
<priority>3</priority>

<discussion>
<p>
Currently, some operations of <tt>std::flat_map</tt> are specified to construct a <tt>key_equiv</tt> 
object for calling <tt>ranges::unique</tt> to remove duplicated elements. It seems that the comparator 
is required to be copied twice before calling <tt>ranges::unique</tt>.
<p/>
If we make <tt>key_equiv</tt> to an aggregate class, then the comparator will be only copied once. 
Furtherly, if we use a <tt>std::reference_wrapper&lt;const key_compare&gt;</tt> as the member of 
<tt>key_equiv</tt>, then we will be able to avoid copying. Such differences seem to be observable.
<p/>
Should we require to avoid copying, or explicitly say that implementations can either make copies or avoid copying?
<p/>
Likewise, <tt>std::flat_map::value_comp</tt> and <tt>std::flat_multimap::value_comp</tt> seem to be 
required to copy the comparator twice due to the exposition-only constructor of <tt>value_compare</tt>. 
<p/>
Should we make the constructor take a <tt>const</tt> reference?
</p>

<note>2025-10-21; Reflector poll.</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
We should provide blanket wording to specify that comparators,
hashers, allocators, etc. can be copied as often or as little as
needed. Consider generalizing <iref ref="3049"/>.
</p>
</discussion>

<resolution>
</resolution>

</issue>
