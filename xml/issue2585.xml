<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2585" status="C++17">
<title><tt>forward_list::resize(size_type, const value_type&amp;)</tt> effects incorrect</title>
<section><sref ref="[forward.list.modifiers]"/></section>
<submitter>Tim Song</submitter>
<date>14 Jan 2016</date>
<priority>0</priority>

<discussion>
<p>
<sref ref="[forwardlist.modifiers]"/>/29 says that the effects of <tt>forward_list::resize(size_type sz, const value_type&amp; c)</tt> 
are:
</p>
<blockquote class="note"><p>
<i>Effects</i>: If <tt>sz &lt; distance(begin(), end())</tt>, erases the last <tt>distance(begin(), end()) - sz</tt> elements
from the list. Otherwise, inserts <tt>sz - distance(begin(), end())</tt> elements at the end of
the list such that each new element, <tt>e</tt>, is initialized by a method equivalent to calling 
<tt>allocator_traits&lt;allocator_type&gt;::construct(get_allocator(), std::addressof(e), c)</tt>.
</p></blockquote>
<p>
In light of LWG <iref ref="2218"/>, the use of <tt>allocator_traits&lt;allocator_type&gt;::construct</tt> is incorrect, 
as a rebound allocator may be used. There's no need to repeat this information, in any event &mdash; no other specification 
of <tt>resize()</tt> does it.
</p>

<note>2016-02, Issues Telecon</note>
<p>
P0; move to Tentatively Ready.
</p>

<note>2016-02-11, Alisdair requests reopening</note>
<p>
I believe the standard is correct as written, and that by removing the clear direction
to make the copy with uses-allocator-construction, we open ourselves to disputing
this very point again at some point in the future.
<p/>
The issue seems to be complaining that a rebound allocator may be used instead of
the allocator returned by <tt>get_allocator()</tt> call, and nailing us down to exactly which
instantiation of <tt>allocator_traits</tt> is used. Given the requirements on allocators being
constructible from within the same template "family" though, and specifically that
copies compare equal and can allocate/deallocate on each other's behalf, this should
clearly fall under existing as-if freedom. The construct call is even more clear, as
there is no requirement that the allocator to construct be of a kind that can allocate
the specific type being constructed &mdash; a freedom granted precisely so this kind of code
can be written, and be correct, regardless of internal node type of any container and
the actual rebound allocator used internally.
<p/>
I think the new wording is less clear than the current wording, and would prefer to
resolve as NAD.
</p>
</discussion>

<resolution>
<p>
This wording is relative to N4567.
</p>

<ol>
<li><p>Edit <sref ref="[forwardlist.modifiers]"/>/29 as indicated:</p>
<blockquote class="note">
<p>
[<i>Drafting note</i>: "copies of <tt>c</tt>" is the phrase used by <tt>vector::resize</tt> and <tt>deque::resize</tt>.]
</p>
</blockquote>

<blockquote>
<pre>
void resize(size_type sz, const value_type&amp; c);
</pre>
<blockquote>
<p>
-29- <i>Effects</i>: If <tt>sz &lt; distance(begin(), end())</tt>, erases the last <tt>distance(begin(), end()) - sz</tt> elements
from the list. Otherwise, inserts <tt>sz - distance(begin(), end())</tt> <del>elements</del><ins>copies of <tt>c</tt></ins> at 
the end of the list <del>such that each new element, <tt>e</tt>, is initialized by a method equivalent to calling 
<tt>allocator_traits&lt;allocator_type&gt;::construct(get_allocator(), std::addressof(e), c)</tt></del>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
