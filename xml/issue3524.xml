<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3524" status="Resolved">
<title>Unimplementable narrowing and evaluation order requirements for range adaptors</title>
<section><sref ref="[range.adaptors]"/></section>
<submitter>Tim Song</submitter>
<date>19 Feb 2021</date>
<priority>3</priority>

<discussion>
<p>
The specification of various range factory and adaptor objects generally says that some function call 
expression on them is expression-equivalent to an expression that performs list-initialization or in 
some cases a comma expression. This imposes evaluation order requirements that are unlikely to be 
intended and sometimes outright contradictory. For example, <sref ref="[range.drop.overview]"/> says 
that <tt>views::drop(E, F)</tt> is expression-equivalent to "<tt>((void) F, decay-copy(E))</tt>" in 
one case, and <tt>drop_view{E, F}</tt> in another. The first expression requires <tt>F</tt> to be 
sequenced before <tt>E</tt>, while the second expression requires <tt>E</tt> to be sequenced before 
<tt>F</tt>. They can't both hold in the absence of high levels of compiler magic.
<p/>
Additionally, because the core language narrowing check in list-initialization considers the value of 
constant expressions, "expression-equivalent" also requires the constantness to be propagated. For 
example, given a range <tt>E</tt> whose <tt>difference_type</tt> is <tt>int32_t</tt>, 
<tt>views::drop(E, int64_t())</tt> is required to work, but <tt>int64_t l = 0; views::drop(E, l)</tt> 
is required to be ill-formed. This seems unlikely to be the intent either.
</p>

<note>2021-03-12; Reflector poll</note>
<p>
Set priority to 3 following reflector poll.
</p>

<note>2021-06-13 Resolved by the adoption of <paper num="P2367R0"/> at the June 2021 plenary. Status changed: New &rarr; Resolved.</note>
</discussion>

<resolution>
</resolution>

</issue>
