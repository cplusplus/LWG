<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2438" status="C++17">
<title><tt>std::iterator</tt> inheritance shouldn't be mandated</title>
<section><sref ref="[depr.iterator]"/></section>
<submitter>Stephan T. Lavavej</submitter>
<date>1 Oct 2014</date>
<priority>3</priority>

<discussion>
<p>
For LWG convenience, nine STL iterators are depicted as deriving from <tt>std::iterator</tt> to get their 
<tt>iterator_category</tt>/etc. typedefs. Unfortunately (and unintentionally), this also mandates the 
inheritance, which is observable (not just through <tt>is_base_of</tt>, but also overload resolution). 
This is unfortunate because it confuses users, who can be misled into thinking that their own iterators 
must derive from <tt>std::iterator</tt>, or that overloading functions to take <tt>std::iterator</tt> is 
somehow meaningful. This is also unintentional because the STL's most important iterators, the container 
iterators, aren't required to derive from <tt>std::iterator</tt>. (Some are even allowed to be raw pointers.)  
Finally, this unnecessarily constrains implementers, who may not want to derive from <tt>std::iterator</tt>.  
(For example, to simplify debugger views.)
<p/>
We could add wording to <sref ref="[iterator.basic]"/> saying that any depicted inheritance is for exposition 
only, but that wouldn't really solve reader confusion. Replacing the depicted inheritance with direct typedefs 
will prevent confusion. Note that implementers won't be required to change their code &mdash; they are free to 
continue deriving from <tt>std::iterator</tt> if they want.
<p/>
(Editorial note: The order of the typedefs follows the order of <tt>std::iterator</tt>'s template parameters.)
</p>

<note>Urbana 2014-11-07: Move to Ready</note>

</discussion>

<resolution>
<p>
This wording is relative to N3936.
</p>

<ol>
<li><p>Change <sref ref="[storage.iterator]"/>, class template <tt>raw_storage_iterator</tt> synopsis, as depicted:</p>

<blockquote>
<pre>
template &lt;class OutputIterator, class T&gt;
class raw_storage_iterator
  <del>: public iterator&lt;output_iterator_tag,void,void,void,void&gt;</del> {
public:
  <ins>typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;</ins>

  explicit raw_storage_iterator(OutputIterator x);
  [&hellip;]
};
</pre>
</blockquote></li>

<li><p>Change <sref ref="[reverse.iterator]"/>, class template <tt>reverse_iterator</tt> synopsis, as depicted
(editorial note: this reorders "<tt>reference</tt>, <tt>pointer</tt>" to "<tt>pointer</tt>, <tt>reference</tt>" 
and aligns whitespace):</p>

<blockquote>
<pre>
template &lt;class Iterator&gt;
class reverse_iterator <del>: public 
  iterator&lt;typename iterator_traits&lt;Iterator&gt;::iterator_category,
  typename iterator_traits&lt;Iterator&gt;::value_type,
  typename iterator_traits&lt;Iterator&gt;::difference_type,
  typename iterator_traits&lt;Iterator&gt;::pointer,
  typename iterator_traits&lt;Iterator&gt;::reference&gt;</del> {
public:
  <del>typedef Iterator iterator_type;
  typedef typename iterator_traits&lt;Iterator&gt;::difference_type difference_type;
  typedef typename iterator_traits&lt;Iterator&gt;::reference reference;
  typedef typename iterator_traits&lt;Iterator&gt;::pointer pointer;</del>
  <ins>typedef Iterator                                              iterator_type;
  typedef typename iterator_traits&lt;Iterator&gt;::iterator_category iterator_category;
  typedef typename iterator_traits&lt;Iterator&gt;::value_type        value_type;
  typedef typename iterator_traits&lt;Iterator&gt;::difference_type   difference_type;
  typedef typename iterator_traits&lt;Iterator&gt;::pointer           pointer;
  typedef typename iterator_traits&lt;Iterator&gt;::reference         reference;</ins>

  reverse_iterator();
  [&hellip;]
};
</pre>
</blockquote></li>

<li><p>Change <sref ref="[back.insert.iterator]"/>, class template <tt>back_insert_iterator</tt> synopsis, as depicted:</p>

<blockquote>
<pre>
template &lt;class Container&gt;
class back_insert_iterator <del>: 
  public iterator&lt;output_iterator_tag,void,void,void,void&gt;</del> {
protected:
  Container* container;

public:
  <ins>typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;</ins>
  typedef Container container_type;
  explicit back_insert_iterator(Container&amp; x);
  [&hellip;]
};
</pre>
</blockquote></li>

<li><p>Change <sref ref="[front.insert.iterator]"/>, class template <tt>front_insert_iterator</tt> synopsis, as depicted:</p>

<blockquote>
<pre>
template &lt;class Container&gt;
class front_insert_iterator <del>: 
  public iterator&lt;output_iterator_tag,void,void,void,void&gt;</del> {
protected:
  Container* container;

public:
  <ins>typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;</ins>
  typedef Container container_type;
  explicit front_insert_iterator(Container&amp; x);
  [&hellip;]
};
</pre>
</blockquote></li>

<li><p>Change <sref ref="[insert.iterator]"/>, class template <tt>insert_iterator</tt> synopsis, as depicted:</p>

<blockquote>
<pre>
template &lt;class Container&gt;
class insert_iterator <del>: 
  public iterator&lt;output_iterator_tag,void,void,void,void&gt;</del> {
protected:
  Container* container;
  typename Container::iterator iter;

public:
  <ins>typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;</ins>
  typedef Container container_type;
  insert_iterator(Container&amp; x, typename Container::iterator i);
  [&hellip;]
};
</pre>
</blockquote></li>

<li><p>Change <sref ref="[istream.iterator]"/>, class template <tt>istream_iterator</tt> synopsis, as depicted:</p>

<blockquote>
<pre>
template &lt;class T, class charT = char, class traits = char_traits&lt;charT&gt;,
  class Distance = ptrdiff_t&gt;
class istream_iterator <del>: 
  public iterator&lt;input_iterator_tag, T, Distance, const T*, const T&amp;&gt;</del> {
public:
  <ins>typedef input_iterator_tag iterator_category;
  typedef T value_type;
  typedef Distance difference_type;
  typedef const T* pointer;
  typedef const T&amp; reference;</ins>
  [&hellip;]
};
</pre>
</blockquote></li>

<li><p>Change <sref ref="[ostream.iterator]"/>, class template <tt>ostream_iterator</tt> synopsis, as depicted:</p>

<blockquote>
<pre>
template &lt;class T, class charT = char, class traits = char_traits&lt;charT&gt;&gt;
class ostream_iterator <del>: 
  public iterator&lt;output_iterator_tag, void, void, void, void&gt;</del> {
public:
  <ins>typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;</ins>
  [&hellip;]
};
</pre>
</blockquote></li>

<li><p>Change <sref ref="[istreambuf.iterator]"/>, class template <tt>istreambuf_iterator</tt> synopsis, as depicted:</p>

<blockquote>
<pre>
template &lt;class charT = char, class traits = char_traits&lt;charT&gt; &gt;
class istreambuf_iterator <del>: 
  public iterator&lt;input_iterator_tag, charT,
                  typename traits::off_type, <em>unspecified</em>, charT&gt;</del> {
public:
  <ins>typedef input_iterator_tag iterator_category;
  typedef charT value_type;
  typedef typename traits::off_type difference_type;
  typedef <em>unspecified</em> pointer;
  typedef charT reference;</ins>
  [&hellip;]
};
</pre>
</blockquote></li>

<li><p>Change <sref ref="[ostreambuf.iterator]"/>, class template <tt>ostreambuf_iterator</tt> synopsis, as depicted 
(editorial note: this removes a redundant "public:"):</p>

<blockquote>
<pre>
template &lt;class charT = char, class traits = char_traits&lt;charT&gt;&gt;
class ostreambuf_iterator <del>: 
  public iterator&lt;output_iterator_tag, void, void, void, void&gt;</del> {
public:
  <ins>typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;</ins>
  [&hellip;]
<del>public:</del>
  [&hellip;]
};
</pre>
</blockquote></li>
</ol>

</resolution>

</issue>
