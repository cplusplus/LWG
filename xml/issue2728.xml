<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2728" status="C++17">
<title><tt>status(p).permissions()</tt> and <tt>symlink_status(p).permissions()</tt> are not specified</title>
<section><sref ref="[fs.op.status]"/><sref ref="[fs.op.symlink.status]"/></section>
<submitter>Eric Fiselier</submitter>
<date>19 Jun 2016</date>
<priority>0</priority>

<discussion>
<p>
The current specification for  <tt>status(p)</tt> and <tt>symlink_status(p)</tt>
omits any mention on setting <tt>permissions()</tt> on the returned <tt>file_status</tt>.
Obviously they should be set, but as currently specified the 
<tt>permissions()</tt> will always be <tt>perms::unknown</tt>.
</p>

<note>2016-06, Oulu</note>
<p>
<iref ref="2720"/> is a related issue.
</p>

<note>2016-06 Oulu</note>
<p>Moved to P0/Ready during issues prioritization.</p>
<p>Friday: status to Immediate</p>
</discussion>

<resolution>
<p>
This wording is relative to N4594.
</p>

<ol>
<li><p>Change <sref ref="[fs.op.status]"/> as indicated:</p>
<blockquote>
<pre>
file_status status(const path&amp; p, error_code&amp; ec) noexcept;
</pre>
<blockquote>
<p>
-4- <i>Effects:</i> If possible, determines the attributes of the file <tt>p</tt>
    resolves to, as if by <del> POSIX <tt>stat()</tt>.</del><ins>using POSIX <tt>stat()</tt>
    to obtain a POSIX <tt>struct stat</tt>.</ins>. [&hellip;]
<p/>
<ins>-?- Let <tt>prms</tt> denote the result of <tt>(m &amp; perms::mask)</tt>, where
<tt>m</tt> is determined as if by converting the <tt>st_mode</tt> member of the
obtained <tt>struct stat</tt> to the type <tt>perms</tt>.</ins>
<p/>
-5- <i>Returns:</i> 
    <p/>
<ul>
    <li><p>If <tt>ec != error_code()</tt>: <p/>
        <ul><li><p>[&hellip;]</p></li></ul>
    </p>
    </li>
    <li><p>Otherwise<p/>
        <ul>
            <li><p>
                If the attributes indicate a regular file, as if by POSIX <tt>S_ISREG</tt>, returns
                <tt>file_status(file_type::regular<ins>, prms</ins>)</tt>. [&hellip;]
            </p></li>
            <li><p>
                Otherwise, if the attributes indicate a directory, as if by POSIX <tt>S_ISDIR</tt>, returns
                <tt>file_status(file_type::directory<ins>, prms</ins>)</tt>. [&hellip;]
            </p></li>
            <li><p>
                Otherwise, if the attributes indicate a block special file, as if by POSIX <tt>S_ISBLK</tt>, returns
                <tt>file_status(file_type::block<ins>, prms</ins>)</tt>.
            </p></li>
            <li><p>
                Otherwise, if the attributes indicate a character special file, as if by POSIX <tt>S_ISCHR</tt>, returns
                <tt>file_status(file_type::character<ins>, prms</ins>)</tt>.
            </p></li>
            <li><p>
                Otherwise, if the attributes indicate a fifo or pipe file, as if by POSIX <tt>S_ISFIFO</tt>, returns
                <tt>file_status(file_type::fifo<ins>, prms</ins>)</tt>.
            </p></li>
            <li><p>
                Otherwise, if the attributes indicate a socket, as if by POSIX <tt>S_ISSOCK</tt>, returns
                <tt>file_status(file_type::socket<ins>, prms</ins>)</tt>.
            </p></li>
             <li><p>
                Otherwise, returns <tt>file_status(file_type::unknown<ins>, prms</ins>)</tt>.
            </p></li>
        </ul>
    </p></li>
</ul>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Change <sref ref="[fs.op.symlink_status]"/> as indicated:</p>
<blockquote>
<pre>
file_status symlink_status(const path&amp; p);
file_status symlink_status(const path&amp; p, error_code&amp; ec) noexcept;
</pre>
<blockquote>
<p>
-1- <i>Effects:</i> Same as <tt>status()</tt>, above, except that the attributes
of <tt>p</tt> are determined as if by <del>POSIX <tt>lstat()</tt></del>
<ins>using POSIX <tt>lstat()</tt> to obtain a POSIX <tt>struct stat</tt></ins>.
<p/>
<ins>-?- Let <tt>prms</tt> denote the result of <tt>(m &amp; perms::mask)</tt>, where
<tt>m</tt> is determined as if by converting the <tt>st_mode</tt> member of the
obtained <tt>struct stat</tt> to the type <tt>perms</tt>.</ins>
<p/>
-2- <i>Returns:</i> Same as <tt>status()</tt>, above, except that if the
attributes indicate a symbolic link, as if by POSIX <tt>S_ISLNK</tt>,
returns <tt>file_status(file_type::symlink<ins>, prms</ins>)</tt>. The signature
with argument <tt>ec</tt> returns <tt>file_status(file_type::none)</tt> if an error occurs.

</p>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
