<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4220" status="New">
<title><code>join_view</code> incorrectly stores inner range</title>
<section>
<sref ref="[range.join.view]"/><sref ref="[range.join.with.view]"/>
</section>
<submitter>Hewill Kang</submitter>
<date>06 Mar 2025</date>
<priority>3</priority>

<discussion>
<p>
When the inner range is a prvalue, <code>join_view</code> removes its <i>cv</i>-qualifiers
and stores it in the <code><i>propagating-cache</i></code>, which is not quite right as the inner range may
only be const-iterable (<a href="https://godbolt.org/z/qY1bhExzG">demo</a>):
</p>
<blockquote><pre>
#include &lt;ranges&gt;

struct R {
  int* begin() = delete;
  int* end() = delete;
  const int* begin() const;
  const int* end() const;
};

int main() {
  auto r = std::views::iota(0, 5)
         | std::views::transform([](int) -> const R { return {}; })
         | std::views::join;
  auto b = r.begin(); // <span style="color:red;font-weight:bolder">hard error</span>
}
</pre></blockquote>
<p>
The proposed resolution preserves the inner range's original qualifiers, which is consistent with how
<code>cache_latest_view</code> stores the reference when it is a prvalue.
The same goes for <code>join_with_view</code>.
</p>

<note>2025-10-23; Reflector poll.</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
Lot of NAD votes. This type satisfies, but does not model
range.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5001"/>.
</p>

<ol>

<li><p>Modify <sref ref="[range.join.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range V&gt;
    requires view&lt;V&gt; &amp;&amp; input_range&lt;range_reference_t&lt;V&gt;&gt;&gt;
  class join_view : public view_interface&lt;join_view&lt;V&gt;&gt; {
  private:
    using <i>InnerRng</i> = range_reference_t&lt;V&gt;;                  // <i>exposition only</i>
    [&hellip;]
    <i>non-propagating-cache</i>&lt;<del>remove_cv_t&lt;</del><i>InnerRng</i><del>&gt;</del>&gt; <i>inner_</i>;    // <i>exposition only, present only</i>
                                                            // <i>if is_reference_v&lt;<i>InnerRng</i>&gt; is false</i>

  public:
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.join.with.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;input_range V, forward_range Pattern&gt;
    requires view&lt;V&gt; &amp;&amp; input_range&lt;range_reference_t&lt;V&gt;&gt;
          &amp;&amp; view&lt;Pattern&gt;
          &amp;&amp; <i>concatable</i>&lt;range_reference_t&lt;V&gt;, Pattern&gt;
  class join_with_view : public view_interface&lt;join_with_view&lt;V, Pattern&gt;&gt; {
    using <i>InnerRng</i> = range_reference_t&lt;V&gt;;                 // <i>exposition only</i>
    [&hellip;]
    <i>non-propagating-cache</i>&lt;<del>remove_cv_t&lt;</del><i>InnerRng</i><del>&gt;</del>&gt; <i>inner_</i>;   // <i>exposition only, present only</i>
                                                           // <i>if is_reference_v&lt;<i>InnerRng</i>&gt; is false</i>

    [&hellip;]
  public:
    [&hellip;]
  };
  [&hellip;]
}

</pre>
</blockquote>
</li>
</ol>

</resolution>

</issue>
