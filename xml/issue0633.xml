<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="633" status="NAD Editorial">
<title>Return clause mentions undefined "type()"</title>
<section><sref ref="[func.wrap.func.targ]"/></section>
<submitter>Daniel Kr&uuml;gler</submitter>
<date>3 Feb 2007</date>

<discussion>
<p>
<sref ref="[func.wrap.func.targ]"/>, p4 says:
</p>
<blockquote><p>
<i>Returns:</i> If <tt>type() == typeid(T)</tt>, a pointer to the stored
function target; otherwise a null pointer.
</p></blockquote>

<ol>
<li>
There exists neither a type, a typedef <tt>type</tt>, nor member
function <tt>type()</tt> in class template function nor in the global or
<tt>std</tt> namespace.
</li>
<li>
Assuming that <tt>type</tt> should have been <tt>target_type()</tt>,
this description would lead to false results, if <tt>T = <i>cv</i>
void</tt> due to returns clause <sref ref="[func.wrap.func.targ]"/>, p1.
</li>
</ol>

</discussion>

<resolution>
<p>
Change <sref ref="[func.wrap.func.targ]"/>, p4:
</p>

<blockquote><p>
<i>Returns:</i> If <tt><del>type()</del> <ins>target_type()</ins> == typeid(T) <ins>&amp;&amp; typeid(T) !=
typeid(void)</ins></tt>, a pointer to the stored function target;
otherwise a null pointer.
</p></blockquote>

<note>
Pete: Agreed. It's editorial, so I'll fix it.
</note>

</resolution>

</issue>
