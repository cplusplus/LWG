<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3325" status="C++20">
<title>Constrain return type of transformation function for <tt>transform_view</tt></title>
<section><sref ref="[range.transform.view]"/></section>
<submitter>United States</submitter>
<date>06 Nov 2019</date>
<priority>0</priority>

<discussion>
<p><b>Addresses <a href="https://github.com/cplusplus/nbballot/issues/299">US 303</a></b></p>

<p>
The <tt>transform_view</tt> does not constrain the return type of the transformation function. It
is invalid to pass a <tt>void</tt>-returning transformation function to the <tt>transform_view</tt>, 
which would cause its <tt>iterator</tt>s' <tt>operator*</tt> member to return <tt>void</tt>.
<p/>
Proposed change:
</p>
<p>
Change the constraints on <tt>transform_view</tt> to the following:
</p>
<blockquote><pre>
template&lt;input_range V, copy_constructible F&gt;
  requires view&lt;V&gt; &amp;&amp; is_object_v&lt;F&gt; &amp;&amp;
           regular_invocable&lt;F&amp;, range_reference_t&lt;V&gt;&gt; &amp;&amp;
           <i>can-reference</i>&lt;invoke_result_t&lt;F&amp;, range_reference_t&lt;V&gt;&gt;&gt;
class transform_view;
</pre></blockquote>
<p>
<b>Jonathan Wakely:</b>
<p/>
The NB comment says "The <tt>transform_view</tt> does not constrain the return type of the transformation 
function. It is invalid to pass a <tt>void</tt>-returning transformation function to the <tt>transform_view</tt>, 
which would cause its <tt>iterator</tt>s' <tt>operator*</tt> member to return <tt>void</tt>."
</p>

<note>2019-11 Status to Ready during Wednesday night issue processing in Belfast.</note>
</discussion>

<resolution>
<p>This wording is relative to <a href="https://wg21.link/n4835">N4835</a>.</p>

<ol>
<li><p>Modify <sref ref="[range.transform.view]"/>, class template <tt>transform_view</tt> synopsis, 
as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range V, copy_constructible F&gt;
    requires view&lt;V&gt; &amp;&amp; is_object_v&lt;F&gt; &amp;&amp;
             regular_invocable&lt;F&amp;, range_reference_t&lt;V&gt;&gt; <ins>&amp;&amp;
             <i>can-reference</i>&lt;invoke_result_t&lt;F&amp;, range_reference_t&lt;V&gt;&gt;&gt;</ins>
  class transform_view : public view_interface&lt;transform_view&lt;V, F&gt;&gt; {
    [&hellip;]
  };
[&hellip;]
}
</pre>
</blockquote>
</li>

</ol>

</resolution>
</issue>
