<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3088" status="New">
<title><tt>forward_list::merge</tt> behavior unclear when passed <tt>*this</tt></title>
<section><sref ref="[forward.list.ops]"/></section>
<submitter>Tim Song</submitter>
<date>19 Mar 2018</date>
<priority>3</priority>

<discussion>
<p>
LWG <iref ref="300"/> changed <tt>list::merge</tt> to be a no-op when passed <tt>*this</tt>, but there's
no equivalent rule for <tt>forward_list::merge</tt>.
Presumably the <tt>forward_list</tt> proposal predated the adoption of LWG 300's PR and was never updated
for the change. Everything in the discussion of that issue applies mutatis mutandis to the current
specification of <tt>forward_list::merge</tt>.
</p>

<note>2018-06-18 after reflector discussion</note>
<p>Priority set to 3</p>

<note>2019-07-30 Tim provides updated PR</note>
<p>Per the comments during issue prioritization, the new PR tries to synchronize the wording
between <tt>list::merge</tt> and <tt>forward_list::merge</tt>.</p>
<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>This wording is relative to <a href="https://wg21.link/n4727">N4727</a>.</p>

<ol>
<li><p>Edit <sref ref="[forwardlist.ops]"/> as indicated:</p>
<blockquote>
<pre>
void merge(forward_list&amp; x);
void merge(forward_list&amp;&amp; x);
template&lt;class Compare&gt; void merge(forward_list&amp; x, Compare comp);
template&lt;class Compare&gt; void merge(forward_list&amp;&amp; x, Compare comp);
</pre>
<blockquote>
<p>
-20- <i>Requires:</i> <tt>*this</tt> and <tt>x</tt> are both sorted with respect to the comparator
<tt>operator&lt;</tt> (for the first two overloads) or <tt>comp</tt> (for the last two overloads),
and <tt>get_allocator() == x.get_allocator()</tt> is <tt>true</tt>.
<p/>
-21- <i>Effects:</i> <ins>If <tt>addressof(x) == this</tt>, does nothing. Otherwise,
m</ins><del>M</del>erges the two sorted ranges <tt>[begin(), end())</tt> and <tt>[x.begin(), x.end())</tt>.
<ins>The result is a range that is sorted with respect to the comparator <tt>operator&lt;</tt>
(for the first two overloads) or <tt>comp</tt> (for the last two overloads).</ins> <tt>x</tt> is
empty after the merge. If an exception is thrown other than by a comparison there are no effects.
Pointers and references to the moved elements of <tt>x</tt> now refer to those same elements but
as members of <tt>*this</tt>. Iterators referring to the moved elements will continue to refer to
their elements, but they now behave as iterators into <tt>*this</tt>, not into <tt>x</tt>.
<p/>
-22- <i>Remarks:</i> Stable (<sref ref="[algorithm.stable]"/>). The behavior is undefined if
<tt>get_allocator() != x.get_allocator()</tt>.
<p/>
-23- <i>Complexity:</i> At most <tt>distance(begin(), end()) + distance(x.begin(), x.end()) - 1</tt>
comparisons <ins>if <tt>addressof(x) != this</tt>; otherwise, no comparisons are performed</ins>.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>
<note>2021-05-22 Tim syncs wording to the current working draft</note>
</discussion>

<resolution>
<p>This wording is relative to <paper num="N4901"/>.</p>

<ol>
<li><p>Edit <sref ref="[forward.list.ops]"/> as indicated:</p>
<blockquote>
<pre>
void merge(forward_list&amp; x);
void merge(forward_list&amp;&amp; x);
template&lt;class Compare&gt; void merge(forward_list&amp; x, Compare comp);
template&lt;class Compare&gt; void merge(forward_list&amp;&amp; x, Compare comp);
</pre>
<blockquote>
<p>
<ins>-?- Let <tt>comp</tt> be <tt>less&lt;&gt;{}</tt> for the first two overloads.</ins>
<p/>
-24- <i>Preconditions:</i> <tt>*this</tt> and <tt>x</tt> are both sorted with respect to the comparator
<del><tt>operator&lt;</tt> (for the first two overloads) or</del> <tt>comp</tt>
<del> (for the last two overloads)</del>,
and <tt>get_allocator() == x.get_allocator()</tt> is <tt>true</tt>.
<p/>
-25- <i>Effects:</i> <ins>If <tt>addressof(x) == this</tt>, there are no effects. Otherwise,
m</ins><del>M</del>erges the two sorted ranges <tt>[begin(), end())</tt> and <tt>[x.begin(), x.end())</tt>.
<ins>The result is a range that is sorted with respect to the comparator <tt>comp</tt>.</ins> <del><tt>x</tt> is
empty after the merge. If an exception is thrown other than by a comparison there are no effects.</del>
Pointers and references to the moved elements of <tt>x</tt> now refer to those same elements but
as members of <tt>*this</tt>. Iterators referring to the moved elements will continue to refer to
their elements, but they now behave as iterators into <tt>*this</tt>, not into <tt>x</tt>.
<p/>
-26- <i>Complexity:</i> At most <tt>distance(begin(), end()) + distance(x.begin(), x.end()) - 1</tt>
comparisons <ins>if <tt>addressof(x) != this</tt>; otherwise, no comparisons are performed</ins>.
<p/>
-27- <i>Remarks:</i> Stable (<sref ref="[algorithm.stable]"/>). <ins>If <tt>addressof(x) != this</tt>,
<tt>x</tt> is empty after the merge. No elements are copied by this operation.
If an exception is thrown other than by a comparison there are no effects.</ins>
</p>
</blockquote>
</blockquote>
</li>
<li><p>Edit <sref ref="[list.ops]"/> as indicated:</p>
<blockquote>
<pre>
void merge(list&amp; x);
void merge(list&amp;&amp; x);
template&lt;class Compare&gt; void merge(list&amp; x, Compare comp);
template&lt;class Compare&gt; void merge(list&amp;&amp; x, Compare comp);
</pre>
<blockquote>
<p>
<ins>-?- Let <tt>comp</tt> be <tt>less&lt;&gt;{}</tt> for the first two overloads.</ins>
<p/>
-26- <i>Preconditions:</i> <del>Both the list and the argument list shall be</del><ins><tt>*this</tt> and <tt>x</tt> are both</ins>
sorted with respect to the comparator <del><tt>operator&lt;</tt>
(for the first two overloads) or </del><tt>comp</tt><del> (for the last two overloads)</del>, and
<tt>get_allocator() == x.get_allocator()</tt> is <tt>true</tt>.
<p/>
-27- <i>Effects:</i> If <tt>addressof(x) == this</tt>, <del>does nothing; o</del><ins>there are no effects. O</ins>therwise,
merges the two sorted ranges <tt>[begin(), end())</tt> and <tt>[x.begin(), x.end())</tt>.
The result is a range <del>in which the elements will be sorted in non-decreasing order according to the ordering
defined by <tt>comp</tt>; that is, for every iterator <tt>i</tt>, in the range other than the first, the condition
<tt>comp(*i, *(i - 1))</tt> will be <tt>false</tt></del><ins>that is sorted with respect to the comparator
<tt>comp</tt></ins>. Pointers and references to the moved elements of <tt>x</tt> now refer to those same elements
but as members of <tt>*this</tt>. Iterators referring to the moved elements will continue to refer to their elements,
but they now behave as iterators into <tt>*this</tt>, not into <tt>x</tt>.
<p/>
-28- <i>Complexity:</i> At most <tt>size() + x.size() - 1</tt> <del>applications of <tt>comp</tt></del><ins>comparisons</ins>
if <tt>addressof(x) != this</tt>; otherwise, no <del>applications of <tt>comp</tt></del><ins>comparisons</ins> are performed.
<del>If an exception is thrown other than by a comparison there are no effects.</del><p/>
-29- <i>Remarks:</i> Stable (<sref ref="[algorithm.stable]"/>). If <tt>addressof(x) != this</tt>, <del>the range
<tt>[x.begin(), x.end())</tt></del><ins><tt>x</tt></ins> is empty after the merge. No elements are copied by this operation.
<ins>If an exception is thrown other than by a comparison there are no effects.</ins>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
