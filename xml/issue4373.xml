<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4373" status="New">
<title>`function_ref` should provide `result_type`</title>
<section>
<sref ref="[func.wrap.ref.class]"/>
</section>
<submitter>Hewill Kang</submitter>
<date>12 Sep 2025</date>
<priority>3</priority>

<discussion>
<p>
Currently, `function`, `move_only_function`, and `copyable_function` all have a
type member `result_type`, but `function_ref` does not:
</p>
<blockquote>
<pre>
static_assert(is_same_v&lt;          function    &lt;int(int)&gt;::result_type, int&gt;);
static_assert(is_same_v&lt;move_only_function    &lt;int(int)&gt;::result_type, int&gt;);
static_assert(is_same_v&lt; copyable_function    &lt;int(int)&gt;::result_type, int&gt;);
static_assert(is_same_v&lt;          function_ref&lt;int(int)&gt;::result_type, int&gt;); // <span style="color:#C80000;font-weight:bold">error</span>
</pre>
</blockquote>
<p>
It seems worthwhile to also provide it for the latter, as it is consistent with the other
wrappers and allows the user to easily extract the return type.
</p>

<note>2025-10-03; Hewill comments</note>
<p>
Additionally, given that some third-party implementations also provide a mechanism for
extracting the return type, for example, `type_safe::function_ref` provides a public member
type alias
<a
   href="https://github.com/foonathan/type_safe/blob/cdf334cd8e5fcb5e21ab470decdfcbd190ef7347/include/type_safe/reference.hpp#L566">
<code>return_type</code></a>, and `llvm::function_ref` can work with
<a
   href="https://github.com/llvm/llvm-project/blob/cd32b9b6c3b2fda3a781d9ce0a0cf8e21c9d0137/llvm/include/llvm/ADT/STLExtras.h#L67">
<code>llvm::function_traits</code></a> to obtain the return type, providing such a member
type alias for `std::function_ref` meets user potential demands.
</p>

<note>2025-10-22; Reflector poll.</note>
<p>
Set priority to 3 after reflector poll.
</p>
<p>
Alternative (with incoming paper targeting LEWG) of deprecating
<tt>result_type</tt> in existing wrappers was suggested.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5014"/>.
</p>

<ol>

<li><p>Modify <sref ref="[func.wrap.ref.class]"/> as indicated:</p>

<blockquote>
<pre>
namespace std {
  template&lt;class R, class... ArgTypes&gt;
  class function_ref&lt;R(ArgTypes...) <i>cv</i> noexcept(<i>noex</i>)&gt; {
  public:
    <ins>using result_type = R;</ins>

    // <i><sref ref="[func.wrap.ref.ctor]"/>, constructors and assignment operators</i>
    template&lt;class F&gt; function_ref(F*) noexcept;
    [&hellip;]
  };

}
</pre>
</blockquote>

</li>

</ol></resolution>

</issue>
