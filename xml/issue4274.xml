<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4274" status="Voting">
<title>The `chrono::hh_mm_ss` constructor is ill-formed for unsigned durations</title>
<section>
<sref ref="[time.hms.members]"/>
</section>
<submitter>Michael Welsh Duggan</submitter>
<date>04 Jun 2025</date>
<priority>99</priority>

<discussion>
<p>
In <sref ref="[time.hms.members]"/>, paragraph 3, the current wording for the
constructor of `hh_mm_ss` expresses some of its requirements in terms of
`abs(d)`, which is assumed to be `chrono::abs(chrono::duration)`.
`chrono::abs` is not defined, however, for durations with an unsigned
representation. I believe that not being able to create `hh_mm_ss`
objects from unsigned durations is unintentional.
<p/>
Moreover, <tt>is_constructible_v&lt;hh_mm_ss&lt;ud&gt;, ud&gt;</tt> is required 
to be true by the standard for any duration, so making it actually work makes 
a lot of sense.
</p>

<note>2025-06-13; Reflector poll</note>
<p>
Set status to Tentatively Ready after five votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5008"/>.
</p>

<ol>
<li><p>Modify <sref ref="[time.hms.members]"/> as indicated:</p>

<blockquote>
<pre>
constexpr explicit hh_mm_ss(Duration d);
</pre>
<blockquote>
<p>
-3- <i>Effects</i>: Constructs an object of type `hh_mm_ss` which represents the `Duration d` 
with precision `precision`.
</p>
<ol style="list-style-type: none">
<li><p>(3.1) &mdash; Initializes `is_neg` with <tt>d &lt; Duration::zero()</tt>. <ins>Let 
<tt><i>ABS_D</i></tt> represent `-d` if `is_neg` is `true` and `d` otherwise.</ins></p></li>
<li><p>(3.2) &mdash; Initializes `h` with <tt>duration_cast&lt;chrono::hours&gt;(<del>abs(d)</del><ins><i>ABS_D</i></ins>)</tt>.</p></li>
<li><p>(3.3) &mdash; Initializes `m` with <tt>duration_cast&lt;chrono::minutes&gt;(<del>abs(d)</del><ins><i>ABS_D</i></ins> - hours())</tt>.</p></li>
<li><p>(3.4) &mdash; Initializes `s` with <tt>duration_cast&lt;chrono::seconds&gt;(<del>abs(d)</del><ins><i>ABS_D</i></ins> - hours() - minutes())</tt>.</p></li>
<li><p>(3.5) &mdash; If <tt>treat_as_floating_point_v&lt;precision::rep&gt;</tt> is `true`, initializes 
`ss` with <tt><del>abs(d)</del><ins><i>ABS_D</i></ins> - hours() - minutes() - seconds()</tt>. Otherwise, initializes `ss` with 
<tt>duration_cast&lt;precision&gt;(<del>abs(d)</del><ins><i>ABS_D</i></ins> - hours() - minutes() - seconds())</tt>.</p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
