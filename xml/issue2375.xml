<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2375" status="Resolved">
<title>Is [iterator.requirements.general]/9 too broadly applied?</title>
<section><sref ref="[iterator.requirements.general]"/></section>
<submitter>Marshall Clow</submitter>
<date>25 Mar 2014</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[iterator.requirements.general]"/> p9 says:
</p>
<blockquote><p>
Destruction of an iterator may invalidate pointers and references previously obtained from that iterator.
</p></blockquote>
<p>
But the resolution of LWG issue <iref ref="2360"/> specifically advocates returning <tt>*--temp;</tt> where <tt>temp</tt> is a 
local variable.
<p/>
And <sref ref="[forward.iterators]"/> p6 says:
</p>
<blockquote><p>
If <tt>a</tt> and <tt>b</tt> are both dereferenceable, then <tt>a == b</tt> if and only if <tt>*a</tt> and <tt>*b</tt> are bound 
to the same object.
</p></blockquote>
<p>
which disallows "stashing" iterators (i.e, iterators that refer to data inside themselves).
<p/>
So, I suspect that the restriction in p9 should only apply to input iterators, and can probably be moved into 
<sref ref="[input.iterators]"/> instead of <sref ref="[iterator.requirements.general]"/>.
</p>

<note>2014-05-22, Daniel comments</note>

<p>
Given that forward iterators (and beyond) are refinements of input iterator, moving this constraint to input iterators won't help
much because it would still hold for all refined forms. 
</p>

<note>2021-06-23 Resolved by adoption of <paper num="P0896R4"/> in San Diego. Status changed: New &rarr; Resolved.</note>
</discussion>

<resolution>
</resolution>

</issue>
