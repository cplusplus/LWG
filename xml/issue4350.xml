<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4350" status="New">
<title>Should flat adaptors use `insert_range` when available?</title>
<section>
<sref ref="[flat.map]"/>
<sref ref="[flat.multimap]"/>
<sref ref="[flat.set]"/>
<sref ref="[flat.multiset]"/>
</section>
<submitter>Jonathan Wakely</submitter>
<date>05 Sep 2025</date>
<priority>2</priority>

<discussion>
<p>
As specified in <sref ref="[queue.mod]"/>,
`std::queue::push_range` is guaranteed to use `c.append_range` if that exists.
For `flat_map` and its flat friends, we only ever use `c.insert` and never try
to use `c.insert_range`, `c.append_range`, etc.
LWG thinks the "as if by" wording allows implementations to use `insert_range`
when the container type being adapted is `std::vector` but not for user-defined
containers.
Should the flat adaptors follow `std::queue` and guarantee that they will use
the `xxx_range` member if they exist?
That would mean that user containers need to ensure that any member functions
with those names must behave as expected, but we already require that for
`std::queue`.
</p>

<note>2025-10-21; Reflector poll.</note>
<p>
Set priority to 2 after reflector poll.
</p>
<p>
Use <tt>append_range</tt> to be consitient with other adapters.
Send to LEWG for confirmation.
</p>
</discussion>

<resolution>
<p>
</p>
</resolution>

</issue>
