<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3408" status="Resolved">
<title>LWG 3291 reveals deficiencies in <tt>counted_iterator</tt></title>
<section><sref ref="[counted.iterator]"/></section>
<submitter>Patrick Palka</submitter>
<date>25 Feb 2020</date>
<priority>2</priority>

<discussion>
<p>
LWG <iref ref="3291"/> makes changes to <tt>iota_view</tt> so that it no longer falsely claims
it's a C++17 forward iterator. A side effect of this change is that the <tt>counted_iterator</tt>
of an <tt>iota_view</tt> can no longer model <tt>forward_iterator</tt>, no matter what the
properties of the underlying <tt>weakly_incrementable</tt> type are. For example, the following
snippet is ill-formed after LWG 3291:
</p>
<blockquote><pre>
auto v = views::iota(0);
auto i = counted_iterator{v.begin(), 5};
static_assert(random_access_iterator&lt;decltype(i)&gt;); // fails after LWG 3291
</pre></blockquote>
<p>
The problem seems to be that <tt>counted_iterator</tt> populates its <tt>iterator_traits</tt>
but it does not specify its <tt>iterator_concept</tt>, so we fall back to looking at its
<tt>iterator_category</tt> to determine its C++20 iterator-ness. It seems
<tt>counted_iterator</tt> should specify its <tt>iterator_concept</tt> appropriately based on
the <tt>iterator_concept</tt> of the iterator it wraps.
</p>

<note>2020-03-29 Issue Prioritization</note>
<p>Priority to 2 after reflector discussion.</p>
<note>2021-05-18 Resolved by the adoption of <a href="https://wg21.link/P2259R1">P2259R1</a> at the February 2021 plenary. Status changed: New &rarr; Resolved.</note>
</discussion>

<resolution>
</resolution>
</issue>
