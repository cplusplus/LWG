<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3654" status="New">
<title><tt>basic_format_context::arg(size_t)</tt> should be <tt>noexcept</tt></title>
<section><sref ref="[format.context]"/></section>
<submitter>Hewill Kang</submitter>
<date>26 Dec 2021</date>
<priority>99</priority>

<discussion>
<p>
<tt>basic_format_context::arg(size_t)</tt> simply returns <tt>args_.get(id)</tt> to get the elements of 
<tt>args_</tt>, where the type of <tt>args_</tt> is <tt>basic_format_args&lt;basic_format_context&gt;</tt>. 
Since <tt>basic_format_args</tt>'s <tt>get(size_t)</tt> is <tt>noexcept</tt>, this function can also be 
<tt>noexcept</tt>.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4901"/>. 
</p>

<ol>
<li><p>Modify <sref ref="[format.context]"/> as indicated:</p>

<blockquote>
<blockquote>
<pre>
namespace std {
  template&lt;class Out, class charT&gt;
  class basic_format_context {
    basic_format_args&lt;basic_format_context&gt; args_; <i>// exposition only</i>
    Out out_; <i>// exposition only</i>
  public:
    using iterator = Out;
    using char_type = charT;
    template&lt;class T&gt; using formatter_type = formatter&lt;T, charT&gt;;
    
    basic_format_arg&lt;basic_format_context&gt; arg(size_t id) const <ins>noexcept</ins>;
    std::locale locale();

    iterator out();
    void advance_to(iterator it);
  };
}
</pre>
</blockquote>
<p>
[&hellip;]
</p>
<pre>
basic_format_arg&lt;basic_format_context&gt; arg(size_t id) const <ins>noexcept</ins>;
</pre>
<blockquote>
<p>
-5- <i>Returns:</i> <tt>args_.get(id)</tt>.
</p>
</blockquote>
</blockquote>
</li>
</ol></resolution>

</issue>
