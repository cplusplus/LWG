<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="900" status="C++11">
<title>Stream move-assignment</title>
<section><sref ref="[ifstream]"/></section>
<submitter>Niels Dekker</submitter>
<date>20 Sep 2008</date>

<discussion>
<p>
It appears that we have an issue similar to issue <iref ref="675"/> regarding the move-assignment of
stream types. For example, when assigning to an <tt>std::ifstream</tt>, <tt>ifstream1</tt>, it 
seems preferable to close the file originally held by <tt>ifstream1</tt>:
</p>

<blockquote><pre>
ifstream1 = std::move(ifstream2); 
</pre></blockquote>

<p>
The current Draft
(<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2723.pdf">N2723</a>)
specifies that the move-assignment of stream types like <tt>ifstream</tt> has the 
same effect as a swap:
</p>

<blockquote>
<p>
Assign and swap <sref ref="[ifstream.assign]"/>
</p>
<pre>
basic_ifstream&amp; operator=(basic_ifstream&amp;&amp; rhs); 
</pre>
<blockquote><p>
<i>Effects:</i> <tt>swap(rhs)</tt>.
</p></blockquote>
</blockquote>

<note>
Batavia (2009-05):
</note>
<blockquote>
<p>
Howard agrees with the analysis and the direction proposed.
</p>
<p>
Move to Open pending specific wording to be supplied by Howard.
</p>
</blockquote>

<note>
2009-07 Frankfurt:
</note>

<blockquote><p>
Howard is going to write wording.
</p></blockquote>

<note>
2009-07-26 Howard provided wording.
</note>

<note>
2009-09-13 Niels adds:
</note>

<blockquote><p>
Note: The proposed change of <sref ref="[filebuf.assign]"/> p1 depends on the
resolution of LWG <iref ref="1204"/>, which allows implementations to assume that
<tt>*this</tt> and <tt>rhs</tt> refer to different objects.
</p></blockquote>

<note>
2009 Santa Cruz:
</note>

<blockquote><p>
Leave as Open.  Too closely related to <iref ref="911"/> to move on at this time.
</p></blockquote>

<note>
2010 Pittsburgh:
</note>

<blockquote><p>
Moved to Ready for Pittsburgh.
</p></blockquote>

</discussion>

<resolution>

<p>
Change <sref ref="[stringbuf.assign]"/>/1:
</p>

<blockquote><pre>
basic_stringbuf&amp; operator=(basic_stringbuf&amp;&amp; rhs);
</pre>
<blockquote><p>
-1- <i>Effects:</i> <del><tt>swap(rhs)</tt>.</del>
<ins>After the move assignment <tt>*this</tt> reflects the same observable
state it would have if it had been move constructed from <tt>rhs</tt>
(<sref ref="[stringbuf.cons]"/>).
</ins>
</p></blockquote>
</blockquote>

<p>
Change <sref ref="[istringstream.assign]"/>/1:
</p>

<blockquote><pre>
basic_istringstream&amp; operator=(basic_istringstream&amp;&amp; rhs);
</pre>
<blockquote><p>
-1- <i>Effects:</i> <del><tt>swap(rhs)</tt>.</del>
<ins>Move assigns the base and members of <tt>*this</tt> with the respective
base and members of <tt>rhs</tt>.
</ins>
</p></blockquote>
</blockquote>

<p>
Change <sref ref="[ostringstream.assign]"/>/1:
</p>

<blockquote><pre>
basic_ostringstream&amp; operator=(basic_ostringstream&amp;&amp; rhs);
</pre>
<blockquote><p>
-1- <i>Effects:</i> <del><tt>swap(rhs)</tt>.</del>
<ins>Move assigns the base and members of <tt>*this</tt> with the respective
base and members of <tt>rhs</tt>.
</ins>
</p></blockquote>
</blockquote>

<p>
Change <sref ref="[stringstream.assign]"/>/1:
</p>

<blockquote><pre>
basic_stringstream&amp; operator=(basic_stringstream&amp;&amp; rhs);
</pre>
<blockquote><p>
-1- <i>Effects:</i> <del><tt>swap(rhs)</tt>.</del>
<ins>Move assigns the base and members of <tt>*this</tt> with the respective
base and members of <tt>rhs</tt>.
</ins>
</p></blockquote>
</blockquote>

<p>
Change <sref ref="[filebuf.assign]"/>/1:
</p>

<blockquote><pre>
basic_filebuf&amp; operator=(basic_filebuf&amp;&amp; rhs);
</pre>
<blockquote><p>
-1- <i>Effects:</i> <del><tt>swap(rhs)</tt>.</del>
<ins>Begins by calling <tt>this-&gt;close()</tt>.
After the move assignment <tt>*this</tt> reflects the same observable
state it would have if it had been move constructed from <tt>rhs</tt>
(<sref ref="[filebuf.cons]"/>).
</ins>
</p></blockquote>
</blockquote>

<p>
Change <sref ref="[ifstream.assign]"/>/1:
</p>

<blockquote><pre>
basic_ifstream&amp; operator=(basic_ifstream&amp;&amp; rhs);
</pre>
<blockquote><p>
-1- <i>Effects:</i> <del><tt>swap(rhs)</tt>.</del>
<ins>Move assigns the base and members of <tt>*this</tt> with the respective
base and members of <tt>rhs</tt>.</ins>
</p></blockquote>
</blockquote>

<p>
Change <sref ref="[ofstream.assign]"/>/1:
</p>

<blockquote><pre>
basic_ofstream&amp; operator=(basic_ofstream&amp;&amp; rhs);
</pre>
<blockquote><p>
-1- <i>Effects:</i> <del><tt>swap(rhs)</tt>.</del>
<ins>Move assigns the base and members of <tt>*this</tt> with the respective
base and members of <tt>rhs</tt>.</ins>
</p></blockquote>
</blockquote>

<p>
Change <sref ref="[fstream.assign]"/>/1:
</p>

<blockquote><pre>
basic_fstream&amp; operator=(basic_fstream&amp;&amp; rhs);
</pre>
<blockquote><p>
-1- <i>Effects:</i> <del><tt>swap(rhs)</tt>.</del>
<ins>Move assigns the base and members of <tt>*this</tt> with the respective
base and members of <tt>rhs</tt>.</ins>
</p></blockquote>
</blockquote>

</resolution>

</issue>
