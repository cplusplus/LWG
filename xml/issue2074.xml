<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="2074" status="Pending WP">
<title>Off by one error in <tt>std::reverse_copy</tt></title>
<section><sref ref="[alg.reverse]"/></section>
<submitter>Peter Miller</submitter>
<date>17 Aug 2011</date>

<discussion>

<p>
The output of the program below should be:
</p>
<blockquote><pre>
"three two one null \n"
</pre></blockquote>
<p>
But when <tt>std::reverse_copy</tt> is implemented as described in N3291 <sref ref="[alg.reverse]"/> 
it's:
</p>
<blockquote><pre>
"null three two one \n"
</pre></blockquote>
<p>
because there's an off by one error in <sref ref="[alg.reverse]"/>&#47;4; the definition should read:
</p>
<blockquote><pre>
*(result + (last - first) <span style="color:#C80000;font-weight:bold">- 1</span> - i) = *(first + i)
</pre></blockquote>
<p>
Test program:
</p>
<blockquote><pre>
#include &lt;algorithm&gt;
#include &lt;iostream&gt;

template &lt;typename BiIterator, typename OutIterator&gt;
auto
reverse_copy_as_described_in_N3291(
  BiIterator first, BiIterator last, OutIterator result )
-&gt; OutIterator
{
  // 25.3.10&#47;4 [alg.reverse]:
  // "...such that for any non-negative integer i &lt; (last - first)..."
  for ( unsigned i = 0; i &lt; ( last - first ); ++i )
    // "...the following assignment takes place:"
    *(result + (last - first) - i) = *(first + i);

  // 25.3.10&#47;6
  return result + (last - first);
}

int main()
{
  using std::begin;
  using std::end;
  using std::cout;

  static const char*const in[3]  { "one", "two", "three" };
  const char*             out[4] { "null", "null", "null", "null" };

  reverse_copy_as_described_in_N3291( begin( in ), end( in ), out );

  for ( auto s : out )
    cout &lt;&lt; s &lt;&lt; ' ';

  cout &lt;&lt; std::endl;

  return 0;
}
</pre></blockquote>

<note>2012, Kona</note>
<p>
Move to Ready.
</p>

</discussion>

<resolution>
<p>This wording is relative to the FDIS.</p>

<p>
Change <sref ref="[alg.reverse]"/> p4 as follows:
</p> 
<blockquote><pre>
template&lt;class BidirectionalIterator, class OutputIterator&gt;
  OutputIterator
    reverse_copy(BidirectionalIterator first,
                 BidirectionalIterator last, OutputIterator result);
</pre><blockquote><p>
-4- <i>Effects</i>: Copies the range [<tt>first,last</tt>) to the range [<tt>result,result+(last-first)</tt>) 
such that for any non-negative integer <tt>i &lt; (last - first)</tt> the following assignment takes place: 
<tt>*(result + (last - first) <ins>- 1</ins> - i) = *(first + i)</tt>.
<p/>
-5- <i>Requires</i>: The ranges [<tt>first,last</tt>) and [<tt>result,result+(last-first)</tt>) shall not overlap.
<p/>
-6- <i>Returns</i>: <tt>result + (last - first)</tt>.
<p/>
-7- <i>Complexity</i>: Exactly <tt>last - first</tt> assignments.
</p></blockquote></blockquote>
</resolution>

</issue>
