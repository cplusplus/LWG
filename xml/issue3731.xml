<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3731" status="New">
<title><tt>zip_view</tt> and <tt>adjacent_view</tt> are underconstrained</title>
<section><sref ref="[range.zip.view]"/><sref ref="[range.adjacent.view]"/>
<sref ref="[range.cartesian.view]"/></section>
<submitter>Hewill Kang</submitter>
<date>04 Jul 2022</date>
<priority>3</priority>

<discussion>
<p>
Both <tt>zip_view::<i>iterator</i></tt>'s (<sref ref="[range.zip.iterator]"/>) and 
<tt>adjacent_view::<i>iterator</i></tt>'s (<sref ref="[range.adjacent.iterator]"/>) 
<tt>operator*</tt> have similar <i>Effects:</i> elements:
</p>
<blockquote><pre>
return <i>tuple-transform</i>([](auto&amp; i) -&gt; decltype(auto) { return *i; }, <i>current_</i>);
</pre></blockquote>
<p>
where <tt><i>tuple-transform</i></tt> is defined as:
</p>
<blockquote><pre>
template&lt;class F, class Tuple&gt;
constexpr auto <i>tuple-transform</i>(F&amp;&amp; f, Tuple&amp;&amp; tuple) { <i>// exposition only</i>
  return apply([&amp;]&lt;class... Ts&gt;(Ts&amp;&amp;... elements) {
    return <i>tuple-or-pair</i>&lt;invoke_result_t&lt;F&amp;, Ts&gt;...&gt;(
      invoke(f, std::forward&lt;Ts&gt;(elements))...
    );
  }, std::forward&lt;Tuple&gt;(tuple));
}
</pre></blockquote>
<p>
That is, <tt>zip_view::<i>iterator</i></tt> will invoke the <tt>operator*</tt> of each iterator of 
<tt>Views</tt> and return a <tt>tuple</tt> containing its <tt>reference</tt>.
<p/>
This is not a problem when the <tt>reference</tt> of iterators is actually the reference type. However, 
when the <tt>operator*</tt> returns a prvalue of non-movable type, <tt><i>tuple-transform</i></tt> will 
be ill-formed since there are no suitable constructors for <tt>tuple</tt>:
</p>
<blockquote><pre>
#include &lt;ranges&gt;

struct NonMovable {
  NonMovable() = default;
  NonMovable(NonMovable&amp;&amp;) = delete;
};

auto r = std::views::iota(0, 5)
       | std::views::transform([](int) { return NonMovable{}; });
auto z = std::views::zip(r);
auto f = *z.begin(); // <span style="color:red;font-weight:bolder">hard error</span>

</pre></blockquote>
<p>
We should constrain the <tt>range_reference_t</tt> of the underlying range to be <tt>move_constructible</tt> 
when it is not a reference type, which also solves similar issues in <tt>zip_view::<i>iterator</i></tt> and 
<tt>adjacent_view::<i>iterator</i></tt>'s <tt>operator[]</tt> and <tt>iter_move</tt>.
</p>

<note>2022-08-23; Reflector poll</note>
<p>
Set priority to 3 after reflector poll.
"The constraint should just be <code>move_constructible</code>."
</p>


<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <paper num="N4910"/>.
</p>

<ol>
<li><p>Modify <sref ref="[ranges.syn]"/>, header <tt>&lt;ranges&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  <i>// <sref ref="[range.zip]"/>, zip view</i>
  <ins>template&lt;class Ref&gt;
    concept <i>tuple-constructible-reference</i> = <i>see below</i>; <i>// exposition only</i></ins>

  template&lt;input_range... Views&gt;
    requires (view&lt;Views&gt; &amp;&amp; ...) &amp;&amp; (sizeof...(Views) &gt; 0) <ins>&amp;&amp;
             (<i>tuple-constructible-reference</i>&lt;range_reference_t&lt;Views&gt;&gt; &amp;&amp; ...)</ins>
  class zip_view;

  [&hellip;]

  <i>// <sref ref="[range.adjacent]"/>, adjacent view</i>
  template&lt;forward_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; (N &gt; 0) <ins>&amp;&amp; 
             <i>tuple-constructible-reference</i>&lt;range_reference_t&lt;V&gt;&gt;</ins>
  class adjacent_view;
}
[&hellip;]
</pre>
</blockquote>
</li>



<li><p>Modify <sref ref="[range.zip.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  <ins>template&lt;class Ref&gt;
    concept <i>tuple-constructible-reference</i> =            <i>// exposition only</i>
      is_reference_v&lt;Ref&gt; || move_constructible&lt;Ref&gt;;</ins>
  [&hellip;]
  template&lt;input_range... Views&gt;
    requires (view&lt;Views&gt; &amp;&amp; ...) &amp;&amp; (sizeof...(Views) &gt; 0) <ins>&amp;&amp;
             (<i>tuple-constructible-reference</i>&lt;range_reference_t&lt;Views&gt;&gt; &amp;&amp; ...)</ins>
  class zip_view : public view_interface&lt;zip_view&lt;Views...&gt;&gt; {
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.adjacent.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;forward_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; (N &gt; 0) <ins>&amp;&amp; 
             <i>tuple-constructible-reference</i>&lt;range_reference_t&lt;V&gt;&gt;</ins>
  class adjacent_view : public view_interface&lt;adjacent_view&lt;V, N&gt;&gt; {
    [&hellip;]
  };
  [&hellip;]
}
</pre>
</blockquote>
</li>

</ol>
</blockquote>

<note>2022-09-25; Hewill provides improved wording</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[ranges.syn]"/>, header <tt>&lt;ranges&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]

  <ins>template&lt;class R&gt;
    concept <i>has-tuplable-ref</i> =            // <i>exposition only</i>
      move_constructible&lt;range_reference_t&lt;R&gt;&gt;;</ins>

  // <i><sref ref="[range.zip]"/>, zip view</i>
  template&lt;input_range... Views&gt;
    requires (view&lt;Views&gt; &amp;&amp; ...) &amp;&amp; (sizeof...(Views) &gt; 0) <ins>&amp;&amp;
             (<i>has-tuplable-ref</i>&lt;Views&gt; &amp;&amp; ...)</ins>
  class zip_view;

  [&hellip;]

  // <i><sref ref="[range.adjacent]"/>, adjacent view</i>
  template&lt;forward_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; (N &gt; 0) <ins>&amp;&amp; <i>has-tuplable-ref</i>&lt;V&gt;</ins>
  class adjacent_view;

  [&hellip;]

  // <i><sref ref="[range.cartesian]"/>, cartesian product view</i>
  template&lt;input_range First, forward_range... Vs&gt;
    requires (view&lt;First&gt; &amp;&amp; ... &amp;&amp; view&lt;Vs&gt;) <ins>&amp;&amp;
             (<i>has-tuplable-ref</i>&lt;First&gt; &amp;&amp; ... &amp;&amp; <i>has-tuplable-ref</i>&lt;Vs&gt;)</ins>
  class cartesian_product_view;

  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.zip.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  
  template&lt;input_range... Views&gt;
    requires (view&lt;Views&gt; &amp;&amp; ...) &amp;&amp; (sizeof...(Views) &gt; 0) <ins>&amp;&amp;
             (<i>has-tuplable-ref</i>&lt;Views&gt; &amp;&amp; ...)</ins>
  class zip_view : public view_interface&lt;zip_view&lt;Views...&gt;&gt; {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.zip.iterator]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;input_range... Views&gt;
    requires (view&lt;Views&gt; &amp;&amp; ...) &amp;&amp; (sizeof...(Views) &gt; 0) <ins>&amp;&amp;
             (<i>has-tuplable-ref</i>&lt;Views&gt; &amp;&amp; ...)</ins>
  template&lt;bool Const&gt;
  class zip_view&lt;Views...&gt;::<i>iterator</i> {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.zip.sentinel]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range... Views&gt;
    requires (view&lt;Views&gt; &amp;&amp; ...) &amp;&amp; (sizeof...(Views) &gt; 0) <ins>&amp;&amp;
             (<i>has-tuplable-ref</i>&lt;Views&gt; &amp;&amp; ...)</ins>
  template&lt;bool Const&gt;
  class zip_view&lt;Views...&gt;::<i>sentinel</i> {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.adjacent.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;forward_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; (N &gt; 0) <ins>&amp;&amp; <i>has-tuplable-ref</i>&lt;V&gt;</ins>
  class adjacent_view : public view_interface&lt;adjacent_view&lt;V, N&gt;&gt; {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.adjacent.iterator]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;forward_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; (N &gt; 0) <ins>&amp;&amp; <i>has-tuplable-ref</i>&lt;V&gt;</ins>
  template&lt;bool Const&gt;
  class adjacent_view&lt;V, N&gt;::<i>iterator</i> {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.adjacent.sentinel]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;forward_range V, size_t N&gt;
    requires view&lt;V&gt; &amp;&amp; (N &gt; 0) <ins>&amp;&amp; <i>has-tuplable-ref</i>&lt;V&gt;</ins>
  template&lt;bool Const&gt;
  class adjacent_view&lt;V, N&gt;::<i>sentinel</i> {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.cartesian.view]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  [&hellip;]
  template&lt;input_range First, forward_range... Vs&gt;
    requires (view&lt;First&gt; &amp;&amp; ... &amp;&amp; view&lt;Vs&gt;) <ins>&amp;&amp;
             (<i>has-tuplable-ref</i>&lt;First&gt; &amp;&amp; ... &amp;&amp; <i>has-tuplable-ref</i>&lt;Vs&gt;)</ins>
  class cartesian_product_view : public view_interface&lt;cartesian_product_view&lt;First, Vs...&gt;&gt; {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

<li><p>Modify <sref ref="[range.cartesian.iterator]"/> as indicated:</p>

<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range First, forward_range... Vs&gt;
    requires (view&lt;First&gt; &amp;&amp; ... &amp;&amp; view&lt;Vs&gt;) <ins>&amp;&amp;
             (<i>has-tuplable-ref</i>&lt;First&gt; &amp;&amp; ... &amp;&amp; <i>has-tuplable-ref</i>&lt;Vs&gt;)</ins>
  template&lt;bool Const&gt;
  class cartesian_product_view&lt;First, Vs...&gt;::<i>iterator</i> {
    [&hellip;]
  };
}
</pre>
</blockquote>
</li>

</ol>
</resolution>

</issue>
