<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="1340" status="C++11">
<title>Why does <tt>forward_list::resize</tt> take the object to be copied by value?</title>
<section><sref ref="[forwardlist.modifiers]"/></section>
<submitter>James McNellis</submitter>
<date>16 Jul 2010</date>

<discussion>
<p>
In
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3092.pdf">N3092</a>
<sref ref="[forwardlist.modifiers]"/>, the <tt>resize()</tt> member function is 
declared as:
</p>

<blockquote><pre>
void resize(size_type sz, value_type c); 
</pre></blockquote>

<p>
The other sequence containers (<tt>list</tt>, <tt>deque</tt>, and
<tt>vector</tt>) take <tt>'c'</tt> by const reference.
</p>

<p>
Is there a reason for this difference?  If not, then <tt>resize()</tt> should 
be declared as: 
</p>

<blockquote><pre>
void resize(size_type sz, const value_type&amp; c); 
</pre></blockquote>

<p>
The declaration would need to be changed both at its declaration in the class
definition at <sref ref="[forwardlist]"/>/3 and where its behavior is specified
at <sref ref="[forwardlist.modifiers]"/>/22.
</p>

<p>
This would make <tt>forward_list</tt> consistent with the CD1 issue <iref
ref="679"/>.
</p>

<note>
Post-Rapperswil
</note>

<p>
Daniel changed the P&#47;R slightly, because one paragraph number has been changed since the issue
had been submitted. He also added a similar Requires element that exists in all other containers with
a <tt>resize</tt> member function. He deliberately did not touch the wrong usage of "default-constructed" because that
will be taken care of by LWG issue <iref ref="868"/>.
</p>

<blockquote><p>
Moved to Tentatively Ready with revised wording after 5 positive votes on c++std-lib.
</p></blockquote>

<note>
Adopted at 2010-11 Batavia
</note>

</discussion>

<resolution>
<!-- original resolution
<p>
Change <sref ref="[forwardlist]"/>/3:
</p>

<blockquote><pre>
  ...
  void resize(size_type sz, <ins>const</ins> value_type<ins>&amp;</ins> c);
  ...
</pre></blockquote>

<p>
Change <sref ref="[forwardlist.modifiers]"/>/22:
</p>

<blockquote><pre>
void resize(size_type sz);
void resize(size_type sz, <ins>const</ins> value_type<ins>&amp;</ins> c);
</pre></blockquote>
-->

<ol>
<li>Change [forwardlist]/3, class template <tt>forward_list</tt> synopsis, as indicated:
<blockquote><pre>
...
void resize(size_type sz);
void resize(size_type sz, <ins>const</ins> value_type<ins>&amp;</ins> c);
void clear();
...
</pre></blockquote>
</li>
<li>Change [forwardlist.modifiers]/27 as indicated: 
<blockquote><pre>	
void resize(size_type sz);
void resize(size_type sz, <ins>const</ins> value_type<ins>&amp;</ins> c);
</pre>
<blockquote><p>
27 <em>Effects</em>: If <tt>sz &lt; distance(begin(), end())</tt>, erases the last <tt>distance(begin(), end()) - sz</tt> elements
from the list. Otherwise, inserts <tt>sz - distance(begin(), end())</tt> elements at the end of the list. For the first 
signature the inserted elements are default constructed, and for the second signature they are copies of <tt>c</tt>.
<p/>
<ins>28 - <em>Requires</em>: <tt>T</tt> shall be <tt>DefaultConstructible</tt> for the first form and	it shall be <tt>CopyConstructible</tt> 
	for the second form.</ins>
</p></blockquote></blockquote>
</li>
</ol>

</resolution>

</issue>
