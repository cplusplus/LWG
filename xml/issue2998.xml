<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="2998" status="C++20">
<title>Requirements on function objects passed to <tt>{forward_,}list</tt>-specific algorithms</title>
<section><sref ref="[list.ops]"/><sref ref="[forward.list.ops]"/></section>
<submitter>Tim Song</submitter>
<date>7 Jul 2017</date>
<priority>0</priority>

<discussion>
<p>
Some specialized algorithms for <tt>forward_list</tt> and <tt>list</tt> take template parameters named <tt>Predicate</tt>, 
<tt>BinaryPredicate</tt>, or <tt>Compare</tt>. 
However, there's no wording importing the full requirements for template type parameters with such names from 
<sref ref="[algorithms.requirements]"/> and <sref ref="[alg.sorting]"/>,
which means, for instance, that there appears to be no rule prohibiting <tt>Compare</tt> from modifying its arguments, 
because we only refer to <sref ref="[alg.sorting]"/> for the definition of strict weak ordering. Is that intended?
</p>

<note>2017-07 Toronto Tuesday PM issue prioritization</note>
<p>Priority 0; status to Ready</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="https://wg21.link/n4659">N4659</a>.
</p>

<ol>
<li><p>Edit <sref ref="[list.ops]"/> as indicated:</p>
<blockquote>
<p>-1- Since lists allow fast insertion and erasing from the middle of a list, certain operations are provided specifically 
for them.<sup>259)</sup> <ins>In this subclause, arguments for a template parameter named <tt>Predicate</tt> or 
<tt>BinaryPredicate</tt> shall meet the corresponding requirements in <sref ref="[algorithms.requirements]"/>.
For <tt>merge</tt> and <tt>sort</tt>, the definitions and requirements in <sref ref="[alg.sorting]"/> apply.</ins>
</p>
</blockquote>
</li>

<li><p>Edit <sref ref="[list.ops]"/> as indicated:</p>
<blockquote>
<pre>
void merge(list&amp; x);
void merge(list&amp;&amp; x);
template &lt;class Compare&gt; void merge(list&amp; x, Compare comp);
template &lt;class Compare&gt; void merge(list&amp;&amp; x, Compare comp);
</pre>
<blockquote>
<p>-22- <i>Requires:</i> <del><tt>comp</tt> shall define a strict weak ordering (<sref ref="[alg.sorting]"/>), and b</del><ins>B</ins>oth the list and the argument list shall be sorted
<del>according to this ordering</del><ins>with respect to the comparator <tt>operator&lt;</tt> (for the first two overloads) or <tt>comp</tt> (for the last two overloads)</ins>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Delete <sref ref="[list.ops]"/>/28 as redundant:</p>
<blockquote>
<pre>
void sort();
template &lt;class Compare&gt; void sort(Compare comp);
</pre>
<blockquote>
<p>
<del>-28- <i>Requires:</i> <tt>operator&lt;</tt> (for the first version) or <tt>comp</tt> (for the second version) shall 
define a strict weak ordering (<sref ref="[alg.sorting]"/>).</del>
</p>
</blockquote>
</blockquote>
</li>

<li><p>Insert a new paragraph at the beginning of <sref ref="[forwardlist.ops]" />:</p>
<blockquote>
<p><ins>-?- In this subclause, arguments for a template parameter named <tt>Predicate</tt> or 
<tt>BinaryPredicate</tt> shall meet the corresponding requirements in <sref ref="[algorithms.requirements]"/>.
For <tt>merge</tt> and <tt>sort</tt>, the definitions and requirements in <sref ref="[alg.sorting]"/> apply.</ins>
</p>
<pre>
void splice_after(const_iterator position, forward_list&amp; x);
void splice_after(const_iterator position, forward_list&amp;&amp; x);
</pre>
<p>
[&hellip;]
</p>
</blockquote>
</li>
<li><p>Edit <sref ref="[forwardlist.ops]"/> as indicated:</p>
<blockquote>
<pre>
void merge(forward_list&amp; x);
void merge(forward_list&amp;&amp; x);
template &lt;class Compare&gt; void merge(forward_list&amp; x, Compare comp);
template &lt;class Compare&gt; void merge(forward_list&amp;&amp; x, Compare comp);
</pre>
<blockquote>
<p>-22- <i>Requires:</i> <del><tt>comp</tt> defines a strict weak ordering (<sref ref="[alg.sorting]"/>), and</del> 
<tt>*this</tt> and <tt>x</tt> are both sorted <del>according to this ordering</del><ins>with respect to the comparator 
<tt>operator&lt;</tt> (for the first two overloads) or <tt>comp</tt> (for the last two overloads)</ins>.
<tt>get_allocator() == x.get_allocator()</tt>.
</p>
</blockquote>
</blockquote>
</li>

<li><p>Delete <sref ref="[forwardlist.ops]"/>/23 as redundant:</p>
<blockquote>
<pre>
void sort();
template &lt;class Compare&gt; void sort(Compare comp);
</pre>
<blockquote>
<p>
<del>-23- <i>Requires:</i> <tt>operator&lt;</tt> (for the version with no arguments) or <tt>comp</tt> (for the version 
with a comparison argument) defines a strict weak ordering (<sref ref="[alg.sorting]"/>).</del>
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>
</issue>
