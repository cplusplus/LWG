<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4034" status="New">
<title>Clarify specification of <tt>std::min</tt> and <tt>std::max</tt></title>
<section><sref ref="[alg.min.max]"/></section>
<submitter>Jan Schultke</submitter>
<date>29 Dec 2023</date>
<priority>99</priority>

<discussion>
<p>
All standard libraries effectively use the same implementation for <tt>std::min(a, b)</tt>, 
namely something along the lines of
</p>
<blockquote>
<pre>
return __b &lt; __a ? __b : __a;
</pre>
</blockquote>
<ul>
<li><p><a href="https://github.com/microsoft/STL/blob/a8888806c6960f1687590ffd4244794c753aa819/stl/inc/utility#L100C22-L100C22">MSVC STL</a></p></li>
<li><p><a href="https://github.com/gcc-mirror/gcc/blob/748a4e9069e41bec1f27aa369c19f9756d8c1494/libstdc%2B%2B-v3/include/bits/stl_algobase.h#L237">libstdc++</a></p></li>
<li><p><a href="https://github.com/llvm/llvm-project/blob/b6daac023a72235108bddc17a5245a9371cd6147/libcxx/include/__algorithm/min.h#L36">libc++</a></p></li>
</ul>
<p>
However, the wording in <sref ref="[alg.min.max]"/> is not so clear:
</p>
<blockquote>
<p>
<i>Returns</i>: The smaller value. Returns the first argument when the arguments are equivalent.
</p>
</blockquote>
<p>
This leaves a few questions open:
</p>
<ul>
<li><p>How is the smaller value determined? Must it be through the less-than operator?</p></li>
<li><p>For <tt>std::max</tt>, can the "larger" value be determined through the greater-than operator or must it be through less-than?</p></li>
</ul>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4971"/>.
</p>

<ol>

<li><p>Modify <sref ref="[alg.min.max]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  constexpr const T&amp; min(const T&amp; a, const T&amp; b);
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions</i>: <tt>T</tt> meets the <i>Cpp17LessThanComparable</i> requirements (Table 29).</ins>
<p/>
<ins>-?- <i>Returns</i>: <tt>b &lt; a ? b : a</tt>.</ins>
<p/>
<ins>-?- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt>.</ins>
</p>
</blockquote>
<pre>
template&lt;class T, class Compare&gt;
  constexpr const T&amp; min(const T&amp; a, const T&amp; b, Compare comp);
</pre>
<blockquote>
<p>
<ins>-?- <i>Returns</i>: <tt>comp(b, a) ? b : a</tt>.</ins>
<p/>
<ins>-?- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt>.</ins>
</p>
</blockquote>
<pre>
template&lt;class T, class Proj = identity,
         indirect_strict_weak_order&lt;projected&lt;const T*, Proj&gt;&gt; Comp = ranges::less&gt;
constexpr const T&amp; ranges::min(const T&amp; a, const T&amp; b, Comp comp = {}, Proj proj = {});
</pre>
<blockquote>
<p>
<del>-1- <i>Preconditions</i>: For the first form, <tt>T</tt> meets the <i>Cpp17LessThanComparable</i> requirements (Table 29).</del>
<p/>
-2- <i>Returns</i>: <ins><tt>comp(proj(b), proj(a)) ? b : a</tt></ins><del>The smaller value. Returns the first 
argument when the arguments are equivalent</del>.
<p/>
<del>-3- <i>Complexity</i>: Exactly one comparison and two applications of the projection, if any.</del>
<p/>
<del>-4- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt> of the
overloads in namespace <tt>std</tt>.</del>
</p>
</blockquote>
<pre>
template&lt;class T&gt;
  constexpr T min(initializer_list&lt;T&gt; r);
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions</i>: <tt>ranges::distance(r) &gt; 0</tt>. <tt>T</tt> meets the <i>Cpp17CopyConstructible</i> 
(Table 32) and <i>Cpp17LessThanComparable</i> (Table 29) requirements.</ins>
<p/>
<ins>-?- <i>Returns</i>: The leftmost element <tt>x</tt> in <tt>r</tt> where <tt>y &lt; x</tt> is <tt>false</tt> 
for all subsequent elements <tt>y</tt>.</ins>
<p/>
<ins>-?- <i>Complexity</i>: Exactly <tt>ranges::distance(r) - 1</tt> comparisons.</ins>
<p/>
<ins>-?- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt>.</ins>
</p>
</blockquote>
<pre>
template&lt;class T, class Compare&gt;
  constexpr T min(initializer_list&lt;T&gt; r, Compare comp);
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions</i>: <tt>ranges::distance(r) &gt; 0</tt>. <tt>T</tt> meets the <i>Cpp17CopyConstructible</i> 
requirements (Table 32).</ins>
<p/>
<ins>-?- <i>Returns</i>: The leftmost element <tt>x</tt> in <tt>r</tt> where <tt>comp(y, x)</tt> is <tt>false</tt> 
for all subsequent elements <tt>y</tt>.</ins>
<p/>
<ins>-?- <i>Complexity</i>: Exactly <tt>ranges::distance(r) - 1</tt> comparisons.</ins>
<p/>
<ins>-?- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt>.</ins>
</p>
</blockquote>
<pre>
template&lt;copyable T, class Proj = identity,
         indirect_strict_weak_order&lt;projected&lt;const T*, Proj&gt;&gt; Comp = ranges::less&gt;
  constexpr T ranges::min(initializer_list&lt;T&gt; r, Comp comp = {}, Proj proj = {});
template&lt;input_range R, class Proj = identity,
         indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;R&gt;, Proj&gt;&gt; Comp = ranges::less&gt;
  requires indirectly_copyable_storable&lt;iterator_t&lt;R&gt;, range_value_t&lt;R&gt;*&gt;
  constexpr range_value_t&lt;R&gt;
    ranges::min(R&amp;&amp; r, Comp comp = {}, Proj proj = {});
</pre>
<blockquote>
<p>
-5- <i>Preconditions</i>: <tt>ranges::distance(r) &gt; 0</tt>. <del>For the overloads in namespace <tt>std</tt>, 
<tt>T</tt> meets the <i>Cpp17CopyConstructible</i> requirements. For the first form, <tt>T</tt> meets the 
<i>Cpp17LessThanComparable</i> requirements (Table 29).</del>
<p/>
-6- <i>Returns</i>: <ins>The leftmost element <tt>x</tt> in <tt>r</tt> where <tt>comp(proj(y), proj(x))</tt> 
is <tt>false</tt> for all subsequent elements <tt>y</tt></ins><del>The smallest value in the input range. 
Returns a copy of the leftmost element when several elements are equivalent to the smallest</del>.
<p/>
-7- <i>Complexity</i>: Exactly <tt>ranges::distance(r) - 1</tt> comparisons and twice as many applications of the
projection<del>, if any</del>.
<p/>
<del>-8- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt> of the
overloads in namespace <tt>std</tt>.</del>
</p>
</blockquote>
<pre>
template&lt;class T&gt;
  constexpr const T&amp; max(const T&amp; a, const T&amp; b);
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions</i>: <tt>T</tt> meets the <i>Cpp17LessThanComparable</i> requirements (Table 29).</ins>
<p/>
<ins>-?- <i>Returns</i>: <tt>a &lt; b ? b : a</tt>.</ins>
<p/>
<ins>-?- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt>.</ins>
</p>
</blockquote>
<pre>
template&lt;class T, class Compare&gt;
  constexpr const T&amp; max(const T&amp; a, const T&amp; b, Compare comp);
</pre>
<blockquote>
<p>
<ins>-?- <i>Returns</i>: <tt>comp(a, b) ? b : a</tt>.</ins>
<p/>
<ins>-?- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt>.</ins>
</p>
</blockquote>
<pre>
template&lt;class T, class Proj = identity,
         indirect_strict_weak_order&lt;projected&lt;const T*, Proj&gt;&gt; Comp = ranges::less&gt;
  constexpr const T&amp; ranges::max(const T&amp; a, const T&amp; b, Comp comp = {}, Proj proj = {});
</pre>
<blockquote>
<p>
<del>-9- <i>Preconditions</i>: For the first form, <tt>T</tt> meets the <i>Cpp17LessThanComparable</i> requirements (Table 29).</del>
<p/>
-10- <i>Returns</i>: <ins><tt>comp(proj(a), proj(b)) ? b : a</tt></ins><del>The larger value. Returns the first 
argument when the arguments are equivalent</del>.
<p/>
<del>-11- <i>Complexity</i>: Exactly one comparison and two applications of the projection, if any.</del>
<p/>
<del>-12- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt> 
of the overloads in namespace <tt>std</tt>.</del>
</p>
</blockquote>
<pre>
template&lt;class T&gt;
  constexpr T max(initializer_list&lt;T&gt; r);
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions</i>: <tt>ranges::distance(r) &gt; 0</tt>. <tt>T</tt> meets the <i>Cpp17CopyConstructible</i> 
(Table 32) and <i>Cpp17LessThanComparable</i> (Table 29) requirements.</ins>
<p/>
<ins>-?- <i>Returns</i>: The leftmost element <tt>x</tt> in <tt>r</tt> where <tt>x &lt; y</tt> is <tt>false</tt> 
for all subsequent elements <tt>y</tt>.</ins>
<p/>
<ins>-?- <i>Complexity</i>: Exactly <tt>ranges::distance(r) - 1</tt> comparisons.</ins>
<p/>
<ins>-?- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt>.</ins>
</p>
</blockquote>
<pre>
template&lt;class T, class Compare&gt;
  constexpr T max(initializer_list&lt;T&gt; r, Compare comp);
</pre>
<blockquote>
<p>
<ins>-?- <i>Preconditions</i>: <tt>ranges::distance(r) &gt; 0</tt>. <tt>T</tt> meets the <i>Cpp17CopyConstructible</i> 
requirements (Table 32).</ins>
<p/>
<ins>-?- <i>Returns</i>: The leftmost element <tt>x</tt> in <tt>r</tt> where <tt>comp(x, y)</tt> is <tt>false</tt> 
for all subsequent elements <tt>y</tt>.</ins>
<p/>
<ins>-?- <i>Complexity</i>: Exactly <tt>ranges::distance(r) - 1</tt> comparisons.</ins>
<p/>
<ins>-?- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt>.</ins>
</p>
</blockquote>
<pre>
template&lt;copyable T, class Proj = identity,
         indirect_strict_weak_order&lt;projected&lt;const T*, Proj&gt;&gt; Comp = ranges::less&gt;
  constexpr T ranges::max(initializer_list&lt;T&gt; r, Comp comp = {}, Proj proj = {});
template&lt;input_range R, class Proj = identity,
         indirect_strict_weak_order&lt;projected&lt;iterator_t&lt;R&gt;, Proj&gt;&gt; Comp = ranges::less&gt;
  requires indirectly_copyable_storable&lt;iterator_t&lt;R&gt;, range_value_t&lt;R&gt;*&gt;
  constexpr range_value_t&lt;R&gt;
    ranges::max(R&amp;&amp; r, Comp comp = {}, Proj proj = {});
</pre>
<blockquote>
<p>
-13- <i>Preconditions</i>: <tt>ranges::distance(r) &gt; 0</tt>. <del>For the overloads in namespace <tt>std</tt>, 
<tt>T</tt> meets the <i>Cpp17CopyConstructible</i> requirements. For the first form, <tt>T</tt> meets the 
<i>Cpp17LessThanComparable</i> requirements (Table 29).</del>
<p/>
-14- <i>Returns</i>: <ins>The leftmost element <tt>x</tt> in <tt>r</tt> where <tt>comp(proj(x), proj(y)</tt> 
is <tt>false</tt> for all subsequent elements <tt>y</tt></ins><del>The largest value in the input range. 
Returns a copy of the leftmost element when several elements are equivalent to the largest</del>.
<p/>
-15- <i>Complexity</i>: Exactly <tt>ranges::distance(r) - 1</tt> comparisons and twice as many applications of the
projection<del>, if any</del>.
<p/>
<del>-16- <i>Remarks</i>: An invocation may explicitly specify an argument for the template parameter <tt>T</tt> 
of the overloads in namespace <tt>std</tt>.</del>
</p>
</blockquote>
</blockquote>

</li>

</ol>


</resolution>

</issue>
