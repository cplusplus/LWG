<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3801" status="WP">
<title><tt>cartesian_product_view::<i>iterator</i>::<i>distance-from</i></tt> ignores the size of last underlying range</title>
<section><sref ref="[range.cartesian.iterator]"/></section>
<submitter>Patrick Palka</submitter>
<date>25 Oct 2022</date>
<priority>99</priority>

<discussion>
<p>
The helper <tt><i>scaled-size</i>(<i>N</i>)</tt> from the wording for <paper num="P2374R4"/>'s
<tt>cartesian_product_view::<i>iterator</i>::<i>distance-from</i></tt> is recursively 
specified as:
</p>
<blockquote>
<p>
Let <tt><i>scaled-size</i>(<i>N</i>)</tt> be the product of
<tt>static_cast&lt;difference_type&gt;(ranges::size(std::get&lt;<i>N</i>&gt;(<i>parent_</i>-&gt;<i>bases_</i>)))</tt>
and <tt><i>scaled-size</i>(<i>N</i> + 1)</tt> if <tt><i>N</i> &lt; sizeof...(Vs)</tt>, otherwise
<tt>static_cast&lt;difference_type&gt;(1)</tt>;
</p>
</blockquote>
<p>
Intuitively, <tt><i>scaled-size</i>(<i>N</i>)</tt> is the size of the cartesian product of all
but the first <tt><i>N</i></tt> underlying ranges. Thus <tt><i>scaled-size</i>(sizeof...(Vs))</tt> 
ought to just yield the size of the last underlying range (since there are
<tt>1 + sizeof...(Vs)</tt> underlying ranges), but according to this definition it
yields <tt>1</tt>. Similarly at the other extreme, <tt><i>scaled-size</i>(0)</tt> should yield
the product of the sizes of all the underlying ranges, but it instead yields that of all but 
the last underlying range.
<p/>
For <tt>cartesian_product_view</tt>s of two or more underlying ranges, this
causes the relevant <tt>operator-</tt> overloads to compute wrong distances, e.g.
</p>
<blockquote><pre>
int x[] = {1, 2, 3};
auto v = views::cartesian_product(x, x);
auto i = v.begin() + 5;  // *i == {2, 3}
assert(*i == tuple{2, 3});
assert(i - v.begin() == 5); // fails, expects 3, because:
// scaled-sum = scaled-distance(0) + scaled-distance(1)
//            = ((1 - 0) * scaled-size(1)) + ((2 - 0) * scaled-size(2))
//            = 1 + 2 instead of 3 + 2
</pre></blockquote>
<p>
The recursive condition should probably use <tt>&lt;=</tt> instead of <tt>&lt;</tt>.
</p>

<note>2022-11-04; Reflector poll</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>

<note>2022-11-12 Approved at November 2022 meeting in Kona. Status changed: Voting &rarr; WP.</note>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[ranges.cartesian.iterator]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Tuple&gt;
  constexpr difference_type <i>distance-from</i>(Tuple t);
</pre>
<blockquote>
<p>
-7- Let:
</p>
<ol style="list-style-type: none">
<li><p>(7.1) &mdash; <tt><i>scaled-size</i>(<i>N</i>)</tt> be the product of 
<tt>static_cast&lt;difference_type&gt;(ranges::size(std::get&lt;<i>N</i>&gt;(<i>parent_</i>-&gt;<i>bases_</i>)))</tt> 
and <tt><i>scaled-size</i>(<i>N</i> + 1)</tt> if <tt><i>N</i> <ins>&le;</ins><del>&lt;</del> sizeof...(Vs)</tt>, otherwise 
<tt>static_cast&lt;difference_type&gt;(1)</tt>;</p></li>
<li><p>(7.2) &mdash; <tt><i>scaled-distance</i>(<i>N</i>)</tt> be the product of 
<tt>static_cast&lt;difference_type&gt;(std::get&lt;<i>N</i>&gt;(<i>current_</i>) - std::get&lt;<i>N</i>&gt;(t))</tt> 
and <tt><i>scaled-size</i>(<i>N</i> + 1)</tt>; and</p></li>
<li><p>(7.3) &mdash; <tt><i>scaled-sum</i></tt> be the sum of <tt><i>scaled-distance</i>(<i>N</i>)</tt> for every 
integer <tt>0 &le; N &le; sizeof...(Vs)</tt>.</p></li>
</ol>
</blockquote>
</blockquote>
</li>

</ol>
</resolution>

</issue>
