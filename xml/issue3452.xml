<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3452" status="Resolved">
<title>Are views really supposed to have strict <tt>&#x1d4aa;(1)</tt> destruction?</title>
<section><sref ref="[range.view]"/></section>
<submitter>Mathias Stearn</submitter>
<date>16 Jun 2020</date>
<priority>2</priority>

<discussion>
<p>
The second bullet of <sref ref="[range.view]"/> paragraph 3 says
"Examples of views are:[&hellip;]
A range type that holds its elements by <tt>shared_ptr</tt>
and shares ownership with all its copies".
That clearly does not have <tt>&#x1d4aa;(1)</tt> destruction in all cases.
However, that does seem like a useful type of view,
and is related to the discussions around the proposed <tt>std::generator</tt>.
</p>

<p>
What is the purpose of requiring <tt>&#x1d4aa;(1)</tt> destruction?
Would it still be achieved by weakening it slightly to something like
"If <i>N</i> copies and/or moves are made from a view that yields <i>M</i> values,
destroying all of them takes time proportional to at worst <tt>&#x1d4aa;(<i>N</i>+<i>M</i>)</tt>"?
This in particular prevents the <tt>&#x1d4aa;(<i>N</i>*<i>M</i>)</tt> case that I think the rules
are trying to prevent, while still allowing some more interesting types of views.
</p>

<p>
If instead we actually really do want strict <tt>&#x1d4aa;(1)</tt> destruction,
then the example needs to be fixed.
</p>

<note>2020-06-26; Reflector prioritization</note>
<p>
Set priority to 2 after reflector discussions.
</p>

<note>2021-01-15; Telecon discussion</note>
<p>
Set status to LEWG for guidance on the issue of what it means to model view.
</p>

<note>2021-02-16; Library Evolution Telecon Minutes</note>
<p>
Poll: The <tt>shared_ptr</tt> part of the example mentioned in LWG3452 should be removed.
</p>
<pre>
SF F N A SA
4  6 3 1 0
</pre>
<p>
Attendance: 25
<p/>
Outcome: Remove the <tt>shared_ptr</tt> part.
</p>

<p><strong>Previous resolution [SUPERSEDED]:</strong></p>
<blockquote class="note">
<p>
This wording is relative to <a href="https://wg21.link/n4878">N4878</a>.
</p>

<ol>
<li><p>Modify <sref ref="[range.view]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class T&gt;
  concept view =
    range&lt;T&gt; &amp;&amp; movable&lt;T&gt; &amp;&amp; default_initializable&lt;T&gt; &amp;&amp; enable_view&lt;T&gt;;
</pre>
[&hellip;]
<blockquote>
<p>
-3- [<i>Example 1</i>: Examples of <tt>view</tt>s are:
</p>
<ol style="list-style-type: none">
<li><p>(3.1) &mdash; A <tt>range</tt> type that wraps a pair of iterators.</p></li>
<li><p><del>(3.2) &mdash; A <tt>range</tt> type that holds its elements by shared_ptr and shares ownership with all its copies.</del></p></li>
<li><p>(3.3) &mdash; A <tt>range</tt> type that generates its elements on demand.</p></li>
</ol>
<p>
Most containers (Clause 22) are not views since destruction of the container destroys the elements, which cannot
be done in constant time. &mdash; <i>end example</i>]
</p>
</blockquote>
</blockquote>
</li>
</ol>
</blockquote>
<note>2021-10-23 Resolved by the adoption of <paper num="P2415R2"/> at the October 2021 plenary. Status changed: LEWG &rarr; Resolved.</note>
</discussion>

<resolution>
</resolution>

</issue>
