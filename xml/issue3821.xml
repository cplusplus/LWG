<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3821" status="New">
<title><tt>uses_allocator_construction_args</tt> should have overload for <i><tt>pair-like</tt></i></title>
<section><sref ref="[allocator.uses.construction]"/></section>
<submitter>Tim Song</submitter>
<date>8 Nov 2022</date>
<priority>99</priority>

<discussion>
<p>
<paper num="P2165R4"/> added a <tt><i>pair-like</i></tt> constructor to 
<tt>std::pair</tt> but didn't add a corresponding <tt>uses_allocator_construction_args</tt> overload. 
It was in <paper num="P2165R3"/> but incorrectly removed during the small group review.
<p/>
Without LWG <iref ref="3525"/>, not having the overload would have caused emplacing a <tt><i>pair-like</i></tt> into a 
<tt>pmr::vector&lt;pair&gt;</tt> to be outright ill-formed. 
<p/>
With that issue's resolution, in cases where the constructor is not explicit we would create a temporary pair 
and then do uses-allocator construction using its pieces, and it still won't work when the constructor is explicit.
<p/>
We should just do this properly.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>
<ol>
<li><p>Edit <sref ref="[memory.syn]"/>, header <tt>&lt;memory&gt;</tt> synopsis, as indicated:</p>
<blockquote>
<pre>
namespace std {
  [&hellip;]
  <i>// <sref ref="[allocator.uses.construction]"/>, uses-allocator construction</i>
  [&hellip;]
  template&lt;class T, class Alloc, class U, class V&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                    pair&lt;U, V&gt;&amp; pr) noexcept;

  template&lt;class T, class Alloc, class U, class V&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                    const pair&lt;U, V&gt;&amp; pr) noexcept;

  template&lt;class T, class Alloc, class U, class V&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                    pair&lt;U, V&gt;&amp;&amp; pr) noexcept;

  template&lt;class T, class Alloc, class U, class V&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc,
                                                    const pair&lt;U, V&gt;&amp;&amp; pr) noexcept;
<ins>  template&lt;class T, class Alloc, <i>pair-like</i> P&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc, P&amp;&amp; p) noexcept;</ins>
    
  template&lt;class T, class Alloc, class U&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc, U&amp;&amp; u) noexcept;
  [&hellip;]
}
</pre>
</blockquote>
</li>

<li><p>Add the following to <sref ref="[allocator.uses.construction]"/>:</p>
<blockquote>
<pre>
<ins>  template&lt;class T, class Alloc, <i>pair-like</i> P&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc, P&amp;&amp; p) noexcept;</ins>
</pre>
<blockquote>
<p>
<ins>-?- <i>Constraints:</i> <tt>T</tt> is a specialization of <tt>pair</tt>.</ins>
<p/>
<ins>-?- <i>Effects:</i> Equivalent to:</ins>
</p>
<blockquote><pre><ins>
return uses_allocator_construction_args&lt;T&gt;(alloc, piecewise_construct,
                                            forward_as_tuple(get&lt;0&gt;(std::forward&lt;P&gt;(p))),
                                            forward_as_tuple(get&lt;1&gt;(std::forward&lt;P&gt;(p))));
</ins></pre></blockquote>
</blockquote>
</blockquote>
</li>

<li><p>Edit <sref ref="[allocator.uses.construction]"/> p17:</p>
<blockquote>
<pre>
  template&lt;class T, class Alloc, class U&gt;
    constexpr auto uses_allocator_construction_args(const Alloc&amp; alloc, U&amp;&amp; u) noexcept;
</pre>
<blockquote>
<p>
-16- Let <tt><i>FUN</i></tt> be the function template:
</p>
<blockquote><pre>
  template&lt;class A, class B&gt;
  void <i>FUN</i>(const pair&lt;A, B&gt;&amp;);
</pre></blockquote>
<p>
-17- <i>Constraints:</i> <tt>T</tt> is a specialization of <tt>pair</tt>, 
<ins><tt>P</tt> does not satisfy <i><tt>pair-like</tt></i>,</ins>
and the expression <tt><i>FUN</i>(u)</tt> is not well-formed when considered as an unevaluated operand.
</p>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
