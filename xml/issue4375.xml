<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="4375" status="Tentatively Ready">
<title>`std::simd::bit_ceil` should not be `noexcept`</title>
<section>
<sref ref="[simd.bit]"/>
</section>
<submitter>Matthias Kretz</submitter>
<date>29 Aug 2025</date>
<priority>99</priority>

<discussion>
<p>
`std::simd::bit_ceil` is declared 'noexcept' in <sref ref="[simd.syn]"/> and 
<sref ref="[simd.bit]"/>. But
</p>
<ol>
<li><p>`std::bit_ceil` is not 'noexcept' (<sref ref="[bit.syn]"/> and <sref ref="[bit.pow.two]"/>) and</p></li>
<li><p>`std::simd::bit_ceil` has a precondition.</p></li>
</ol>

<note>2025-10-22; Reflector poll.</note>
<p>
Set status to Tentatively Ready after six votes in favour during reflector poll.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <paper num="N5014"/>.
</p>

<ol>

<li><p>Modify <sref ref="[simd.syn]"/>, header <tt>&lt;simd&gt;</tt> synopsis, as indicated:</p>

<blockquote>
<pre>
namespace std {
  [&hellip;]
  // <i><sref ref="[simd.bit]"/>, bit manipulation</i>
  template&lt;<i>simd-vec-type</i> V&gt; constexpr V byteswap(const V&amp; v) noexcept;
  template&lt;<i>simd-vec-type</i> V&gt; constexpr V bit_ceil(const V&amp; v) <del>noexcept</del>;
  template&lt;<i>simd-vec-type</i> V&gt; constexpr V bit_floor(const V&amp; v) noexcept;  
  [&hellip;]
}
</pre>
</blockquote>

</li>

<li><p>Modify <sref ref="[simd.bit]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;<i>simd-vec-type</i> V&gt; constexpr V bit_ceil(const V&amp; v) <del>noexcept</del>;
</pre>
<blockquote>
<p>
-3- <i>Constraints</i>: The type `V::value_type` is an unsigned integer type (<sref ref="[basic.fundamental]"/>).
<p/>
-4- <i>Preconditions</i>: [&hellip;]
<p/>
[&hellip;]
</p>
</blockquote>
</blockquote>

</li>

</ol></resolution>

</issue>
