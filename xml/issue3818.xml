<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3818" status="New">
<title>Exposition-only concepts are not described in library intro</title>
<section><sref ref="[conventions]"/></section>
<submitter>Tim Song</submitter>
<date>8 Nov 2022</date>
<priority>99</priority>

<discussion>
<p>
This is the resolution for <b><a href="https://github.com/cplusplus/nbballot/issues/435">GB-074</a></b>.
</p>

<p>
The comment is:
</p>

<blockquote>
<p>
<sref ref="[expos.only.func]"/> introduces exposition-only function templates. <sref ref="[expos.only.types]"/> introduces
exposition-only types. <sref ref="[objects.within.classes]"/> introduces exposition-only private members.
<p/>
There is nothing about exposition-only concepts, despite them being used extensively in the library clauses.
<p/>
The same problem exists for exposition-only variable templates.
</p>
</blockquote>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[expos.only.func]"/> as indicated, changing the stable name:</p>

<blockquote>
<p>
<b>16.3.3.2 Exposition-only <del>functions</del><ins>entities</ins> [expos.only.<del>func</del><ins>entity</ins>]</b>
<p/>
-1- Several <del>function templates</del><ins>entities</ins> defined in <sref ref="[support]"/> 
through <sref ref="[thread]"/> and <sref ref="[depr]"/> are only defined for the purpose of exposition. 
The declaration of such <del>a function</del><ins>an entity</ins> is followed by a comment ending in <i>exposition only</i>.
</p>
</blockquote>
</li>

<li><p>Strike <sref ref="[expos.only.types]"/> as redundant:</p>

<blockquote>
<p>
<del><b>16.3.3.3.2 Exposition-only types [expos.only.types]</b></del>
<p/>

<del>-1- Several types defined in <sref ref="[support]"/> through <sref ref="[thread]"/> and <sref ref="[depr]"/> 
are defined for the purpose of exposition. The declaration of such a type is followed by a 
comment ending in <i>exposition only</i>.</del>
<p/>
<del><i>[Example 1:</i></del>
</p>
<blockquote>
<pre>
<del>namespace std {
  extern "C" using <i>some-handler</i> = int(int, void*, double);  // exposition only
}</del>
</pre>
</blockquote>

<p>
<del>The type placeholder <i><tt>some-handler</tt></i> can now be used to specify a 
function that takes a callback parameter with C language linkage. 
<i>&mdash; end example]</i></del>
</p>
</blockquote>
</li>
</ol>
</resolution>

</issue>
