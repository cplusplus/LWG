<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
    <!DOCTYPE issue SYSTEM "lwg-issue.dtd" [
        <!ENTITY nbsp " ">
     ]
>
<issue num="473" status="C++11">
    <title>underspecified <tt>ctype</tt> calls</title>
    <section><sref ref="[locale.ctype]"/></section>
    <submitter>Martin Sebor</submitter>
    <date>1 Jul 2004</date>

<discussion>
<p>
Most <tt>ctype</tt> member functions come in two forms: one that operates
on a single character at a time and another form that operates
on a range of characters. Both forms are typically described by
a single Effects and&#47;or Returns clause.
</p>
<p>
The Returns clause of each of the single-character non-virtual forms
suggests that the function calls the corresponding single character
virtual function, and that the array form calls the corresponding
virtual array form. Neither of the two forms of each virtual member
function is required to be implemented in terms of the other.
</p>
<p>
There are three problems:
</p>
<p>
1. One is that while the standard does suggest that each non-virtual
member function calls the corresponding form of the virtual function,
it doesn't actually explicitly require it.
</p>
<p>
Implementations that cache results from some of the virtual member
functions for some or all values of their arguments might want to
call the array form from the non-array form the first time to fill
the cache and avoid any or most subsequent virtual calls. Programs
that rely on each form of the virtual function being called from
the corresponding non-virtual function will see unexpected behavior
when using such implementations.
</p>
<p>
2. The second problem is that either form of each of the virtual
functions can be overridden by a user-defined function in a derived
class to return a value that is different from the one produced by
the virtual function of the alternate form that has not been
overriden.
</p>
<p>
Thus, it might be possible for, say, <tt>ctype::widen(c)</tt> to return one
value, while for <tt>ctype::widen(&amp;c, &amp;c + 1, &amp;wc)</tt> to set
<tt>wc</tt> to another value. This is almost certainly not intended. Both
forms of every function should be required to return the same result
for the same character, otherwise the same program using an
implementation that calls one form of the functions will behave
differently than when using another implementation that calls the
other form of the function "under the hood."
</p>
<p>
3. The last problem is that the standard text fails to specify whether
one form of any of the virtual functions is permitted to be implemented
in terms of the other form or not, and if so, whether it is required
or permitted to call the overridden virtual function or not.
</p>
<p>
Thus, a program that overrides one of the virtual functions so that
it calls the other form which then calls the base member might end
up in an infinite loop if the called form of the base implementation
of the function in turn calls the other form.
</p>
<p>
Lillehammer: Part of this isn't a real problem. We already talk about
caching. 22.1.1&#47;6 But part is a real problem. <tt>ctype</tt> virtuals may call
each other, so users don't know which ones to override to avoid avoid
infinite loops.</p>

<p>This is a problem for all facet virtuals, not just <tt>ctype</tt> virtuals,
so we probably want a blanket statement in clause 22 for all
facets. The LWG is leaning toward a blanket prohibition, that a
facet's virtuals may never call each other. We might want to do that
in clause 27 too, for that matter. A review is necessary.  Bill will
provide wording.</p>

<note>
2009-07 Frankfurt, Howard provided wording directed by consensus.
</note>

<note>
2009-10 Santa Cruz:
</note>

<blockquote><p>
Move to Ready.
</p></blockquote>

</discussion>

<resolution>
<p>
Add paragraph 3 to <sref ref="[locale.categories]"/>:
</p>

<blockquote><p><ins>
-3- Within this clause it is unspecified if one virtual function calls another
virtual function.
</ins></p></blockquote>

</resolution>

<rationale>
<p>
We are explicitly not addressing bullet
item #2, thus giving implementors more latitude. Users will have to
override both virtual functions, not just one.
</p>
</rationale>
</issue>
