<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3849" status="Voting">
<title><tt>cartesian_product_view::<i>iterator</i></tt>'s default constructor is overconstrained</title>
<section><sref ref="[range.cartesian.iterator]"/></section>
<submitter>Hewill Kang</submitter>
<date>06 Jan 2023</date>
<priority>99</priority>

<discussion>
<p>
Currently, <tt>cartesian_product_view::<i>iterator</i></tt> only provides
the default constructor when the first range models <tt>forward_range</tt>,
which seems too restrictive since several input iterators like
<tt>istream_iterator</tt> are still default-constructible.
</p>
<p>
It would be more appropriate to constrain the default constructor
only by whether the underlying iterator satisfies
<tt>default_initializable</tt>, as most other range adaptors do.
Since <tt>cartesian_product_view::<i>iterator</i></tt> contains
a <tt>tuple</tt> member that already has a constrained default constructor,
the proposed resolution simply removes the constraint.
</p>

<note>2023-02-01; Reflector poll</note>
<p>
Set status to Tentatively Ready after nine votes in favour during reflector poll.
</p>

</discussion>

<resolution>
<p>
This wording is relative to <paper num="N4917"/>.
</p>

<ol>
<li><p>Modify <sref ref="[ranges.cartesian.iterator]"/> as indicated:</p>
<blockquote>
<blockquote>
<pre>
namespace std::ranges {
  template&lt;input_range First, forward_range... Vs&gt;
    requires (view&lt;First&gt; &amp;&amp; ... &amp;&amp; view&lt;Vs&gt;)
  template&lt;bool Const&gt;
  class cartesian_product_view&lt;First, Vs...&gt;::<i>iterator</i> {
  public:
    [&hellip;]
    iterator() <del>requires forward_range&lt;<i>maybe-const</i>&lt;Const, First&gt;&gt;</del> = default;
    [&hellip;]
  private:
    using Parent = <i>maybe-const</i>&lt;Const, cartesian_product_view&gt;;          <i>// exposition only</i>
    Parent* <i>parent_</i> = nullptr;                                          <i>// exposition only</i>
    tuple&lt;iterator_t&lt;<i>maybe-const</i>&lt;Const, First&gt;&gt;,
      iterator_t&lt;<i>maybe-const</i>&lt;Const, Vs&gt;&gt;...&gt; <i>current_</i>;                  <i>// exposition only</i>
    [&hellip;]
  };
}
</pre>
</blockquote>
</blockquote>
</li>
</ol>
</resolution>

</issue>
