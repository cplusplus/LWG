<?xml version='1.0' encoding='utf-8' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd">

<issue num="3090" status="Voting">
<title>What is &sect;[time.duration.cons]p4's "no overflow is induced in the conversion" intended to mean?</title>
<section><sref ref="[time.duration.cons]"/></section>
<submitter>Richard Smith</submitter>
<date>22 Mar 2018</date>
<priority>3</priority>

<discussion>
<p>
<sref ref="[time.duration.cons]"/> p4 says:
</p>
<blockquote>
<pre>
template&lt;class Rep2, class Period2&gt;
  constexpr duration(const duration&lt;Rep2, Period2&gt;&amp; d);
</pre>
<blockquote>
<p>
<i>Remarks:</i> This constructor shall not participate in overload resolution unless no overflow is induced in the 
conversion and <tt>treat_as_floating_point_v&lt;rep&gt;</tt> is <tt>true</tt> or both 
<tt>ratio_divide&lt;Period2, period&gt;::den</tt> is 1 and <tt>treat_as_floating_point_v&lt;Rep2&gt;</tt> is <tt>false</tt>.
</p>
</blockquote>
</blockquote>
<p>
with this example:
</p>
<blockquote><pre>
duration&lt;int, milli&gt; ms(3);
duration&lt;int, micro&gt; us = ms;  <i>// OK</i>
duration&lt;int, milli&gt; ms2 = us; <i>// error</i>
</pre></blockquote>
<p>
It's unclear to me what "no overflow is induced in the conversion" means in the above. What happens here:
</p>
<blockquote><pre>
duration&lt;int, milli&gt; ms(INT_MAX);
duration&lt;int, micro&gt; us = ms;  <i>// ???</i>
</pre></blockquote>
<p>
An overflow is clearly induced in the conversion here: internally, we'll multiply <tt>INT_MAX</tt> by 1000. But that 
cannot be determined statically (in general), and so can't affect the result of overload resolution.
<p/>
So what's actually supposed to happen? Are we actually just supposed to check that <tt>Rep2</tt> is no larger than <tt>Rep</tt>? 
(If so, what happens on overflow? Undefined behavior?)
<p/>
It has been pointed out by Howard Hinnant:
</p>
<blockquote style="border-left: 3px solid #ccc;padding-left: 15px;">
This refers to the compile-time conversion factor to convert <tt>Period2</tt> to <tt>Period</tt>. If that conversion factor 
is not representable as a (reduced) <tt>ratio&lt;N, D&gt;</tt>, then the constructor is SFINAE'd out. This might happen 
(for example) converting years to picoseconds.
</blockquote>
<p>
I would not have guessed that from the wording. Maybe replacing "no overflow is induced in the conversion" with "the result 
of <tt>ratio_divide&lt;Period2, Period&gt;</tt> is representable as a <tt>ratio</tt>" or similar would help? 
</p>

<note>2018-06-18 after reflector discussion</note>
<p>Priority set to 3</p>

<note>2020-09-12 Jonathan adds a proposed resolution</note>
<p>
Since the result of the <tt>ratio_divide</tt> has to be a <tt>ratio</tt>,
if it's not representable then the result simply isn't a valid type.
Implementations are not required to make <tt>ratio_divide</tt> SFINAE-friendly
to implement this constraint. They can perform the equivalent calculations
to check if they would overflow, without actually using <tt>ratio_divide</tt>.
</p>


<note>2025-10-23; Reflector poll.</note>
<p>
Set status to Tentatively Ready after seven votes in favour during reflector poll.
</p>
</discussion>

<resolution>
<p>
This wording is relative to <a href="http://wg21.link/n4861">N4861</a>.
</p>

<ol>
<li><p>Modify <sref ref="[time.duration.cons]"/> as indicated:</p>

<blockquote>
<pre>
template&lt;class Rep2, class Period2&gt;
  constexpr duration(const duration&lt;Rep2, Period2&gt;&amp; d);
</pre>
</blockquote>
<p>
-3- <i>Constraints:</i>
<ins>
<tt>is_convertible_v&lt;const Rep2&amp;, rep&gt;</tt> is <tt>true</tt>.
<tt>ratio_divide&lt;typename Period2::type, period&gt;</tt> is
a valid <tt>ratio</tt> specialization.
Either:
</ins>
</p>
<ul>
<li>
<ins>
<tt>treat_as_floating_point_v&lt;rep&gt;</tt> is <tt>true</tt>; or
</ins>
</li>
<li>
<ins>
<tt>ratio_divide&lt;Period2, period&gt;::den</tt> is <tt>1</tt>
and <tt>treat_as_floating_point_v&lt;Rep2&gt;</tt> is <tt>false</tt>.
</ins>
</li>
</ul>
<p>
<del>
No overflow is induced in the conversion and
<tt>treat_as_floating_point_v&lt;rep&gt;</tt> is <tt>true</tt>
or both <tt>ratio_divide&lt;Period2, period&gt;::den</tt> is <tt>1</tt>
and <tt>treat_as_floating_point_v&lt;Rep2&gt;</tt> is <tt>false</tt>.
</del>
[<i>Note:</i> This requirement prevents implicit truncation error<ins>s</ins>
when converting between integral-based <tt>duration</tt> types.
Such a construction could easily lead to confusion about the value of the
<tt>duration</tt>.
&mdash; <i>end note</i>]
</p>
</li>
</ol>
</resolution>

</issue>
