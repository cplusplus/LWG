<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="724" status="C++11">
<title><tt>DefaultConstructible</tt> is not defined</title>
<section><sref ref="[utility.arg.requirements]"/></section>
<submitter>Pablo Halpern</submitter>
<date>12 Sep 2007</date>

<discussion>
<p>
The <tt>DefaultConstructible</tt> requirement is referenced in
several places in the August 2007 working draft
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2369.pdf">N2369</a>,
but is not defined anywhere.
</p>

<note>
Bellevue:
</note>

<blockquote>
<p>
Walking into the default&#47;value-initialization mess...
</p>
<p>
Why two lines? Because we need both expressions to be valid.
</p>
<p>
AJM not sure what the phrase "default constructed" means. This is
unfortunate, as the phrase is already used 24 times in the library!
</p>
<p>
Example: <tt>const int</tt> would not accept first line, but will accept the second.
</p>
<p>
This is an issue that must be solved by concepts, but we might need to solve it independantly first.
</p>
<p>
It seems that the requirements are the syntax in the proposed first
column is valid, but not clear what semantics we need.
</p>
<p>
A table where there is no post-condition seems odd, but appears to sum up our position best.
</p>
<p>
At a minimum an object is declared and is destructible.
</p>
<p>
Move to open, as no-one happy to produce wording on the fly.
</p>
</blockquote>

<note>
2009-07-28 Reopened by Alisdair.  No longer solved by concepts.
</note>

<note>
2009-08-17 Daniel adds "[defaultconstructible]" to table title.  <iref ref="408"/>
depends upon this issue.
</note>

<note>
2009-08-18 Alisdair adds:
</note>

<blockquote>
<p>
Looking at the proposed table in this issue, it really needs two rows:
</p>

<blockquote>
<table border="1">
<caption>Table 33: <tt>DefaultConstructible</tt> requirements [defaultconstructible]</caption>
<tr>
<th>expression</th><th>post-condition</th>
</tr>

<tr>
<td><tt>T t;</tt></td><td><tt>t</tt> is default-initialized.</td>
</tr>

<tr>
<td><tt>T{}</tt></td><td>Object of type <tt>T</tt> is value-initialized.</td>
</tr>
</table>
</blockquote>

<p>
Note I am using the new brace-initialization syntax that is unambiguous
in all use cases (no most vexing parse.)
</p>
</blockquote>

<note>
2009-10-03 Daniel adds:
</note>

<blockquote>
<p>
The suggested definition <tt>T{}</tt> describing it as
value-initialization is wrong, because it belongs to list-initialization
which would - as the current rules are - always prefer a
initializer-list constructor over a default-constructor. I don't
consider this as an appropriate definition of
<tt>DefaultConstructible</tt>. My primary suggestion is to ask core,
whether the special case <tt>T{}</tt> (which also easily leads to
ambiguity situations for more than one initializer-list in a class)
would always prefer a default-constructor - if any - before considering
an initializer-list constructor or to provide another syntax form to
prefer value-initialization over list-initialization. If that fails I
would fall back to suggest to use the expression <tt>T()</tt> instead of
<tt>T{}</tt> with all it's disadvantages for the meaning of the
expression
</p>

<blockquote><pre>
T t();
</pre></blockquote>
</blockquote>

<note>
2009-10 Santa Cruz:
</note>

<blockquote><p>
Leave Open. Core is looking to make Alisdair's proposed
resolution correct.
</p></blockquote>

<note>
2010-01-24 At Alisdair's request, moved his proposal into the proposed wording
section.  The old wording is preserved here:
</note>

<blockquote>
<p>
In section <sref ref="[utility.arg.requirements]"/>, before table 33, add the
following table:
</p>

<p style='text-align:center'>Table 33: <tt>DefaultConstructible</tt> 
requirements [defaultconstructible]</p>

<table border='0' cellspacing='0' cellpadding='0'
 style='border-collapse:collapse'>
 <tr>
  <td>
  <p style='text-align:center'>expression</p>
  </td>
  <td>
  <p style='text-align:center'>post-condition</p>
  </td>
 </tr>
 <tr>
  <td>
  <p><tt>T t;</tt><br/>
  <tt>T()</tt></p>
  </td>
  <td>
  <p><tt>T</tt> is <i>default constructed.</i></p>
  </td>
 </tr>
</table>

</blockquote>

<note>
2010-02-04: Moved to Tentatively Ready after 5 positive votes on c++std-lib.
</note>

</discussion>

<rationale>
<note>
San Francisco:
</note>
<blockquote><p>
We believe concepts will solve this problem
(<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2774.pdf">N2774</a>).
</p></blockquote>

<note>
Rationale is obsolete.
</note>
</rationale>

<resolution>
<p>
In section <sref ref="[utility.arg.requirements]"/>, before table 33, add the
following table:
</p>

<blockquote>
<table border="1">
<caption>Table 33: <tt>DefaultConstructible</tt> requirements [defaultconstructible]</caption>
<tr>
<th>expression</th><th>post-condition</th>
</tr>

<tr>
<td><tt>T t;</tt></td><td>Object <tt>t</tt> is default-initialized.</td>
</tr>

<tr>
<td><tt>T u{};</tt></td><td>Object <tt>u</tt> is value-initialized.</td>
</tr>

<tr>
<td><tt>T()<br/>T{}</tt></td><td>A temporary object of type <tt>T</tt> is value-initialized.</td>
</tr>

</table>
</blockquote>

</resolution>

</issue>
